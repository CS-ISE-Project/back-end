[
    {
        "element_id": "c9f5ddef-ddc2-4f33-8bb7-21a5eefa49d3",
        "metadata": {},
        "text": "491",
        "type": "UncategorizedText"
    },
    {
        "element_id": "4c82165b-623a-4a08-88e2-7152a222fc6d",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant: Conversational Interaction with a Large Language Model for Software Development",
        "type": "UncategorizedText"
    },
    {
        "element_id": "8d55b45a-1774-47e3-88d3-b1481fc59b00",
        "metadata": {},
        "text": "Steven I. Ross IBM Research AI Cambridge, MA, USA steven_ross@us.ibm.com",
        "type": "Title"
    },
    {
        "element_id": "6bf47bd3-9381-4fdd-98d9-45668a4e16a1",
        "metadata": {},
        "text": "Fernando Martinez IBM Argentina La Plata, Buenos Aires, Argentina martferc@ar.ibm.com",
        "type": "Title"
    },
    {
        "element_id": "6974ebf2-c13a-4959-8dc1-bef3749a9228",
        "metadata": {},
        "text": "Stephanie Houde IBM Research AI Cambridge, MA, USA Stephanie.Houde@ibm.com",
        "type": "Title"
    },
    {
        "element_id": "d9da9f88-36f7-480c-bebc-59fd399ce999",
        "metadata": {},
        "text": "Michael Muller IBM Research AI Cambridge, MA, USA michael_muller@us.ibm.com",
        "type": "Title"
    },
    {
        "element_id": "7c4791cc-c20b-4335-b57e-75d0a6c06876",
        "metadata": {},
        "text": "Justin D. Weisz IBM Research AI Yorktown Heights, NY, USA jweisz@us.ibm.com",
        "type": "Title"
    },
    {
        "element_id": "7df3061a-0c20-4924-aca0-144e9fba3124",
        "metadata": {},
        "text": "ABSTRACT Large language models (LLMs) have recently been applied in soft- ware engineering to perform tasks such as translating code between programming languages, generating code from natural language, and autocompleting code as it is being written. When used within development tools, these systems typically treat each model in- vocation independently from all previous invocations, and only a specific limited functionality is exposed within the user interface. This approach to user interaction misses an opportunity for users to more deeply engage with the model by having the context of their previous interactions, as well as the context of their code, inform the model\u2019s responses. We developed a prototype system \u2013 the Programmer\u2019s Assistant \u2013 in order to explore the utility of conversational interactions grounded in code, as well as software engineers\u2019 receptiveness to the idea of conversing with, rather than invoking, a code-fluent LLM. Through an evaluation with 42 partici- pants with varied levels of programming experience, we found that our system was capable of conducting extended, multi-turn discus- sions, and that it enabled additional knowledge and capabilities beyond code generation to emerge from the LLM. Despite skepti- cal initial expectations for conversational programming assistance, participants were impressed by the breadth of the assistant\u2019s capa- bilities, the quality of its responses, and its potential for improving their productivity. Our work demonstrates the unique potential of conversational interactions with LLMs for co-creative processes like software development.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c28c944c-1456-4353-814f-ac4c6d378dea",
        "metadata": {},
        "text": "KEYWORDS code-fluent large language models, foundation models, conversa- tional interaction, human-centered AI",
        "type": "Title"
    },
    {
        "element_id": "8ef61824-25fc-490e-a13d-f4e019b77115",
        "metadata": {},
        "text": "ACM Reference Format: Steven I. Ross, Fernando Martinez, Stephanie Houde, Michael Muller, and Justin D. Weisz. 2023. The Programmer\u2019s Assistant: Conversational Interaction with a Large Language Model for Software Development. In 28th Inter- national Conference on Intelligent User Interfaces (IUI \u201923), March 27\u201331, 2023, Sydney, NSW, Australia. ACM, New York, NY, USA, 24 pages. https: //doi.org/10.1145/3581641.3584037",
        "type": "NarrativeText"
    },
    {
        "element_id": "a029c656-fd46-444e-aa58-a8f2e9841c89",
        "metadata": {},
        "text": "1 INTRODUCTION Software development is a highly skilled task that requires knowl- edge, focus, and creativity [27, 28]. Many techniques have been developed to enhance the productivity of software engineers, such as advanced code repositories [86], knowledge repositories [39], Q&A sites [1], and pair programming practices [18]. Collaborative software engineering is especially promising, given that profes- sional software development is rarely a solo activity and relevant knowledge and expertise are typically distributed widely within an organization [68]. Many efforts have focused on incorporating col- laborative technologies into software development environments (e.g. [8, 25, 26, 58, 101]).",
        "type": "NarrativeText"
    },
    {
        "element_id": "d02f67c2-4a52-4dbb-ac90-a40da6bb1bae",
        "metadata": {},
        "text": "The pioneering work of Rich and Waters on The Programmer\u2019s Apprentice [70] presented a novel concept of a knowledgeable auto- mated assistant \u2013 in effect, an artificial collaborative partner \u2013 that could help software engineers with writing code, designing soft- ware systems, and creating requirements specifications. At the time, AI technologies and computing resources were not sufficient to fully implement their vision. In the intervening years, an increase in computational power, the availability of large corpora of language and code data, and the development of deep neural networks have made new approaches to achieving their goals worth exploring.",
        "type": "NarrativeText"
    },
    {
        "element_id": "2b60058c-6ad2-4094-91e3-c95fe1451bbf",
        "metadata": {},
        "text": "CCS CONCEPTS \u2022 Human-centered computing \u2192 HCI theory, concepts and models; \u2022 Software and its engineering \u2192 Designing software; \u2022 Computing methodologies \u2192 Generative and developmental approaches.",
        "type": "NarrativeText"
    },
    {
        "element_id": "44ab1eb1-76da-4254-9e20-a9445141b43f",
        "metadata": {},
        "text": "Recently, models leveraging the transformer architecture [96] have been developed to perform domain-specific software engi- neering tasks, such as translating code between languages [75], generating documentation for code [36, 38, 97, 98], and generating unit tests for code [92] (see Talamadupula [90] and Allamanis et al. [5] for surveys). Recently developed foundation models \u2013 large language models that can be adapted to multiple tasks and which exhibit emergent behaviors for which they have not been explic- itly trained [14] \u2013 have also proven to be capable with source code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "89a16648-8dc8-4c10-aa90-bfce739d9632",
        "metadata": {},
        "text": "This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs International 4.0 License.",
        "type": "NarrativeText"
    },
    {
        "element_id": "461f021e-5112-48b5-8cef-f4dff6fc686b",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia \u00a9 2023 Copyright held by the owner/author(s). ACM ISBN 979-8-4007-0106-1/23/03. https://doi.org/10.1145/3581641.3584037",
        "type": "UncategorizedText"
    },
    {
        "element_id": "9e2e2d59-ce15-4059-ab85-dbee055ee195",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "dd19bc73-f44f-4d8d-b935-8137146be496",
        "metadata": {},
        "text": "492",
        "type": "UncategorizedText"
    },
    {
        "element_id": "f418e5d6-1fed-4747-b12c-cb0bb820664b",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "a39908b2-5421-4708-8401-d53c94bbf582",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "adb83b9c-729e-4f7d-96b0-e983c92e9b30",
        "metadata": {},
        "text": "While the intent of training LLMs such as GPT-2 [64] and GPT-3 [17] was to give them mastery of natural language, it quickly became apparent that the presence of code in their training corpora had given them the ability to generate code based on natural language descriptions [49]. The Codex model [24] was then produced by fine- tuning GPT-3 on a large corpus of source code data, leading to the development of Copilot [32], a tool that helps software engineers by autocompleting code as it is being written. Experimentation with Copilot has shown its ability to perform additional tasks, such as explaining code, generating documentation, and translating code between languages [6].",
        "type": "NarrativeText"
    },
    {
        "element_id": "a6374c82-cb41-4170-b425-52773410aec6",
        "metadata": {},
        "text": "We motivate the need to further understand how to design human-centered AI systems that enhance the joint perfor- mance of the human-AI collaboration.",
        "type": "ListItem"
    },
    {
        "element_id": "24eae7c4-947b-47d6-a361-53da97eede68",
        "metadata": {},
        "text": "2 RELATED WORK We discuss three areas of related work that have either motivated our study of conversational programming assistance or provided the technical foundations for it. We begin by briefly summarizing Rich and Waters\u2019 visionary work on the Programmer\u2019s Appren- tice [70], followed by summarizing work on code-fluent foundation models and human-centered evaluations of how these models im- pact software engineers\u2019 work. Finally, we discuss conversational interaction and how it might be employed to provide more flexible and sophisticated assistance to software engineers.",
        "type": "NarrativeText"
    },
    {
        "element_id": "2f8e7f37-808c-4b26-a05e-f49144858eb2",
        "metadata": {},
        "text": "Although autocompletion interfaces are useful and valuable when the system can discern the developer\u2019s intent, there are many instances where that is insufficient. For example, the developer may have a good idea of what they want to do, but may be unclear on what functions, libraries, or even algorithms to employ. They may even have general programming questions that need to be answered before they are able to write any code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c1cf0e9e-ae4f-4877-8309-a6d56a6d0209",
        "metadata": {},
        "text": "2.1 The Programmer\u2019s Apprentice Our work is inspired by the vision laid out by Rich and Waters [70], which describes an artificial agent that can act as an intelligent as- sistant for software engineers by providing advice, catching errors, and handling routine details throughout the software development process. The Programmer\u2019s Apprentice [70] relied on a knowledge base of \u201cclich\u00e9s,\u201d which are formal, structured versions of what are known today as software design patterns [31]. It used a hy- brid reasoning system capable of special-purpose reasoning based on frames and a plan calculus, along with general purpose logical reasoning. Although natural language interaction was envisioned, the original prototype implementation ultimately used a stylized command language. We view our work as a conceptual successor to the Programmer\u2019s Apprentice, as it enables the natural language interaction that the Programmer\u2019s Apprentice lacked.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d44d5fd1-70f8-4e49-8121-4d8e86ef61a5",
        "metadata": {},
        "text": "In this paper, we seek to understand whether modern develop- ments in code-fluent foundation models \u2013 large language models that have been fine-tuned on source code data \u2013 are sufficient to support a conversational agent that can act as an assistant in the software development process. We developed the Programmer\u2019s Assistant to explore the capabilities that conversational interaction could enable and the extent to which users would find conversa- tional assistance with programming tasks desirable and useful.",
        "type": "NarrativeText"
    },
    {
        "element_id": "13b86350-e90a-4aa1-a5ce-cb43bdf9c778",
        "metadata": {},
        "text": "We hypothesize that a conversational system may provide a flexible and natural means for interacting with a code-fluent LLM. Conversational interaction could enable users to pursue their ques- tions in a multiple exchange dialog (as observed by Barke et al. [13]) that allows them to ask follow-up questions and refine their inquiries. A conversational programming assistant could ask the user clarifying or disambiguating questions to help it arrive at the best answer. It could also provide multiple types of assistance to the user beyond simply generating code snippets, such as engaging in general discussion of programming topics (e.g. [22, 71]) or help- ing users improve their programming skills (as observed in other studies of automating technologies [99]).",
        "type": "NarrativeText"
    },
    {
        "element_id": "e487b536-0ea0-4456-90e5-63e6a463064c",
        "metadata": {},
        "text": "2.2 Code-fluent Foundation Models and Human-Centered Evaluations of Programming Assistance",
        "type": "Title"
    },
    {
        "element_id": "ab6d6093-9e5a-414e-9459-713c20e54321",
        "metadata": {},
        "text": "Generative models based on the transformer architecture [96] have recently been applied to the domain of software engineering. Code- fluent large language models are capable of generating code from natural language descriptions [105], translating code from one lan- guage to another [75], generating unit tests [92], and even gener- ating documentation for code [36, 38, 97, 98]. These models are probabilistic systems, and as such, do not always produce perfect results (e.g. code that is free of syntax or logical errors). Nonetheless, Weisz et al. [102] found that software engineers are still interested in using such models in their work, and that the imperfect outputs of these models can even help them produce higher-quality code via human-AI collaboration [103].",
        "type": "NarrativeText"
    },
    {
        "element_id": "ded1e11c-0a62-41d3-881f-ca65459f7278",
        "metadata": {},
        "text": "Our paper makes the following contributions to the IUI commu-",
        "type": "NarrativeText"
    },
    {
        "element_id": "ff8a45f8-06e1-4f4a-b70b-73333567ec02",
        "metadata": {},
        "text": "nity:",
        "type": "Title"
    },
    {
        "element_id": "2b71b0f3-9c3b-4d58-8a28-5ce36b33e1f6",
        "metadata": {},
        "text": "We provide empirical evidence that a conversational pro- gramming assistant based on a state-of-the-art, code-fluent foundation model provides valuable assistance to software engineers in a myriad of ways: by answering general pro- gramming questions, by generating context-relevant code, by enabling the model to exhibit emergent behaviors, and by enabling users to ask follow-up questions that depend upon their conversational and code contexts.",
        "type": "ListItem"
    },
    {
        "element_id": "6aefa394-cace-4c41-8de5-69ae470636a4",
        "metadata": {},
        "text": "New tools based on code-fluent LLMs are actively being devel- oped. GitHub Copilot1 is described as \u201cYour AI pair programmer.\u201d It is optimized for the code autocompletion use case: given a starting snippet such as a method\u2019s documentation, signature, or partial implementation, Copilot completes the implementation. Copilot is based on the OpenAI Codex model [24], a 12 billion parameter ver- sion of GPT-3 [17, 49], fine-tuned on code samples from 54 million public software repositories on GitHub. Empirical evaluations of",
        "type": "NarrativeText"
    },
    {
        "element_id": "363e09fc-94dc-4e02-9945-e4525fb8ad9a",
        "metadata": {},
        "text": "We show how different interaction models \u2013 conversation, direct manipulation, and search \u2013 provide complementary types of support to software engineers with tradeoffs be- tween the user\u2019s focus and attention, the relevance of sup- port to their code context, the provenance of that support, and their ability to ask follow-up questions.",
        "type": "ListItem"
    },
    {
        "element_id": "4602f5e4-057c-46f4-b347-7967088ed1a6",
        "metadata": {},
        "text": "1https://github.com/features/copilot",
        "type": "Title"
    },
    {
        "element_id": "395cd2cc-4010-4cca-bc24-c34b6c3695c5",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "3955a641-da0b-4c15-b5b0-9cf90886f3a6",
        "metadata": {},
        "text": "493",
        "type": "UncategorizedText"
    },
    {
        "element_id": "bd5057a3-c3ad-4f79-8e9c-7392be6962d6",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "f71f644f-83af-4889-afa0-d0e63801bec9",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "a5b2b58c-e380-4118-b5bd-45de7c1bfd13",
        "metadata": {},
        "text": "this model have shown that, although the quality of its outputs is quite good, those outputs may still be problematic [57]. Echoing the results from Weisz et al. [103], human-centered evaluations of Copi- lot have found that it increases users\u2019 feelings of productivity [109], and that almost a third (27%) of its proposed code completions were accepted by users. In a contrasting evaluation, Vaithilingam et al. [95] found that while most participants expressed a preference to use Copilot in their daily work, it did not necessarily improve their task completion times or success rates. Yet, in a study by Kalliamvakou [40], developers working with Copilot were able to implement a web server in Javascript 55% faster than developers who did not use Copilot.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0d0f3db9-da80-4539-9f14-c9fff5cf73d9",
        "metadata": {},
        "text": "environments. PACT is structured as a discrete question-answering system based on a neural machine translation approach, but it doesn\u2019t maintain a conversational context.",
        "type": "NarrativeText"
    },
    {
        "element_id": "1a6b4cea-005d-4ad1-a507-7323c4eb1667",
        "metadata": {},
        "text": "2.3.2 Conversation Analysis. Conversation is a form of interaction between people that enables robust communication. Conversation Analysis [76] is a method for understanding the natural structure of human conversational interaction. It catalogs different patterns of conversational acts and how they are utilized by interlocutors in order to attain a wide variety of goals. Recently, Conversation Anal- ysis has been adapted to describe patterns of interactions between humans and artificial conversational agents in order to aid in the design of chatbots [50]. We apply techniques from Conversation Analysis in our study of conversational programming assistance.",
        "type": "NarrativeText"
    },
    {
        "element_id": "b0aae1e6-f957-4b59-9a61-893c6cca92f2",
        "metadata": {},
        "text": "A grounded theory analysis of how programmers interact with Copilot [13] found that their interactions varied depending upon whether they were accelerating tasks that they already knew how to do or if they were exploring solutions to problems that they were less sure about. Autocompletion was effective when developers were operating in \u201cacceleration mode\u201d and relied on the model to produce short completions that could be verified quickly. In \u201cexploration mode,\u201d however, the interaction was more awkward. Developers would communicate with Copilot by typing comments and seeing what Copilot generated in response. Then, they would modify their comments to explore other ways of prompting a re- sponse. Ultimately, the comments used to prompt the model would be deleted after the relevant code was generated, indicating that their value was largely in driving a back-and-forth, yet context free, dialog with the model to coerce it to produce the desired results through an iterative refinement process. In this paper, we fully commit to a context-aware conversational style of interaction with a code-fluent LLM and assess the value it provides to users.",
        "type": "NarrativeText"
    },
    {
        "element_id": "80c0f9cf-d619-4a90-84b3-607b4195cca5",
        "metadata": {},
        "text": "3 THE PROGRAMMER\u2019S ASSISTANT In order to explore conversational programming assistance, we created a functional prototype system called The Programmer\u2019s Assistant. Our prototype, shown in Figure 1, combines a code editor with a chat interface. The code editor was implemented using the Microsoft Monaco Editor5 embedded in a React wrapper6. The chat user interface was implemented using the React-Chatbot-Kit7 framework. To drive the conversational interaction, we employed OpenAI\u2019s Codex model [24], accessed through its web API.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a9017cd3-1fd4-41be-b68f-8a77c67a24d8",
        "metadata": {},
        "text": "We developed our prototype as a lightweight coding environ- ment in order to examine the user experience of interacting with a conversational assistant. Our work was exploratory in nature, and thus we did not have specific design goals for the prototype beyond integrating a code editor with a code-fluent LLM. We also did not attempt to target the prototype for a specific class of users (e.g. novices or experts) or use cases (e.g. writing code vs. learning a new programming language), as we wanted any value provided by conversational assistance to emerge from our user study. We also did not implement the ability to run or debug code in our prototype as we wanted to explore the nature of the conversational interac- tion rather than having users focus extensively on the production of working code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "5dc4acb6-795a-436e-8f0f-6c7f1197ea81",
        "metadata": {},
        "text": "2.3 Conversational Interaction and Analysis 2.3.1 Conversational Interaction. Using natural language to inter- act with technology has had a long research history [2], starting in the 1960s with pattern-matching approaches like Eliza [104], and continuing to today with state-of-the-art large language model- based conversational systems [107] such as Meena [3] and Blender- Bot [84]. These systems are intended to address the problem of open-domain dialog, with a goal of realistically engaging in con- versation, but not particularly in a goal-directed or task-oriented manner.",
        "type": "NarrativeText"
    },
    {
        "element_id": "975a8bdb-631b-4c93-b377-7880045f16c7",
        "metadata": {},
        "text": "When designing how users would interact with the Program- mer\u2019s Assistant, we decided that it should be available on demand and not monitor the user\u2019s work in progress or give unsolicited suggestions or advice, in keeping with the conversational agent interaction model proposed by Ross et al. [73, 74]. This approach was supported by feedback from prospective users who were con- cerned about the assistant providing criticism of unfinished efforts in progress or distracting them while they worked. Instead, we force initiative onto the user and only have the assistant respond to their requests. In this way, the assistant can provide help when requested without undesirable interruptions that can distract or interfere with the user\u2019s flow.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d7ca809a-2f40-4639-8020-85f25287f77b",
        "metadata": {},
        "text": "Task-oriented chatbots are typically built with frameworks such as the Microsoft Bot Framework2, Google DialogFlow3, and IBM Watson Assistant4. They operate using pre-defined dialogue trees and use natural language processing to detect conversational intents and extract contextual entities. This structure enables the creation of special purpose, but fairly limited and rigid, conversational agents. There have been several recent attempts to investigate conver- sational programming assistance. Kuttal et al. [42] conducted a Wizard of Oz study in which a pair programmer was replaced with a conversational agent, and they found that \u201cagents can act as ef- fective pair programming partners.\u201d The PACT system [106] is a chatbot that assists programmers adjusting to new programming",
        "type": "NarrativeText"
    },
    {
        "element_id": "41767f7c-6a24-451c-9235-8aa31de1b264",
        "metadata": {},
        "text": "When a user interacts with the assistant, we keep track of their selection state in the code editor. If a user sends a message to the assistant without any code selected in the editor, then that message (along with the prior conversational context) is passed directly to the model. If a user sends a message to the assistant with new code",
        "type": "NarrativeText"
    },
    {
        "element_id": "08428d99-fea3-4962-9735-8842c7551031",
        "metadata": {},
        "text": "2https://dev.botframework.com/ 3https://cloud.google.com/dialogflow 4https://www.ibm.com/products/watson-assistant/artificial-intelligence",
        "type": "Title"
    },
    {
        "element_id": "999190bd-b098-4911-b4a5-87b2375577f0",
        "metadata": {},
        "text": "5https://microsoft.github.io/monaco-editor/ 6https://www.npmjs.com/package/@monaco-editor/react 7https://fredrikoseberg.github.io/react-chatbot-kit-docs/",
        "type": "Title"
    },
    {
        "element_id": "c750147e-f2a4-43ac-9ef9-b2db847a455f",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "aef9e142-e5a5-449e-a1d5-14ffed7377f0",
        "metadata": {},
        "text": "494",
        "type": "UncategorizedText"
    },
    {
        "element_id": "6de1b7f8-00b0-4669-9031-abae816c5fce",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "74c9ec1e-1f58-4881-9243-6a304c0537f3",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "f4656f9f-1c9c-4ff3-8416-c1a76985db94",
        "metadata": {},
        "text": "interactions) in a back-end database. To address inconsistencies in the style or formatting of code generated by Codex, the proxy server reformats all code segments using the Black code formatter 9 before transmitting them to the client UI.",
        "type": "NarrativeText"
    },
    {
        "element_id": "b029d1eb-07ca-44c5-b010-7aba02a28807",
        "metadata": {},
        "text": "selected in the editor (i.e. code that wasn\u2019t previously selected when they sent their last message), then that code is appended to the message before being communicated to the model.",
        "type": "NarrativeText"
    },
    {
        "element_id": "65dc09b0-3355-4a67-b310-88b2a5e37068",
        "metadata": {},
        "text": "The model may produce multiple types of responses to a user\u2019s",
        "type": "NarrativeText"
    },
    {
        "element_id": "21af4dd1-d71e-4219-8077-906d354be8f8",
        "metadata": {},
        "text": "message. We treat each type of response differently in the UI.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f5ec3dbb-9b88-44c5-b7b1-111ca54326fb",
        "metadata": {},
        "text": "The client maintains the transcript of the ongoing conversation. Each time the user sends a message in the chat, the client constructs a new prompt for the model by concatenating the initial prompt, the chat transcript, and the user\u2019s new utterance, and makes a re- quest for the model to complete the transcript. This completion request also specifies a stop sequence of tokens to prevent the model from generating both sides of the conversation (e.g. what the model thinks the user\u2019s next utterance might be after the as- sistant\u2019s response). Given the API\u2019s limitation on context length (4,096 tokens for both the prompt and model response), we silently \u201cforget\u201d older exchanges in the chat transcript when constructing the prompt to ensure that our completion request remains within bounds. Nonetheless, the entire conversational history remains visible to the user in the UI.",
        "type": "NarrativeText"
    },
    {
        "element_id": "8e34131f-1329-4035-83c7-b147edca0c2a",
        "metadata": {},
        "text": "Responses that do not contain code are always rendered in the chat UI (Figure 1E).",
        "type": "ListItem"
    },
    {
        "element_id": "5f8285a7-fb0a-420f-b183-163015a1bdc5",
        "metadata": {},
        "text": "Responses containing short code snippets (\u2264 10 lines) are rendered inline in the chat UI (Figure 1G).",
        "type": "ListItem"
    },
    {
        "element_id": "e213c63c-fc2c-4981-a5e8-4b0afd6dd8ce",
        "metadata": {},
        "text": "Responses containing longer code snippets (> 10 lines) show the code in a pop-up window (Figure 2A), with a proxy entry in the chat transcript (Figure 2B) that allows users to re- display the code window after it has been closed. Non-code text in the response remains in the chat transcript.",
        "type": "ListItem"
    },
    {
        "element_id": "77ff7d28-1bb1-4668-94ac-c1ba349ae992",
        "metadata": {},
        "text": "The assistant never directly modifies the contents of the user\u2019s source code; rather, any code the user desires to transfer from the chat takes place via copy/paste.",
        "type": "NarrativeText"
    },
    {
        "element_id": "400bd1aa-74ac-4dd9-b4bf-d2bf6d90c94e",
        "metadata": {},
        "text": "Figure 1 shows a screenshot of a real, sample conversation, in which the user asks a question that results in an inline response, then requests an explanation of some code in the editor, and then re- quests further elaboration. Figure 2 shows an example conversation that resulted in the generation of a longer code sample, shown in a popup window. This example shows how the assistant produced an incomplete solution, followed by criticism from the user regarding the missing code, and resulting in an apology and the generation of a complete solution.",
        "type": "NarrativeText"
    },
    {
        "element_id": "38df0b46-8028-47a8-9cba-b003afa52675",
        "metadata": {},
        "text": "The client UI provides a loose coupling between the source code editor and the chat interface. Users can hide the chat pane when they wish to focus solely on their code, and re-engage with it when they desire assistance. Code selected in the editor is included in the conversation in order to couple the code context with the conversation. Easily-accessible buttons are provided in the UI to copy code responses from the assistant to the clipboard.",
        "type": "NarrativeText"
    },
    {
        "element_id": "67ad8569-c800-4bdc-a039-0cbe9adc9fd2",
        "metadata": {},
        "text": "3.3 Handling Model Limitations While developing the Programmer\u2019s Assistant, and in early pilot testing, we experienced some quirks and shortcomings of the model and our approach to using it for conversational interaction. One limitation stemmed from the fact that the model sometimes pro- duced incorrect responses (e.g. code with syntax errors), incomplete responses (e.g. code that was missing functionality), irrelevant re- sponses (e.g. responses not related to the user\u2019s question), or insub- stantial responses (e.g. \u201cI don\u2019t know\u201d). Because of the probabilistic nature of model inference, re-prompting the model would some- times produce a more correct or appropriate response. Thus, we added the ability for users to \u201ctry again,\u201d either by asking in the chat or by clicking a button in the UI (Figure 1C). This feature removes the assistant\u2019s last response from the context presented to the model and then re-invokes the model with an increased temperature10. Although it is possible for transformer models such as Codex to produce multiple possible responses to a single prompt, we only request a single response in order to speed up response time as well as to preserve the token budget for conversational context. Thus, the \u201ctry again\u201d feature provides an alternate way to produce a wider variety of responses.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a113d7d4-b0ee-45c0-ac07-438d8ff21442",
        "metadata": {},
        "text": "3.1 Supporting Conversational Interaction We enabled Codex to conduct a conversational interaction by prompt- ing it with a conversational transcript and a request to produce the next conversational turn. The prompt establishes a pattern of conversation between a user and a programming assistant named Socrates. It provides several examples of Socrates responding to gen- eral coding questions, generating code in response to a request, and accepting code as input. It establishes a convention for delimiting code in the conversation, making it easy to parse for display in the UI. It also establishes an interaction style for the assistant, directing it to be polite, eager, helpful, and humble, and to present its re- sponses in a non-authoritative manner8. Because of the possibility that the model might produce erroneous answers or incorrect code (as discussed in Weisz et al. [102]), we felt it was important that the assistant convey a sense of uncertainty to encourage users to not accept its results uncritically to avoid over-reliance (e.g. as observed in Moroz et al.\u2019s study of Copilot [51], and discussed more gener- ally in Ashktorab et al. [9]) as well as automation bias [45, 46, 65]. We present the full text of the prompt used for the assistant in Appendix D.",
        "type": "NarrativeText"
    },
    {
        "element_id": "72f9f19a-ae75-4137-911b-71a476624e48",
        "metadata": {},
        "text": "During pilot testing, we noticed that the assistant sometimes happened to generate the same response to multiple, unrelated re- quests. In these cases, the assistant tended to get \u201cstuck\u201d in a pattern of repeating the same response and was unable to resume normal conversation. To avoid this problem, we automatically execute a",
        "type": "NarrativeText"
    },
    {
        "element_id": "744fa543-26d2-46d8-b14f-bf60cdd1b28e",
        "metadata": {},
        "text": "3.2 Architecture & UI Design The Programmer\u2019s Assistant communicates with the Codex API via a proxy server that forwards requests from the React client. The proxy also rate-limits access to conform to the API\u2019s policy, and it logs UI events from the client (e.g. requests, responses, and UI",
        "type": "NarrativeText"
    },
    {
        "element_id": "cda41784-10cf-4b35-8cb8-8899f9fb072e",
        "metadata": {},
        "text": "9https://black.readthedocs.io/en/stable/ 10Temperature is a parameter in a generative model that specifies the amount of variation in the generation process. Higher temperatures result in greater variability in the model\u2019s output.",
        "type": "NarrativeText"
    },
    {
        "element_id": "157d8f57-20a8-4b59-b3e0-ed378a262f7e",
        "metadata": {},
        "text": "8The assistant\u2019s use of non-authoritative responses was encoded into the LLM prompt; output token probabilities from the LLM were not utilized to influence the assistant\u2019s response.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0341fa2a-fa0d-4aa0-a5db-e2b1b6a2d7cf",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "8578c95c-0ed0-4ef6-b28d-4d8aba868d80",
        "metadata": {},
        "text": "495",
        "type": "UncategorizedText"
    },
    {
        "element_id": "4f600e1c-f470-4b61-a033-4849f0425ffd",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "f2b3bb8e-26cb-450c-901e-c4e4b2692e31",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "6456063b-8e18-4038-a814-bb50253ef059",
        "metadata": {},
        "text": "D",
        "type": "Title"
    },
    {
        "element_id": "8f3e8a2b-af2b-482b-b3bc-9bbe92f517b8",
        "metadata": {},
        "text": "A",
        "type": "Title"
    },
    {
        "element_id": "1766a0a6-3cdc-4aae-9263-2f7a15a6e2f9",
        "metadata": {},
        "text": "C",
        "type": "Title"
    },
    {
        "element_id": "3111f17f-4af2-439b-8872-56fe8bf6a3f2",
        "metadata": {},
        "text": "HGFE",
        "type": "Title"
    },
    {
        "element_id": "a0223254-5ecb-44c0-b978-2475b166911f",
        "metadata": {},
        "text": "B",
        "type": "Title"
    },
    {
        "element_id": "d3db3c07-5cb1-4ee2-8bd8-3b0331cb8a2f",
        "metadata": {},
        "text": "Figure 1: The Programmer\u2019s Assistant. The user interface provides a code editor on the left (A) and a chat pane on the right (B). The \u201ctry again\u201d button (C) allows users to ask the assistant to generate an alternate response to the most recent question. The \u201cstart over\u201d button (D) resets the conversational context for the assistant, but maintains the chat transcript in the UI. In this example, we show the assistant introduce itself to the user (E). Next, the user asks a general programming question (F), for which the assistant provides an inline code response (G). The user then asks a question about code selected in the editor (H), followed by a series of follow-up questions.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0203ab6e-a24c-4f0e-b727-d8ac618f5338",
        "metadata": {},
        "text": "3.4 Sample Conversation We provide a real sample conversation with the Programmer\u2019s Assistant in Listing 1. This conversation begins with the assistant greeting the user (line 1). Next, the user asks a general Python programming question (line 4), to which the assistant responds with a non-authoritative remark (\u201cI think...\u201d) and a code snippet (line 9). The user next asks a follow-up question that depends on their previous question and the assistant\u2019s response (line 11), to which the assistant provides another code snippet (line 15), satisfying the user\u2019s request.",
        "type": "NarrativeText"
    },
    {
        "element_id": "6331b02d-e9bb-407d-983c-e917fb9fb6bb",
        "metadata": {},
        "text": "\u201ctry again\u201d operation in the background when we see identical consecutive responses from the assistant.",
        "type": "NarrativeText"
    },
    {
        "element_id": "42958f6d-6aff-41c7-8492-ad9b8f19c045",
        "metadata": {},
        "text": "Finally, we noticed that the accumulation of conversational con- text sometimes resulted in the assistant becoming fixated on some portion of the earlier conversation. For example, it might respond to a question with portions of the prompt or of earlier conversation, and become less responsive to newer requests. To address this issue, we introduced a \u201cstart over\u201d feature, accessible via the chat or by clicking a button in the UI (Figure 1D), that resets the context to the original prompt, forgetting the rest of the conversational history. We preserve the chat transcript in the UI, but delineate the break in the assistant\u2019s memory with an annotation in the chat transcript. These annotations are added both for \u201ctry again\u201d and \u201cstart over.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "04935b46-b4b4-4642-a212-e678c11380e4",
        "metadata": {},
        "text": "The user then switches topics and asks the assistant to write a Fibonacci function (line 17), and the assistant again responds with a non-authoritative remark (\u201cI will give it a try,\u201d line 20) and a block of code. The user then asks how the function works (line 30) and the assistant provides an adequate description (line 32).",
        "type": "NarrativeText"
    },
    {
        "element_id": "3b8f950f-bd08-4df9-83a9-0ff0ff574ac2",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "f192710d-a40b-4bf7-a4b8-2a7ea7f9de99",
        "metadata": {},
        "text": "496",
        "type": "UncategorizedText"
    },
    {
        "element_id": "31b8e827-abe3-44cb-80d1-a0468dce17fb",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "08da6dfa-b3ca-4daf-a4f3-d9351d9a7509",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "599986d9-7709-4e5d-9ade-2248c395684b",
        "metadata": {},
        "text": "Figure 2: Code Preview. Long code responses (> 10 lines) are presented in a pop-up window (A), with a button to copy the code and close the window. This code can be re-accessed from the chat transcript by clicking the proxy icon (B).",
        "type": "NarrativeText"
    },
    {
        "element_id": "62ab33ee-f5b6-423e-88e7-4000e7846221",
        "metadata": {},
        "text": "Next, the user asks the assistant to re-implement the function in a different way (line 37), again leveraging the ability to ask follow-up questions. The assistant produces an alternative implementation that conforms to the user\u2019s request (line 41). The user follows up with a question that depends on multiple past utterances and re- sponses in the chat transcript (line 47), and the assistant produces a relevant response (line 49). The conversation closes with the user thanking the assistant (line 53) and the assistant acknowledging their gratitude (line 55).",
        "type": "NarrativeText"
    },
    {
        "element_id": "9a2e3a48-4323-4492-a69c-9b7f5592dc47",
        "metadata": {},
        "text": "12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38",
        "type": "UncategorizedText"
    },
    {
        "element_id": "aea5a74a-d219-4282-9360-6a0698ac54e2",
        "metadata": {},
        "text": "Socrates : I think you would do something like this :",
        "type": "NarrativeText"
    },
    {
        "element_id": "a6244ea9-2f9a-4aab-ad20-ceec147b793b",
        "metadata": {},
        "text": "for key in my_dict:",
        "type": "Title"
    },
    {
        "element_id": "205a4a80-81b1-48a0-9787-bfee2db62410",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "490b141c-136a-4382-98c2-df014c631129",
        "metadata": {},
        "text": "Write a function that returns the nth value in the Fibonacci sequence .",
        "type": "NarrativeText"
    },
    {
        "element_id": "e2465c2d-8ac1-4ea0-a4c1-4ca076e560b9",
        "metadata": {},
        "text": "Socrates : I will give it a try .",
        "type": "NarrativeText"
    },
    {
        "element_id": "bf74b7e9-cfac-4f8f-8380-13be8ac58cbc",
        "metadata": {},
        "text": "def fib(n):",
        "type": "Title"
    },
    {
        "element_id": "5ede5d4c-ba50-4fed-b2b5-a941c69d2635",
        "metadata": {},
        "text": "if n == 0: return 0 elif n == 1: return 1",
        "type": "NarrativeText"
    },
    {
        "element_id": "9ef819d5-3f72-4e68-bf28-f617c476e66f",
        "metadata": {},
        "text": "Listing 1: A conversation with the Programmer\u2019s Assistant. Code presented by the assistant is listed in bold face. 1 2 3 4 5 6 7 8 9 10 11",
        "type": "NarrativeText"
    },
    {
        "element_id": "5878fa2e-0f0a-4296-9f1e-8dc8f6c58d6e",
        "metadata": {},
        "text": "else:",
        "type": "Title"
    },
    {
        "element_id": "53926af3-1aa9-4832-b684-258d13dc0434",
        "metadata": {},
        "text": "return fib(n - 1) + fib(n - 2)",
        "type": "Title"
    },
    {
        "element_id": "73121d55-1ac6-4c7e-9a9d-0ab205130be9",
        "metadata": {},
        "text": "Socrates : Hello ! My name is Socrates your programming What can I help you with today ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "6f189a14-f4c3-4cea-8a79-c69de8e4791e",
        "metadata": {},
        "text": "assistant .",
        "type": "Title"
    },
    {
        "element_id": "a016b34c-4a7f-4952-9ec8-d0de4c404fe1",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "03d28bcf-d2d6-4872-8433-03617bb9afb8",
        "metadata": {},
        "text": "How does this work ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "a641216c-09f3-4adb-8cc7-ef8fad1f7047",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "19377344-4d8c-4b7b-9183-64ab63c0963b",
        "metadata": {},
        "text": "How do I get a list of the keys in a Python dictionary ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "a01d75c7-4067-4301-b222-a202bc9faafc",
        "metadata": {},
        "text": "Socrates : The Fibonacci sequence is defined by the",
        "type": "NarrativeText"
    },
    {
        "element_id": "b55a696e-43b3-4300-b470-3acc12bc64e3",
        "metadata": {},
        "text": "recurrence relation F(n) = F(n -1) + F (n -2). This function implements that recurrence relation .",
        "type": "NarrativeText"
    },
    {
        "element_id": "94d31eda-b95f-4619-af11-19f2977d3da2",
        "metadata": {},
        "text": "Socrates : I think you would do something like this :",
        "type": "NarrativeText"
    },
    {
        "element_id": "b6a22efc-399c-4b9c-a2bf-762c4ea6c48a",
        "metadata": {},
        "text": "list(my_dict.keys())",
        "type": "Title"
    },
    {
        "element_id": "0b8c464d-d5ec-4735-bb20-067bac9b3ee4",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "872d29a1-4a74-4413-95b8-01cbad48348f",
        "metadata": {},
        "text": "Can this be done without recursion ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "7b2cfaa3-e8ac-4fba-af22-088d9188ecc3",
        "metadata": {},
        "text": "What if I just wanted to iterate over them ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "e29041b5-9595-471c-a936-cca0a67e2dad",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "aeae1e34-cc13-4e6a-a5a1-0be0082b71ff",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "0361e30e-4abf-4505-bd7f-434c302683d8",
        "metadata": {},
        "text": "497",
        "type": "UncategorizedText"
    },
    {
        "element_id": "76722e33-c4b8-4242-b4e4-3e4f7b7d7e08",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "1eda5f8b-6abe-4e3e-b4c4-02d1c261b819",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "ae59ffd0-5986-41e7-b1d5-8b288f623311",
        "metadata": {},
        "text": "participant through 10 sample interactions to give them a feeling for what the assistant could do and how to interact with it. The tutorial demonstrated how to ask questions, how to request code to be generated, and how to evaluate existing code. It did not specifi- cally cover how to generate documentation or unit tests. Tutorial instructions were provided within the code editor. We include the specific text used for the tutorial in Appendix B.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4a3a4968-3416-4d10-83c2-2d89dfd3fc3b",
        "metadata": {},
        "text": "Socrates : I think so . How about this ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "70cd8fe4-8960-4975-84a8-cabe64d171be",
        "metadata": {},
        "text": "39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55",
        "type": "UncategorizedText"
    },
    {
        "element_id": "558d7497-e7a4-4f31-9844-8ddc6ddeef57",
        "metadata": {},
        "text": "def fib(n): a,b = 0,1 for i in range(n):",
        "type": "Title"
    },
    {
        "element_id": "9d42019f-b9bf-4d31-9b85-557c02f5c97c",
        "metadata": {},
        "text": "a,b = b,a+b",
        "type": "Title"
    },
    {
        "element_id": "bfe55a22-0962-4245-a01f-e65dc1a74b56",
        "metadata": {},
        "text": "return",
        "type": "Title"
    },
    {
        "element_id": "e78f560d-0ff4-482d-8707-bd0a35d096fc",
        "metadata": {},
        "text": "Which version is better ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "2770614e-fd43-4710-8c1a-3adb35736c67",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "ea6f5dab-0a7d-44ff-83ce-680fa0fe4a91",
        "metadata": {},
        "text": "Socrates : I think the recursive version is more",
        "type": "NarrativeText"
    },
    {
        "element_id": "55c8ffcd-fed4-4608-b89f-cffe1120b15b",
        "metadata": {},
        "text": "4.1.2 Programming Challenges. After completing the tutorial, par- ticipants unlocked four programming challenges. Two of the chal- lenges involved coding problems (writing a queue class and writing code to create a scatterplot of data in a CSV file), one involved doc- umenting a given function (an implementation of a graph search algorithm), and one involved writing unit tests for a given func- tion (computing the greatest common divisor of two arguments). Although the Programmer\u2019s Assistant was visible and available for use, we provided no specific requirement that it actually be used to complete the challenges.",
        "type": "NarrativeText"
    },
    {
        "element_id": "8673541a-2e55-45fc-b5db-a4180425a99d",
        "metadata": {},
        "text": "elegant , but the iterative version is more efficient .",
        "type": "NarrativeText"
    },
    {
        "element_id": "23f67cac-f54a-4f36-a516-636337e42da7",
        "metadata": {},
        "text": "User :",
        "type": "Title"
    },
    {
        "element_id": "f7c6e0f1-d876-482d-a690-5c3a26adb5d0",
        "metadata": {},
        "text": "Thanks !",
        "type": "Title"
    },
    {
        "element_id": "b856c11c-cd72-409e-9033-a70e212935fb",
        "metadata": {},
        "text": "Socrates : You ' re welcome !",
        "type": "Title"
    },
    {
        "element_id": "7c05778c-dfed-4640-98a3-71bc52890f5c",
        "metadata": {},
        "text": "4 EMPIRICAL STUDY OF CONVERSATIONAL",
        "type": "Title"
    },
    {
        "element_id": "bd838fa0-7eee-4884-983f-989ea5e79966",
        "metadata": {},
        "text": "PROGRAMMING ASSISTANCE",
        "type": "Title"
    },
    {
        "element_id": "266e054c-b6d1-4912-a9f4-11102328c0f5",
        "metadata": {},
        "text": "We conducted an empirical user study of the Programmer\u2019s Assis- tant to assess whether conversational assistance provides value in a software engineering context11. Our inquiry focused on the user experience and value of conversational interactions grounded in code. We therefore designed a qualitative study to investigate atti- tudes toward a conversational programming assistant: do people enjoy interacting conversationally, what kinds of questions do they ask, and how does the experience compare to other forms of pro- gramming support such as searching the web? We note that prior studies (e.g. [103, 105, 109]) conducted quantitative examinations of the use of LLMs in code work; our study is akin to Weisz et al.\u2019s qualitative examination of software engineers\u2019 attitudes toward working with models that may fail to produce working code [102]. To address our questions, we deployed the Programmer\u2019s Assis- tant within our organization \u2013 a global technology company \u2013 and invited people to try it out and give us feedback on their experience. We invited people with varying levels of programming skill in order to obtain a wide range of feedback on the kinds of use cases for which the tool could provide assistance.",
        "type": "NarrativeText"
    },
    {
        "element_id": "cdb96c41-bd0c-4f42-ac3e-b791ddcd5b00",
        "metadata": {},
        "text": "After participants completed their solution to a challenge, they submitted it by clicking a button in the UI. The code editor used in the Programmer\u2019s Assistant was not a fully-functional IDE and did not provide syntax checking or the ability to run, test, or debug code. Due to these limitations, participants were asked to submit their solutions when they felt they had completed the challenge to their own satisfaction.",
        "type": "NarrativeText"
    },
    {
        "element_id": "9d6e4136-5725-4485-b497-35d24643a076",
        "metadata": {},
        "text": "4.2 Participants To recruit participants for our study, we posted internal advertise- ments in various communications channels focused on software engineering. Our advertisements stated that we were evaluating a conversational programming assistant, but were kept deliberately vague in order to minimize the impact on peoples\u2019 expectations of the experience.",
        "type": "NarrativeText"
    },
    {
        "element_id": "32390fab-c32d-493d-8bab-d3b054302fc6",
        "metadata": {},
        "text": "Our advertisement yielded a pool of 140 potential participants. In order to recruit a diverse sample, we used a screening survey that asked about their job role, their familiarity with and recency of use of Python, and their availability to participate in our study. We accepted participants into the study on a rolling basis, selecting participants to capture a range of programming experiences and ensure balanced gender representation. We conducted periodic re- views to determine whether we were learning something new from each participant or if we had reached the point of saturation [7]. We stopped collecting data after running 42 participants as we were no longer observing any new behaviors or gleaning any new insights. The Programmer\u2019s Assistant implementation and configuration were held constant over the course of the study; no changes to the UI design or LLM prompt were made.",
        "type": "NarrativeText"
    },
    {
        "element_id": "85301ea9-8f09-4fa3-8669-71690ef8eea1",
        "metadata": {},
        "text": "4.1 Tasks We set up the Programmer\u2019s Assistant as a playground environment that participants could try out with a few sample programming problems. We created a tutorial to orient participants to the assis- tant, its capabilities, and how to interact with it. We also created four programming challenges focused on writing code, document- ing code, and writing tests for code. We designed these challenges to expose participants to a broad range of the assistant\u2019s capabilities. For each of these challenges, we explicitly did not evaluate metrics such as the participant\u2019s productivity, the quality of their solutions, or the time taken to produce them, as the focus of our study was to understand the utility of conversational interaction. We selected Python as the language used for the tutorial and challenges because of its general popularity [21] and the fact that it was well-supported by our underlying LLM [24].",
        "type": "NarrativeText"
    },
    {
        "element_id": "1c2473dc-821f-41cc-9271-527012774887",
        "metadata": {},
        "text": "Our participants had the following self-identified characteristics: \u2022 Job role: 19 Software Engineers, 12 Researcher/Scientists, 3 Software Architects, 2 Data Scientists, 1 Machine Learning Engineer, 1 Systems Test Engineer, 1 Business Analyst, 1 Manager, 1 Marketer, and 1 Consultant.",
        "type": "UncategorizedText"
    },
    {
        "element_id": "152ff587-dd6b-4cb5-90f7-2d6db3712bc0",
        "metadata": {},
        "text": "Gender: 21 Female, 19 Male, 1 Gender Variant / Non-con- forming, and 1 Preferred not to say.",
        "type": "ListItem"
    },
    {
        "element_id": "9409a0c5-8c0b-48e7-bd81-2941eaba9c1f",
        "metadata": {},
        "text": "4.1.1 Tutorial. All participants were first introduced to the Pro- grammer\u2019s Assistant through a tutorial. The tutorial walked each",
        "type": "NarrativeText"
    },
    {
        "element_id": "4d3d84d6-d3d9-4575-ba9d-4c8b9c0f9365",
        "metadata": {},
        "text": "Python Experience: 17 participants had 3+ years of Python experience, 11 had 1-3 years, 11 had less than 1 year, and 3 were not familiar with Python.",
        "type": "ListItem"
    },
    {
        "element_id": "931bef57-698b-4af0-8d25-4e640f864769",
        "metadata": {},
        "text": "11For historical context, we note that our study was completed before the public release of ChatGPT [60], which has subsequently demonstrated the application of conversational assistance for programming tasks [34].",
        "type": "NarrativeText"
    },
    {
        "element_id": "301426cd-c083-4d34-b537-0bcaac592623",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "519a12be-abc5-41ca-be6a-e8d618721dee",
        "metadata": {},
        "text": "498",
        "type": "UncategorizedText"
    },
    {
        "element_id": "dcc1c0ba-d8ac-4bae-ad06-2b77a59acab6",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "7122edbe-4c1a-4e87-a7f4-15c38e6d494d",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "6cb56885-33dd-4965-8955-3d8acafaed56",
        "metadata": {},
        "text": "Recency of Python Use: 29 participants had written Python code within the past month, 4 within the past year, 5 within the past 5 years, and 4 had not written Python code within the past 5 years.",
        "type": "ListItem"
    },
    {
        "element_id": "44e77950-b09e-48b4-b47c-3671033d0220",
        "metadata": {},
        "text": "events, including 968 conversational exchanges in the event logs; no survey data was excluded.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4524804d-6568-4b9a-b5fc-3585cceb8920",
        "metadata": {},
        "text": "Our primary analysis of this data is qualitative, as our partici- pants provided us with a rich source of interesting feedback and thought-provoking insights in their comments. Where applicable, we supplement this data with quantitative data from the survey and the event logs, as well as chat transcript data from the con- versation logs. In this way, we triangulate [47] across our three data sources, using the open-ended survey data as a foundation. When we quote participants, either from their qualitative survey responses or the conversational transcripts, we reproduce their words exactly as typed, including typos, misspellings, grammati- cal errors, capitalization, and potential trigger words, and we only make minor clarifying edits where needed, delineated by square brackets.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c2df78bd-3515-4380-839f-0814693a929b",
        "metadata": {},
        "text": "We provide full demographic information for individual partici-",
        "type": "NarrativeText"
    },
    {
        "element_id": "ffd3fb7e-f2b8-4284-92b2-dc0568021744",
        "metadata": {},
        "text": "pants in Appendix E.",
        "type": "Title"
    },
    {
        "element_id": "af8357cb-0bbd-46f4-afb2-6452d7a4d6a8",
        "metadata": {},
        "text": "4.3 Procedure Participants completed the study on their own time, independently and without moderation. Each participant was provided with a web link to a pre-study survey that described the nature of the study and the tasks that they would be expected to perform. They were then directed to the Programmer\u2019s Assistant to complete the tutorial and the four programming challenges. When participants indicated they were finished with the challenges12, they were directed to a final post-study survey. Complete sessions generally required about an hour of effort, though some participants spread their effort across a longer period of time and across multiple sessions. Participants were compensated for their time at a rate equivalent to US $15/hr.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f7ed5ae0-d459-490a-b368-dde7e1f08ed2",
        "metadata": {},
        "text": "In order to set the context for our analysis, we first describe how we used reflexive thematic analysis to analyze participants\u2019 responses to the open-ended survey questions. We then describe our analysis of the conversation logs and our development of a coding guide based on Conversation Analysis [76], and specifically, Moore and Arar\u2019s Natural Conversation Framework [50].",
        "type": "NarrativeText"
    },
    {
        "element_id": "2cb72572-4044-4997-b4b3-e5a133eacbf3",
        "metadata": {},
        "text": "4.4 Measures We collected a variety of data in our study from three sources:",
        "type": "NarrativeText"
    },
    {
        "element_id": "d187f87b-92f4-4812-b084-c40e7abba706",
        "metadata": {},
        "text": "5.1.1 Thematic Analysis of Qualitative Survey Responses. We con- ducted a reflexive thematic analysis to analyze the responses to our seven open-ended survey questions. We followed the process described by Braun and Clarke [16] in which researchers immerse themselves in the data, generate codes for material that seems interesting, and then iteratively group and refine codes through collaborative discussion in order to identify higher-level themes. Initially, four authors performed open-coding on the open-ended survey responses. Through discussion, these codes were grouped and consolidated into a single set, which were then re-applied to the data by two authors. After another round of discussion, these authors identified a set of 12 higher-level themes. Some themes had clear parallels to quantitative survey questions or event log data, and thus represented clear instances where we were able to trian- gulate across data sources. Other themes surprised us. We structure our presentation of the results based on these 12 themes, grouped into three different aspects of the user experience: expectations and experience, utility of conversational assistance, and patterns of interaction and mental models.",
        "type": "NarrativeText"
    },
    {
        "element_id": "69e8b2f6-6a6f-4cb5-9d7d-ab02ebbee386",
        "metadata": {},
        "text": "(1) Surveys. We employed three surveys in the study: a pre- study survey to collect demographic information, a pre-task survey to gauge expectations of the conversational user ex- perience, and a post-task survey to assess actual user expe- rience. We describe these survey questions in the relevant context of our results, and we provide a complete listing of all survey instruments in Appendix A.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c0271209-c493-43f1-a511-6a713f31b171",
        "metadata": {},
        "text": "(2) Event logs. The Programmer\u2019s Assistant was instrumented to collect data on participants\u2019 usage. The event logs pro- vided timestamped records of interaction events, including conversational exchanges, hiding/showing the assistant, use of the \u201ctry again\u201d and \u201cstart over\u201d features, and use of copy/- paste.",
        "type": "NarrativeText"
    },
    {
        "element_id": "1d49c95f-8328-4c17-8344-cc2223f05490",
        "metadata": {},
        "text": "(3) Conversation logs. From the event logs, we extracted con- versational transcripts between each participant and the Programmer\u2019s Assistant.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4824fe13-a33a-4d8b-b4a7-a99d17d2f293",
        "metadata": {},
        "text": "5 RESULTS 5.1 Data & Analysis We collected a wealth of data in our study: 126 survey responses from three surveys per participant, containing 296 written com- ments in open-ended survey questions, and 4,877 instances of 23 different types of UI events, including 1,699 conversational ex- changes13 in the event logs. We also compute, for each participant, counts or durations for 21 different metrics from the event logs.",
        "type": "NarrativeText"
    },
    {
        "element_id": "eba0439f-c295-4108-80e9-617c816f9e45",
        "metadata": {},
        "text": "5.1.2 Conversation Analysis via the Natural Conversation Frame- work. In order to understand the content and structure of the conversations that took place between our participants and the Programmer\u2019s Assistant, we turned to the Natural Conversation Framework [50] (NCF). We developed a codebook for the event logs, beginning with 21 different categories of utterances from the NCF. Nine NCF categories \u2013 Acknowledgment, Apology, Confirma- tion, Expression of Gratitude, Farewell, Greeting, Self-Identification, Welfare Check, and Welfare Report \u2013 appeared twice in our code- book to distinguish cases in which the utterance was made by the human participant vs. the assistant. Other NCF categories were split to provide nuanced detail about the interaction; for example, we distinguished three different kinds of NCF requests, depending upon whether they were stated as Requests for Action (e.g. \u201cWould you...\u201d), Commands of Action (e.g. \u201cWrite a function that...\u201d), or Expressions of Desire (e.g. \u201cI want...\u201d). We also added 18 additional",
        "type": "NarrativeText"
    },
    {
        "element_id": "55366a7a-286d-42fd-a29c-808c5068d8c3",
        "metadata": {},
        "text": "In our analysis, we deliberately exclude the portion of our data collected during the tutorial exercise. We exclude this data because that activity was guided by the tutorial instructions, not by our participants\u2019 own initiative. Thus, our final sample consists of 3,172",
        "type": "NarrativeText"
    },
    {
        "element_id": "4f8db637-9e16-4b38-a6f0-5dea6aa92715",
        "metadata": {},
        "text": "12We did not enforce that participants actually complete all of the challenges. Never- theless, all participants but one did submit solutions to all of the challenges. 13We refer to a participant\u2019s utterance, followed by the assistant\u2019s response, as a conversational exchange.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ddd73ce3-e588-4642-b8ad-5e654cfce731",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "8a9cbcd0-a140-484d-8fe9-8f71cc45b1c7",
        "metadata": {},
        "text": "499",
        "type": "UncategorizedText"
    },
    {
        "element_id": "fb99814c-0146-44d6-b8ca-3995a8b216fb",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "a8e2182f-bbbb-448f-b604-d4a06f2c41a7",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "5c2d72ba-8152-4c76-9b6e-a4eeb08df692",
        "metadata": {},
        "text": "Interlocutor Orientation Codes",
        "type": "Title"
    },
    {
        "element_id": "12b9fd7f-f61f-4d1c-bf0f-e8f3b50463ba",
        "metadata": {},
        "text": "Social",
        "type": "Title"
    },
    {
        "element_id": "a92fb27f-5f6c-449e-9f39-da6e30eaa374",
        "metadata": {},
        "text": "Acknowledgment, Apology, Criticism, Expression of Gratitude, Farewell, Greeting, Politeness, Praise, Self Identification, Small Talk, Welfare Check, Welfare Report Asks Question, Asserts Information, Capability Check, Command of Action, Expression of Desire, Identi- fies Error, Request for Action, Requests Elaboration, Requests Explanation Chat Context Required, Confirmation, Copy, Copy (Extraneous), Erroneous Input, Includes Selection, Includes Extraneous Selection, Missing Selection, Paste, Paste (Extraneous), Pasted Code in Chat, Spelling Error, Start Over, Try Again",
        "type": "UncategorizedText"
    },
    {
        "element_id": "85820c67-990a-4620-8868-e0d7b34f0885",
        "metadata": {},
        "text": "Human",
        "type": "Title"
    },
    {
        "element_id": "93f36ec4-9808-41fa-9669-c74660eff8e2",
        "metadata": {},
        "text": "Task",
        "type": "Title"
    },
    {
        "element_id": "9d0a8e40-8f58-4c6f-9c21-55b8f060dceb",
        "metadata": {},
        "text": "Meta / UI",
        "type": "Title"
    },
    {
        "element_id": "aa4b70b5-a222-43f5-a017-f4bb3d132fac",
        "metadata": {},
        "text": "Assistant",
        "type": "Title"
    },
    {
        "element_id": "ff7ca343-7239-4f5b-9d58-29d55989bacd",
        "metadata": {},
        "text": "Appears Fixated, Claims Ignorance, Didn\u2019t Understand, Grants Request (Complete), Grants Request (Incomplete), Offers Help, Provided Wrong Answer, Requests Details, Requests Paraphrase, Response Includes Code, Spews Garbage",
        "type": "UncategorizedText"
    },
    {
        "element_id": "274de1d9-8b61-47e5-9c99-9aee2769d087",
        "metadata": {},
        "text": "Table 1: Event log codebook. Our codebook contained 46 unique codes, applied separately to participant utterances (Human) and assistant responses (Assistant). Codes in bold were applied to both participant and assistant responses. Human codes were classified as demonstrating either a social or task orientation to the assistant.",
        "type": "NarrativeText"
    },
    {
        "element_id": "8f888d06-9463-478e-b358-6a93a72611fe",
        "metadata": {},
        "text": "by the amount of time the Programmer\u2019s Assistant window was in focus.",
        "type": "NarrativeText"
    },
    {
        "element_id": "aa419a0d-f68e-4e83-82de-e3234c395ed9",
        "metadata": {},
        "text": "codes to identify meta-information such as utterances that included code, utterances that referenced selected code, utterances that im- plicitly or explicitly referenced earlier portions of the conversation, or non-verbal UI activities such as copies, pastes, and invocations of \u201ctry again\u201d and \u201cstart over.\u201d Finally, we classified a subset of the human-applied codes based on whether they represented a par- ticipant\u2019s task or social orientation toward the assistant. We list our codes in Table 1, but note that not all of them ended up being relevant to our analysis.",
        "type": "NarrativeText"
    },
    {
        "element_id": "757d43b4-34df-47b8-a025-8d23205c67c7",
        "metadata": {},
        "text": "Participants made an average of 23.0 utterances (SD = 15.1 ut- terances) to the assistant. On average, 6.2 of their utterances (SD = 4.3 utterances) contained a code selection. The average latency per request14 was 6.7 seconds (SD = 3.1 seconds).",
        "type": "NarrativeText"
    },
    {
        "element_id": "17108da5-c5e9-4521-b5a2-b4fb4af668c6",
        "metadata": {},
        "text": "We saw a 66.3% rate of acceptance of generated code, where we considered code to be accepted if the participant performed a copy immediately after the code was generated. This acceptance rate is much higher than the 27% acceptance rate reported for Copilot [109]. We believe one reason we observed a higher acceptance rate is because Copilot\u2019s completion suggestions are generated proactively, whereas the Programmer\u2019s Assistant\u2019s suggestions are generated upon request. When copying generated code from the assistant, participants most often copied the entirety of the generated code, and only in 5.8% of cases did they copy a smaller portion of it.",
        "type": "NarrativeText"
    },
    {
        "element_id": "529aa341-4304-44fb-8be8-010d2abe6ed6",
        "metadata": {},
        "text": "When coding conversational data, we applied individual codes at the level of each conversational utterance. We allowed multiple codes to be applied to each utterance to account for utterances that performed multiple functions (e.g. greeting and self-identification). In order to ensure consistency in how our codebook was applied, two authors coded a 10% sample of the 968 conversational ex- changes, achieving a satisfactory level of inter-rater reliability (Krip- pendorf\u2019s \ud835\udefc = 0.77, where agreement was conservatively defined as having all of the same codes applied to both utterances in a conversational exchange).",
        "type": "NarrativeText"
    },
    {
        "element_id": "296ad639-64cf-4124-a4c5-90e7cdb8b7f1",
        "metadata": {},
        "text": "5.2.2 User Experience Expectations & Changed Attitudes. Prior to running our study, we had reason to believe that participants would be skeptical of a conversational programming assistant. Before de- veloping the Programmer\u2019s Assistant, we showed potential users mockups of a program editor with an integrated chatbot feature. These prototypes elicited uniformly negative reactions. People told us about their frustrating experiences with conventional chatbots and raised doubts about the knowledge, capabilities, and value of a conversational programming assistant. This skepticism moti- vated us to develop the Programmer\u2019s Assistant in order to evaluate whether the conversational experience, as powered by a state-of- the-art code-fluent LLM, would be better than people had antici- pated. During pilot testing, we received feedback that the Program- mer\u2019s Assistant provided a much better conversational experience compared to testers\u2019 previous experiences with chatbots. Thus, in designing our study, we felt it important to first gauge participants\u2019 expectations of a conversational interaction around code, and then measure their experience after the fact.",
        "type": "NarrativeText"
    },
    {
        "element_id": "aecee624-528c-4a4a-bb3e-0ecce1757479",
        "metadata": {},
        "text": "5.2 Expectations and Experience Pilot testing of the Programmer\u2019s Assistant suggested that software engineers would be skeptical of a conversational programming assistant and its ability to provide useful assistance. Our study revealed that, for most participants, their actual experience after using the tool was better than they had anticipated. Participants were surprised at the quality of the assistant\u2019s responses and they appreciated how its integration with the code editor reduced the amount of context switching they needed to do in the UI. Some participants struggled with the code selection feature, although others appreciated the ability to ask questions related to selected code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c0634327-423e-4791-af33-349a2706623d",
        "metadata": {},
        "text": "5.2.1 Usage. All of our participants engaged with the Program- mer\u2019s Assistant while working on the challenges, despite there being no requirement to do so. Forty-one participants submitted solutions to all four challenges, and one participant, P14, only sub- mitted solutions for one of the four challenges. Participants spent an average of 68 minutes engaged with the assistant, as measured",
        "type": "NarrativeText"
    },
    {
        "element_id": "5ee2b204-88a1-46ce-962f-5340b9395a7b",
        "metadata": {},
        "text": "14This time includes additional time added by our proxy server to ensure our confor- mance to the API rate limitation.",
        "type": "NarrativeText"
    },
    {
        "element_id": "538b8fa9-f6b6-479d-bf42-c9c6cd377089",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "9525136a-0f46-4e5f-b45b-857796f6d6f2",
        "metadata": {},
        "text": "500",
        "type": "UncategorizedText"
    },
    {
        "element_id": "ad04bcf5-1795-4d90-8dfa-7e84997c9358",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "e78631a9-21ee-43dc-8e26-8288e830d0cd",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "4db66cb7-5009-4b34-a13c-bbb3fdd5a401",
        "metadata": {},
        "text": "all aspects that I could have imagined and more!\u201d P17 provided a more quantitative assessment: \u201cInitial expectations: 3 Actual: 9.5.\u201d P38 was emphatic in their evaluation: \u201cI was blown away how well it allowing me to structure how I want the code to look and work and just giving me the thing I asked for.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "fc4620b5-30bf-436f-9596-34e0f9ad25ea",
        "metadata": {},
        "text": "We developed a short inventory of six scale items to measure user experience of code work15. The scale was administered twice: once before participants were exposed to the Programmer\u2019s Assistant (but after they had been briefed that they would interact with an AI chatbot), and once after completing the programming challenges. The items were presented with the appropriate tense: Do you expect (Did you find that) the Programmer\u2019s Assistant: (a) will be (was) easy to use; (b) will understand (understood) your requests; (c) will provide (provided) high quality responses; (d) will help (helped) you to write better code; (e) will help (helped) you to write code more quickly; (f) will be (was) enjoyable to use. Each item was rated on a 4-point scale of extent: Not at all (1), A little (2), Somewhat (3), A great deal (4).",
        "type": "NarrativeText"
    },
    {
        "element_id": "37f409c8-2bcd-455c-ad12-f67236e51530",
        "metadata": {},
        "text": "Many participants described a sense of surprise in their experi- ences. P9 was surprised by how well it understood their requests: \u201cI was surprised at how well the Programmer Assistant was able to understand my requests and generate good code/documentation/tests. It understood major concepts and was able to explain it to me in a clear way, and it was also able to understand and write functional code. It even was able to help me review my answer. I was also surprised at how well it could understand the context of what I was asking in follow-up questions when I did not specify exactly what I was talking about, but rather referencing our prior conversation (such as, \u2018what does that mean\u2019).\u201d (P9)",
        "type": "NarrativeText"
    },
    {
        "element_id": "a5dd6953-53a2-4459-9577-5fadf112dc0a",
        "metadata": {},
        "text": "A factor analysis revealed the items on this scale measured a single construct, which we identify as user experience (Cronbach\u2019s \ud835\udefc = 0.87). Thus, we computed two scores of user experience (UX) for each participant: a pre-task UX score computed as the average of their six pre-task expectation scale responses, and a post-task UX score computed as the average of their six post-task experience scale responses.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0839a9c9-e7d5-413e-a397-6010463601ff",
        "metadata": {},
        "text": "Similarly, P6 was surprised that they liked the conversational",
        "type": "NarrativeText"
    },
    {
        "element_id": "a3363939-30b9-4bc8-a109-fef1a9a35d43",
        "metadata": {},
        "text": "interaction when they expected that they wouldn\u2019t:",
        "type": "NarrativeText"
    },
    {
        "element_id": "237d2a80-3395-4826-8944-aa78547b10b5",
        "metadata": {},
        "text": "We found that participants had lower initial expectations for their experience with a conversational programming assistant (pre- task UX M (SD) = 3.0 (0.62) of 4) than their experience actually was (post-task UX M (SD) = 3.6 (0.32) of 4). A paired sample t-test shows that this difference was significant, \ud835\udc61 (41) = 5.94, \ud835\udc5d < .001, Cohen\u2019s \ud835\udc51 = 0.92 (large). Measured another way, 32 participants (76.2%) had post-task UX ratings that were higher than their pre- task expectations, demonstrating a significant shift in attitudes toward conversational programming assistance.",
        "type": "NarrativeText"
    },
    {
        "element_id": "cf987919-5061-448b-9209-61859c9ccad8",
        "metadata": {},
        "text": "\u201cI though[t] I wouldn\u2019t like the chatbot interaction and that I would prefer something like the tool I\u2019ve seen in those demos [of Copilot]. But surprisingly, after using the chatbot (and seeing the results: easy to use, it un- derstands well, I felt it like a partner) I like this kind of help.\u201d (P6)",
        "type": "NarrativeText"
    },
    {
        "element_id": "3f86f4c0-9bbb-413c-963c-9304c43b9dd7",
        "metadata": {},
        "text": "5.2.3 Quality of Assistant\u2019s Responses. In order to gauge the quality of responses produced by the Programmer\u2019s Assistant, we examined the 910 task-oriented requests made by participants in the study. For the vast majority (80.2%), the assistant produced a correct re- sponse (Grants Request (Complete)); in other cases, the assistant\u2019s response was incorrect (9.6%; Provided Wrong Answer), correct but incomplete (4.4%; Grants Request (Incomplete)), or the assistant didn\u2019t understand (3.4%; Didn\u2019t Understand), claimed ignorance of the subject (1.5%; Claims Ignorance), or produced another type of response (0.9%; Appears Fixated, Spews Garbage).",
        "type": "NarrativeText"
    },
    {
        "element_id": "fb66a53f-d868-4c00-b772-745b2e2e05d1",
        "metadata": {},
        "text": "However, the UX ratings alone fail to capture participants\u2019 nu- anced expectations of the assistant and the reasons for their shifted attitudes after using it. Participants expressed a variety of expecta- tions of the assistant before using it, including that it would be easy to use (P30) and produce correct responses (P30), understand the problem and what is being asked of it (P8, P9, P11), not interfere with their flow state (P5), produce imperfect or questionable out- puts (P6, P21), improve with feedback (P31), provide generic and unhelpful answers (P17) or only answer basic questions (P40), and produce responses quickly (P40).",
        "type": "NarrativeText"
    },
    {
        "element_id": "8f47afc3-97b7-4995-85f1-69f0a562566f",
        "metadata": {},
        "text": "Participants also reported experiencing this variability in the quality of the assistant\u2019s responses. Some participants described how the assistant provided \u201cdetailed answers\u201d (P17) and \u201chigh qual- ity outputs\u201d (P18) that were \u201csurprisingly good\u201d (P2). P6 felt it was \u201cincredible to see the quality of the responses,\u201d and P3 even explored the assistant\u2019s capabilities outside the scope of the challenges and found that it could handle those as well:",
        "type": "NarrativeText"
    },
    {
        "element_id": "7fff87eb-0652-4f47-af46-93fd396582d0",
        "metadata": {},
        "text": "P17 expected \u201cto be frustrated very quickly and that what I\u2019d think would be relatively common questions would be responded to with generic, unhelpful answers.\u201d P6 explained, \u201cI didn\u2019t have very good experiences with chatbots. I think I\u2019ll need to spend more time in reviewing and fixing the suggestions than in writing the code myself from scratch.\u201d P11 had a more balanced view, that \u201cIt\u2019ll do some tasks really well, but others will not be as reliable.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "2be7c004-9fa8-44a0-acac-4859cbd13903",
        "metadata": {},
        "text": "\u201cIt was surprising the quality of the code and the ability to answer all my questions correctly. Although I think the challenges may be biased towards what the Assistant is able to do, it was a great experience because I asked many other things and it was able to answer correctly.\u201d (P3)",
        "type": "NarrativeText"
    },
    {
        "element_id": "96aeb91f-9e36-4f3b-ab99-94e8fadd7c4e",
        "metadata": {},
        "text": "After interacting with the Programmer\u2019s Assistant, many par- ticipants commented on how the experience was better than they anticipated, because it \u201cseemed to be able to handle complex issues\u201d (P10) and \u201cwas a great help\u201d (P8). P20 felt it was \u201cincredible!\u201d P6 and P17, who were both initially skeptical, reported having a positive experience. For P6, \u201cIt absolutely exceeded all my expectations, in",
        "type": "NarrativeText"
    },
    {
        "element_id": "44087e33-b604-4cd9-a35b-eae3c91f8b4a",
        "metadata": {},
        "text": "Of course, the Programmer\u2019s Assistant wasn\u2019t perfect, and some participants did run into issues. For P35, \u201cThe documentation gener- ation did not perform very well.\u201d P16 questioned the accuracy of the knowledge encoded in the model: \u201cDoes the model need to be up- dated? It said latest python version is 3.7 but google says it\u2019s 3.10.\u201d In some instances, participants needed to ask their question multiple",
        "type": "NarrativeText"
    },
    {
        "element_id": "d7dd2f4c-a4a8-417a-bc31-069e6a684b2e",
        "metadata": {},
        "text": "15Our scale items were modeled from scales published in Weisz et al. [103, Table 9 \u2013 AI Support] that measured constructs including ease of use (item 3), response quality (item 1), the production of higher-quality code (item 5), and the ability to write code more rapidly (item 4). We added additional items to cover the constructs of request understanding and enjoyment, and we cast all items on a 4-point scale of extent.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a8bb0a7c-ccf2-49bc-8b0f-2d276cd9d6b4",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "fe7726d9-696f-4ca4-ab17-bc1d0475139e",
        "metadata": {},
        "text": "501",
        "type": "UncategorizedText"
    },
    {
        "element_id": "a30e9ddd-80b5-4864-973f-8a9a2d844b3b",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "dde40631-b904-40d1-91f7-16e2311f25ad",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "30e7009b-da02-46fc-adcb-63dbf6e431d3",
        "metadata": {},
        "text": "times to get a good response: \u201cyou need to ask many times if you want to get an answer and also a detailed explanation\u201d (P3). P27 felt, \u201cit was annoying when I asked it to try again and it would give me the same response.\u201d P22 struggled because, \u201cIt didn\u2019t seem to handle multiple sentences well.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "cd2777b0-8d86-4996-b6c6-46105d77abcb",
        "metadata": {},
        "text": "noticeable or salient: \u201cThe \u2018try again\u2019 button is not so reachable, often times I forgot it exists\u201d (P23). By contrast, at least one participant was successful with these features:",
        "type": "NarrativeText"
    },
    {
        "element_id": "5a9ab835-32c0-4ef3-87f5-98764c2b3b5a",
        "metadata": {},
        "text": "\u201cat some point it had issue with challenge 3 and I had to start over. Just asking \u2018try again\u2019 was not enough and I was getting always the same (wrong and not related) answer. starting again solved the issue!\u201d (P20)",
        "type": "NarrativeText"
    },
    {
        "element_id": "60d73a80-80ad-483b-9c20-d6d3892e0a6e",
        "metadata": {},
        "text": "P28 perhaps offered the most scathing criticism, that, \u201cIt makes mistakes often enough to be not very practical.\u201d However, despite the production of poorer-quality responses, other participants felt that the assistant was still helpful. P36 reported that, \u201cOnly minor tweaks were normally needed to correct any issues.\u201d Similarly, P38 described how the assistant wasn\u2019t able to completely solve their problem, but provided a useful start:",
        "type": "NarrativeText"
    },
    {
        "element_id": "ad9351eb-20d6-4452-ae21-5e5e04dfcb7c",
        "metadata": {},
        "text": "5.3 Utility of Conversational Assistance Our next set of themes concerns the utility provided by conversa- tional programming assistance. Participants felt the assistant was highly valuable and desired to use it in their own work. They felt it would be most helpful for smaller or narrowly-scoped tasks, but able to provide a wide variety of types of assistance. The fact that the interaction model was conversational and grounded in code were valuable aspects, as was the ability for the assistant to bolster users\u2019 learning about programming topics through that interac- tion. Participants did question whether they could trust and rely upon the assistant\u2019s responses, echoing a similar theme discussed in Weisz et al. [102].",
        "type": "NarrativeText"
    },
    {
        "element_id": "d2e8dd19-e035-4c67-86c8-d65c4cf97e0f",
        "metadata": {},
        "text": "\u201cThere was only one hickup I noticed where when I asked it to memoize fibonacci it couldn\u2019t, but it dropped the building blocks on my lap for me to finish so that was fine, that was like minutes of effort on my part.\u201d (P38)",
        "type": "NarrativeText"
    },
    {
        "element_id": "2fafda6f-7fc1-46e3-b831-5396b6bc3843",
        "metadata": {},
        "text": "5.2.4 UI Design & Affordances. Participants made many comments on our specific UI design and the affordances provided (or not provided) in our chat-augmented editor. Overall, the integration between the chat pane and the code editor was \u201cvery good\u201d (P23), with a \u201cnice interface between the code pane and the assistant pane\u201d (P17) that \u201cmakes it really convenient\u201d (P35).",
        "type": "NarrativeText"
    },
    {
        "element_id": "a5f88c4c-1647-4c7a-815a-398d5beeb689",
        "metadata": {},
        "text": "5.3.1 Value & Appropriate Tasks. Participants rated the value of the Programmer\u2019s Assistant highly (M (SD) = 8.6 (1.4) of 10). Many participants asked questions such as, \u201cCan I have it in my editor please?\u201d (P15), or made comments that, \u201cI would enjoy using it in the future\u201d (P36), \u201cI would love to be able to... have access to it for my coding\u201d (P37), and \u201cI\u2019d love to use this tool as part of my usual programming workflow if I could!\u201d (P39). Some of the reasons why participants found it valuable are because it \u201chelp[s] me remember how to do things in certain languages that normally I would just Google\u201d (P9) and \u201cIt helps me to avoid silly syntax errors and can when I cannot remember exact function/method names and required arguments\u201d (P40). We did not observe any differences in value ratings based on participants\u2019 familiarity with or recency of using Python.",
        "type": "NarrativeText"
    },
    {
        "element_id": "6a46fba3-d495-4748-bc5b-34d3987228eb",
        "metadata": {},
        "text": "Prior research by Brandt et al. [15] has shown how keeping developers focused in their IDE improves productivity, and our participants expressed similar sentiments. P40 remarked, \u201cIt allows me to stay in one browser window/tab!\u201d and P12 hinted at how the interface might preserve their flow state by \u201cprevent[ing] me from getting distracted when looking into an issue in another tab.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "4f177ff3-2db7-4b07-9de3-261a3edffd0a",
        "metadata": {},
        "text": "Some aspects of our user interface were confusing to participants, such as the mechanism for selecting code to be included in the conversational context. P7 remarked, \u201cIt\u2019s was a little confusing doing the selection part for it to tell me what a function does, but... it gave me code that was insanely easy to copy and paste.\u201d Other participants appreciated the code selection mechanism, such as P11: \u201cI enjoyed the code selection feature, and found that very easy to use.\u201d In the event logs, we identified 20 instances in which a participant unintentionally included selected code in the conversation when it wasn\u2019t needed (Includes Extraneous Selection), 12 instances in which a code selection was omitted when it was needed to provide context for the question (Missing Selection), and 16 instances in which a participant copy/pasted code directly into the chat rather than selecting it in the editor (Pasted Code in Chat). Although these cases represent a small fraction of the 227 instances in which a code selection was required and included in the conversation (Includes Selection), their presence does indicate that more attention is needed to the interaction design of code selection.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4a11e414-3a6c-4bc4-82ef-0bd4d99c23c7",
        "metadata": {},
        "text": "Participants described a wide variety of tasks for which they felt the assistant would be useful. These tasks included \u201cordinary\u201d (P23), \u201csimpler\u201d (P2), and \u201csmall, repetitive\u201d (P4) tasks such as \u201cquick lookups\u201d (P25) for \u201cshort chunks of code\u201d (P11) or for \u201cnarrowed questions\u201d (P26). Participants also felt the assistant was useful for \u201csmall containable novel algorithms\u201d (P38) and \u201clittle coding problems\u201d (P4).",
        "type": "NarrativeText"
    },
    {
        "element_id": "7dabc926-b3ff-4825-9d39-cc93c64052e4",
        "metadata": {},
        "text": "Several kinds of task assistance were reported as being valuable, such as explaining code (P31), implementing business logic in a UI (P38), understanding what code does (P19, P37), and recalling language syntax, method names, and arguments (P12, P15, P20, P40, P42). P27 felt that the assistant was \u201cMore helpful when recognizing a specific well known algorithm but not things you make yourself.\u201d Participants also made recommendations for how to increase the value of the Programmer\u2019s Assistant. P38 suggested, \u201cWhat would blow me away though is if it\u2019s able to help with what I do most often which is to integrate, refactor and iterate on an existing system.\u201d P16, P26, and P38 all desired more information on the data sources used to produce the assistant\u2019s responses. P9 requested to \u201cHave the Programmer\u2019s Assistant examine your code and make proactive suggestions for improving it in the chat.\u201d P36 requested the same,",
        "type": "NarrativeText"
    },
    {
        "element_id": "dbe26b40-e51a-4e99-8626-cf16ac744a9b",
        "metadata": {},
        "text": "Another issue regarded the awareness of the \u201ctry again\u201d and \u201cstart over\u201d features. The \u201ctry again\u201d feature was only used by 14 participants, who used it a total of 63 times over the course of the study. Some participants used it specifically when they got an answer which they saw as clearly wrong, while others used it to get a variety of possible answers before proceeding. The \u201cstart over\u201d feature was used even less, by 5 participants who used it a total of 6 times. Despite our effort to surface these conversational features in the UI via shortcut buttons, they may not have been sufficiently",
        "type": "NarrativeText"
    },
    {
        "element_id": "0c19dd8a-0b59-45cb-8371-1bd85eac5d16",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "45a8d408-51f2-4916-9618-091a14e1baa2",
        "metadata": {},
        "text": "502",
        "type": "UncategorizedText"
    },
    {
        "element_id": "695fb65f-9737-40d3-aeef-e713695528f9",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "44af69d4-0fc6-4c6e-ad2a-bc8d47223869",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "3fcd7dc0-bc82-4e20-90b7-7882b24ceb52",
        "metadata": {},
        "text": "but cautioned that, \u201cCare would need to be taken to avoid becoming an annoyance or disrupting the flow of a coding session.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "438a1fdf-0142-48ce-96d8-1162ca458d50",
        "metadata": {},
        "text": "Despite these individual differences in interaction preferences, P39 envisioned that both interaction styles could be supported in the tool:",
        "type": "NarrativeText"
    },
    {
        "element_id": "2337ec31-be9c-4227-bd09-5e52ecd7d242",
        "metadata": {},
        "text": "In the post-task survey, we probed participants on how certain changes to the Programmer\u2019s Assistant would either decrease, in- crease, or result in no change to its value. Over 75% of participants felt that the assistant would be more valuable if it operated in a proactive manner, either by making improvement suggestions in the chat or as comments directly in the code. Similarly, 78.6% of participants felt that having more buttons in the UI for common features such as explaining or documenting code would make the tool more valuable.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d2681903-a276-4151-8570-7c40ba96d546",
        "metadata": {},
        "text": "\u201cI think both options should exist: people should be able to input their queries like a search bar AND also give their question as if in conversation.\u201d (P39)",
        "type": "NarrativeText"
    },
    {
        "element_id": "8cc677bc-a36d-44a8-a238-a37ce3fa02e9",
        "metadata": {},
        "text": "5.3.3 Learning Effects. One specific benefit of the Programmer\u2019s Assistant identified by participants is its ability to help people improve their programming skills and reinforce knowledge gaps. For example, it can help users \u201cremember how to do things in certain languages... such as, when I am using a language I haven\u2019t used in a while\u201d (P9). The assistant can also serve as an memory aid, such as when \u201cI use a lot of libraries that I don\u2019t always remember all of the functions\u201d (P15). Similarly, P31 said, \u201cNo matter how good you\u2019re as a developer, you can\u2019t (humanly) remember all the API of hundreds of libs or new languages... I\u2019d learn new dev lang and new lib/frameworks faster.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "959651cf-6ae4-4981-918a-da44b0fdd1a7",
        "metadata": {},
        "text": "5.3.2 Conversational Interactions Grounded in Code. One of the challenges in interpreting participants\u2019 comments about the utility of the Programmer\u2019s Assistant was in disentangling the extent to which value was derived from the quality of the underlying model versus the integration of conversation in a code context. Indeed, participants felt that the chat interaction was valuable: 69.0% of participants felt that eliminating the conversational interaction and making the assistant behave more like web search would de- crease its value. Further, our analysis of the conversation transcripts revealed that 42% of the 910 task-oriented utterances from partic- ipants required historical conversational context (Chat Context Required) in order to be correctly interpreted. Thus, we observe that behaviorally, participants did rely on conversational context in their interactions.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ec2e2b97-f6c8-496a-8d37-6af590494cde",
        "metadata": {},
        "text": "P39 felt the assistant \u201cis perfect for programmers of all levels,\u201d and",
        "type": "NarrativeText"
    },
    {
        "element_id": "a3503f38-bb16-4092-935c-f88aae4e4a41",
        "metadata": {},
        "text": "P1 felt it could help them rapidly improve their Python skills:",
        "type": "NarrativeText"
    },
    {
        "element_id": "229ba576-7b3f-4d68-b8c0-319c0591a62f",
        "metadata": {},
        "text": "\u201cI have wanted to learn python... The main concern how much time spent learning is needed before I could actually get some value out of learning python. I have a feeling this would cut that time down from weeks to a day or so.\u201d (P1)",
        "type": "NarrativeText"
    },
    {
        "element_id": "a0852fe3-e791-4180-a3f8-09b67dd10666",
        "metadata": {},
        "text": "In the post-task survey, 83% of participants rated the importance of the ability to ask follow-up questions as being \u201csomewhat\u201d or \u201ca great deal.\u201d Several participants specifically commented on the value of this conversational context. P39 remarked, \u201cI absolutely loved how you can straight up ask follow-up questions to the Programmers\u2019 Assistant without having to reiterate the original topic/question.\u201d P15 expressed a similar sentiment, saying, \u201cI think the conversational context was someone helpful, just in communicating that it\u2019s a running conversation where my context is remembered.\u201d P9 provided a similar analysis:",
        "type": "NarrativeText"
    },
    {
        "element_id": "379eb166-93a0-4efe-981f-f0b8f0a6556d",
        "metadata": {},
        "text": "P39 also identified the fact that, because the interactions with the assistant are conversational, it forces people to learn how to communicate to others about their code:",
        "type": "NarrativeText"
    },
    {
        "element_id": "e926418e-35be-411b-8a29-efb8f9015033",
        "metadata": {},
        "text": "\u201cThe conversation aspect promotes proper communi- cation, which would really stand to benefit budding programmers if they want to learn how to explain con- cepts more fluently in the future to their colleagues.\u201d (P39)",
        "type": "NarrativeText"
    },
    {
        "element_id": "228e6bb2-9e86-4ea9-a4ea-dd3f12ef6f0f",
        "metadata": {},
        "text": "Conversely, P36 suggested that over-reliance on programming",
        "type": "NarrativeText"
    },
    {
        "element_id": "b226a3a6-e3b3-4c91-b621-5d17e7bb9e63",
        "metadata": {},
        "text": "assistance might have a detrimental effect to one\u2019s learning: \u201cIt\u2019s definitely a huge time saver, but over-reliance on it may cause new developers to skip learning the reference material themselves and discovering new things and sparking new ideas.\u201d (P36)",
        "type": "NarrativeText"
    },
    {
        "element_id": "b643d1a9-f504-49fc-b2f2-fe078a04bc90",
        "metadata": {},
        "text": "\u201cThis tool was so helpful at answering questions I had about the code in the context of the code I am working on... I was also impressed with how well it was able to remember the context of our conversation, especially when I asked vague follow-up questions.\u201d (P9)",
        "type": "NarrativeText"
    },
    {
        "element_id": "de2ad00f-8385-4458-9e73-082588669796",
        "metadata": {},
        "text": "5.3.4 Trust. Many participants raised questions about whether they could trust the responses provided by the Programmer\u2019s Assis- tant. P21 asked this question most directly: \u201cwill the code be correct, safe, efficient?\u201d Other participants raised similar questions, such as, \u201cI\u2019m wondering how it validates it\u2019s answers, if it can be trusted to always give a working answer\u201d (P10), and \u201cSometimes lack of source and context may raise doubts in the mind of the programmer\u201d (P16). These issues of trust were exacerbated by the fact that the Pro- grammer\u2019s Assistant did not allow participants to actually run their code. Because of this limitation, participants had to rely on their own knowledge to judge the correctness of the assistant\u2019s responses. P19 asserted, \u201cThere is no way to evaluate if the Programmer\u2019s as- sistant is giving you the right advise or not other than your own knowledge,\u201d and P9 concurred: \u201cI had to trust that it was correct (and use my own prior knowledge).\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "14e8bf7b-4e25-4e5b-b020-dfce3ebfaff6",
        "metadata": {},
        "text": "In addition, some participants identified how a conversational interaction grounded in code was useful, \u201cbecause I think to \u2018un- derstand\u2019 the dev context could be VERY important\u201d (P31). In fact, 24.9% of task-oriented utterances included a relevant code selection (Includes Selection), showing that participants valued this ability. Contrasting with these participants, P18 felt that interacting with the assistant conversationally was tedious, and they employed a more direct approach:",
        "type": "NarrativeText"
    },
    {
        "element_id": "12124e1f-d860-48a5-a5b4-e31c8a77c58f",
        "metadata": {},
        "text": "\u201cI really like the PA. But, I didn\u2019t converse with it like a chat bot. I often told it what to do (\u2018Document this code.\u2019) as opposed to asking it what to do (\u2018How do I document this code?\u2019). Talking to it the way that was suggested in the tutorial seemed overly verbose/tedious.\u201d (P18)",
        "type": "NarrativeText"
    },
    {
        "element_id": "acef3d94-4680-422d-a674-f9a24da2eca6",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "b49fd791-8912-461c-9184-c003d46ce419",
        "metadata": {},
        "text": "503",
        "type": "UncategorizedText"
    },
    {
        "element_id": "12f5c0ab-4ac6-4885-b0e9-71649868bc48",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "e0e31c2f-1115-4b25-a197-53e3cbddc5ec",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "3f1ddfa6-42a7-4ba2-8b97-705f476bcac6",
        "metadata": {},
        "text": "quality of the unit test (lines 31& 37). Thus, we observe that the assistant is capable of producing explanations and justifications when asked.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0d171196-d4fa-47d9-8f54-e651a1cb0444",
        "metadata": {},
        "text": "P18 described the potential consequences of allowing the assis-",
        "type": "NarrativeText"
    },
    {
        "element_id": "784be2c2-a062-49da-ba9c-badcd159e8c0",
        "metadata": {},
        "text": "tant to write code for them:",
        "type": "NarrativeText"
    },
    {
        "element_id": "1352adec-3759-4796-bc29-2415a58fdffa",
        "metadata": {},
        "text": "\u201cThe only thing that made me nervous was that it could have introduced a bug that wasn\u2019t immediately appar- ent. And given I didn\u2019t write the code, I could have easily glossed over a mistake when reviewing it. Especially if it is also the one writing the test cases.\u201d (P18)",
        "type": "NarrativeText"
    },
    {
        "element_id": "6a55c0f1-c157-4c1d-81ae-f3fce129ae4f",
        "metadata": {},
        "text": "5.4 Patterns of Interaction and Mental Models Participants interacted with the assistant in a variety of ways with two main patterns of usage standing out: (1) invoking the assis- tant to solve the entire programming challenge, and (2) breaking the challenge down into a set of smaller tasks and invoking the assistant\u2019s help for each. There were no clear differences in how participants with differing Python experience approached the tasks. Participants\u2019 mental models of the assistant also varied. Although participants strongly saw the role of the assistant as being a tool, their behaviors revealed that in many cases, they actually treated it as a social agent. In addition, participants ascribed various mental capacities to the assistant, such as having the ability to understand, compute, and learn.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7bacf694-c452-42a7-b0bc-cbd7df4cbd5e",
        "metadata": {},
        "text": "Despite our efforts to make the Programmer\u2019s Assistant respond in non-authoritative ways, we did observe participants sometimes uncritically accept generated results that were clearly wrong or incomplete. Thus, we did find behavioral evidence for over-reliance.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f0e376ea-5ec0-4509-8474-be0850bbf133",
        "metadata": {},
        "text": "Listing 2: Building trust through explanations and justifica- tions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47",
        "type": "UncategorizedText"
    },
    {
        "element_id": "d9bbfa49-6a6d-4004-8f36-afe2ae625a16",
        "metadata": {},
        "text": "what is a unit test ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "fa272d06-20fe-4426-8136-c3a51311a906",
        "metadata": {},
        "text": "P9 :",
        "type": "UncategorizedText"
    },
    {
        "element_id": "a41059c6-46ec-4ae6-9c5a-fdaec8010436",
        "metadata": {},
        "text": "Socrates : A unit test is a test of a single function It is typically written by the",
        "type": "NarrativeText"
    },
    {
        "element_id": "6705f171-4d3a-49f5-b490-f38e787b1a1c",
        "metadata": {},
        "text": "or method . programmer who wrote the code .",
        "type": "NarrativeText"
    },
    {
        "element_id": "d7a68516-96bd-4c7d-b908-9ca9e965aaae",
        "metadata": {},
        "text": "Participants felt the assistant changed the nature of their work process. For some participants, it enabled them to focus on the higher-level aspects of development because the assistant handled lower-level details or provided partial solutions for them to build upon. Many participants felt the assistant sped up their work and helped them remain focused on their tasks.",
        "type": "NarrativeText"
    },
    {
        "element_id": "b2693227-8fb7-464d-973e-a7517e6bbae3",
        "metadata": {},
        "text": "P9 :",
        "type": "UncategorizedText"
    },
    {
        "element_id": "492c8dcb-dc40-4e4c-a34d-5e6521d9f88d",
        "metadata": {},
        "text": "def euclid(a, b): while b != 0:",
        "type": "Title"
    },
    {
        "element_id": "7c08f2ee-6a22-4722-9729-c697118a92b5",
        "metadata": {},
        "text": "(a, b) = (b, a % b)",
        "type": "UncategorizedText"
    },
    {
        "element_id": "cc6d0ad5-f458-4602-bdbc-2039f509096d",
        "metadata": {},
        "text": "return a",
        "type": "NarrativeText"
    },
    {
        "element_id": "300b76b4-8fec-4c88-a5b8-86495a4d3fd5",
        "metadata": {},
        "text": "how would I write a unit test for this code ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "5b111a1a-0263-4bdf-a090-a97ecc0edd4c",
        "metadata": {},
        "text": "Finally, participants drew comparisons between the Program- mer\u2019s Assistant with other forms of programming support such as Copilot and web search. They felt that the conversational style of interaction enabled them to discover new, emergent behaviors from the model that were unavailable from Copilot\u2019s focus on code autocompletion. They also felt that the examples provided by the assistant were more readily usable within their own code compared to browsing for answers within search results, speeding up the coding process. However, some participants advocated for a bal- anced approach to the design of programming assistance tools by incorporating multiple modes of interaction rather than fixating on a single one.",
        "type": "NarrativeText"
    },
    {
        "element_id": "81568ed4-6653-438c-9071-645445b80562",
        "metadata": {},
        "text": "[...]",
        "type": "UncategorizedText"
    },
    {
        "element_id": "03b3e085-a6fa-4d65-9c4f-7803fc42832c",
        "metadata": {},
        "text": "Socrates : I think you would do something like this :",
        "type": "NarrativeText"
    },
    {
        "element_id": "50143012-4211-4a6b-91dc-0fbba0d43019",
        "metadata": {},
        "text": "def test_euclid():",
        "type": "Title"
    },
    {
        "element_id": "ef8d0331-1c54-4b03-8d9e-c46c81596451",
        "metadata": {},
        "text": "assert euclid(2, 4) == 2 assert euclid(6, 9) == 3 assert euclid(17, 12) == 1 assert euclid(4, 4) == 4",
        "type": "NarrativeText"
    },
    {
        "element_id": "ad8372d3-1249-48b3-93d5-f357f3cfb51f",
        "metadata": {},
        "text": "P9 :",
        "type": "UncategorizedText"
    },
    {
        "element_id": "b5520cc3-88f9-45a6-b831-df381d46e241",
        "metadata": {},
        "text": "what is a euclid function",
        "type": "NarrativeText"
    },
    {
        "element_id": "288a6c45-fe5b-47d1-8c1c-fcabcad892aa",
        "metadata": {},
        "text": "Socrates : The euclid function is a function that",
        "type": "NarrativeText"
    },
    {
        "element_id": "5551a63e-3ddf-465c-9b30-b7d163e6ab29",
        "metadata": {},
        "text": "computes the greatest common divisor of two numbers .",
        "type": "NarrativeText"
    },
    {
        "element_id": "4f8cf83c-e276-4244-bbe1-ae559906f55e",
        "metadata": {},
        "text": "is this a good unit test for a euclid function",
        "type": "NarrativeText"
    },
    {
        "element_id": "57aa35ef-871f-4d26-9545-fc9c8496abaf",
        "metadata": {},
        "text": "P9 :",
        "type": "UncategorizedText"
    },
    {
        "element_id": "ff6a9700-b6c7-4171-a7c1-9f1908acfed5",
        "metadata": {},
        "text": "Interaction Styles and Assistant Role. We observed that par- 5.4.1 ticipants interacted with the Programmer\u2019s Assistant in strikingly different ways. Some participants would present the entire chal- lenge description to the assistant and then work with the results it produced. Other participants approached the programming chal- lenges in a piecemeal fashion, breaking them apart into a set of smaller tasks, then invoking the assistant to aid with each one.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7a329266-a2a4-47c6-bd12-0e1a453ad351",
        "metadata": {},
        "text": "Socrates : I believe that it is a good unit test for",
        "type": "NarrativeText"
    },
    {
        "element_id": "71ea212d-5d01-414c-89d6-8b39eb2eedc7",
        "metadata": {},
        "text": "a euclid function .",
        "type": "Title"
    },
    {
        "element_id": "24111f7c-06df-44b2-9cf7-76cb7e589275",
        "metadata": {},
        "text": "why",
        "type": "Title"
    },
    {
        "element_id": "220a00b0-b465-41c1-8508-dd611b1fe497",
        "metadata": {},
        "text": "P9 :",
        "type": "UncategorizedText"
    },
    {
        "element_id": "09ac4179-0d0b-4f79-ae0a-dd0687dda691",
        "metadata": {},
        "text": "Socrates : It seems to me that it tests the edge cases of a and b being equal , a being greater than b , and b being greater than a.",
        "type": "NarrativeText"
    },
    {
        "element_id": "766014f1-4c71-417d-95a7-faecd284c1b1",
        "metadata": {},
        "text": "Experience with Python was not a determinant of how partici- pants approached the programming challenges, but it did seem to impact how participants interacted with the assistant. Less experi- enced participants tended to ask the assistant basic questions such as, \u201cWhat is a unit test\u201d (P29, not familiar with Python) and \u201chow do I document a function?\u201d (P27, < 1 year of experience). More expe- rienced participants made detailed requests about specific Python libraries or algorithms, such as, \u201cgiven a pandas dataframe with two columns \u2018Date\u2019 and \u2018Sales\u2019 please use matplotlib to draw me a scatterplot\u201d (P38, 3+ years of experience) and \u201cimplement a runge- kutta algorithm for solving an ODE with adaptive time steps\u201d (P37, 3+ years of experience).",
        "type": "NarrativeText"
    },
    {
        "element_id": "073f532a-18b6-48a4-b195-d2ec8683c702",
        "metadata": {},
        "text": "[...]",
        "type": "UncategorizedText"
    },
    {
        "element_id": "bfc1279f-aac9-4c8e-a607-92253cc2f522",
        "metadata": {},
        "text": "P9 :",
        "type": "UncategorizedText"
    },
    {
        "element_id": "d6d875ed-9b74-4e38-8f16-6b7a247c8dde",
        "metadata": {},
        "text": "thanks Socrates this was helpful",
        "type": "NarrativeText"
    },
    {
        "element_id": "ef31c553-c11c-4fae-bf8e-18f0cf69fcaf",
        "metadata": {},
        "text": "Socrates : Always happy to help .",
        "type": "NarrativeText"
    },
    {
        "element_id": "67436b84-ff0f-4f84-8460-8c88bcedd87f",
        "metadata": {},
        "text": "One way to address trust issues is for the assistant to provide further explanations and justifications that can calibrate a user\u2019s confidence in the assistant\u2019s responses. Such explanations could be requested conversationally, though most participants did not attempt to do so. One participant (P9) did ask for such explanations, and we show a summary of their transcript in Listing 2. In this instance, P9 asked for a definition of a unit test (line 1), an expla- nation of the code being tested (line 25), and justifications of the",
        "type": "NarrativeText"
    },
    {
        "element_id": "be5e9597-6af9-483c-b832-3e4040c26899",
        "metadata": {},
        "text": "Another difference we observed in how people interacted with the assistant stemmed from their view on the role it played in their",
        "type": "NarrativeText"
    },
    {
        "element_id": "2dbaa484-6ece-4a74-89ed-e9850f95485b",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "452a589f-4252-4fd5-bf64-93715ef5181b",
        "metadata": {},
        "text": "504",
        "type": "UncategorizedText"
    },
    {
        "element_id": "f63afaa8-40cb-4c72-aeb3-5c30e9d71f9f",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "6827d66e-6fb4-4e07-ab1b-574b873b543a",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "117adfad-3ecf-4118-b107-698690ee7f45",
        "metadata": {},
        "text": "orientation codes in Table 1). Twenty participants (47.6%) made at least one socially-oriented utterance. An extreme form of this inter- action style can be seen in a snippet from P6\u2019s transcript (Listing 3). The 20 participants with a behaviorally-demonstrated social orientation did not generally differ in their role ratings from other participants, except that they rated the assistant as more likely to be an advisor (Fisher\u2019s exact test, two-tailed \ud835\udc5d = .02) or a reviewer (Fisher\u2019s exact test, two-tailed \ud835\udc5d = .03). However, they did not differ in their overwhelmingly-strong ratings of the tool orientations. Thus, at least for some participants, there seems to be a dissonance in their view of the assistant\u2019s role orientation.",
        "type": "NarrativeText"
    },
    {
        "element_id": "682632a3-4473-4842-aa30-41198abf3194",
        "metadata": {},
        "text": "collaborative process. Some participants, such as P18, treated it more as a tool by issuing commands rather than asking questions. As quoted earlier, they said, \u201cI didn\u2019t converse with it like a chat bot.\u201d P5 described their interaction style similarly: \u201cI found myself wanting to type search queries into Socrates, not treating it as a person but as a search tool.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "feca62dd-70f9-4937-8330-e851daef2bd5",
        "metadata": {},
        "text": "In anticipation that participants would have different orienta- tions to the assistant and its role, we asked a question on the post- task survey about the different kinds of roles the assistant might take. These roles generally fell into one of two categories: a tool orientation (a tool, a reference guide, a content generator, a problem solver), and a social orientation (a collaborator, a colleague, a coach, an advisor, a reviewer). Participants rated the extent to which they viewed the Programmer\u2019s Assistant in each of these roles on a 4- point scale of extent: Not at all (1), A little (2), Somewhat (3), or A great deal (4).",
        "type": "NarrativeText"
    },
    {
        "element_id": "024f1b5e-6562-4bbc-a7d9-8d49dccfa39d",
        "metadata": {},
        "text": "Listing 3: Excerpt from P6\u2019s interaction with the Program- mer\u2019s Assistant, in which P6 offers their thanks and congrat- ulations. P6 : 1 2 3 4 5 6 7 8 9 10 11 12 13",
        "type": "NarrativeText"
    },
    {
        "element_id": "61ac15c9-a99b-44f4-bfcb-5f08d57c156b",
        "metadata": {},
        "text": "thank you ! it 's been really nice to code with you ! or to have you coding ! LOL You ' re welcome ! I hope to see you on air soon , Socrates ! I hope so too . congrats to you research team ! you ' ve made a good job ! I ' m glad you think so . sorry ... they ' ve made a good job ( well ... you too ... ; -) ) Thank you . see you next time ! bye !! Goodbye .",
        "type": "NarrativeText"
    },
    {
        "element_id": "9f00ecf6-739c-45d4-95cb-309663cc9e64",
        "metadata": {},
        "text": "Socrates : P6 : Socrates : P6 :",
        "type": "Title"
    },
    {
        "element_id": "8571e340-d770-49a8-9a62-d96849cd6c54",
        "metadata": {},
        "text": "Rating",
        "type": "Title"
    },
    {
        "element_id": "4960172d-96e2-40ca-ab27-fd27b3a7172e",
        "metadata": {},
        "text": "Not at allA littleSomewhatA great deal",
        "type": "Title"
    },
    {
        "element_id": "7a005e97-d032-49ac-ab10-f304bcd59604",
        "metadata": {},
        "text": "0255075100",
        "type": "UncategorizedText"
    },
    {
        "element_id": "9791e3e5-df27-4d2b-b103-afcd0313fe57",
        "metadata": {},
        "text": "ToolContentgeneratorReferenceguideCollaboratorProblemsolverAdvisorCoachReviewerColleagueRolePercentage of participants",
        "type": "Title"
    },
    {
        "element_id": "ccbb768e-5b50-4681-9f5c-1d63f10d0684",
        "metadata": {},
        "text": "Socrates : P6 :",
        "type": "Title"
    },
    {
        "element_id": "08fe38ba-c6ec-4902-b835-1856fcb24ca8",
        "metadata": {},
        "text": "Socrates : P6 : Socrates :",
        "type": "Title"
    },
    {
        "element_id": "4fb9e9e3-b76e-4053-b56b-cc14a385fa8a",
        "metadata": {},
        "text": "5.4.2 Mental Capacities. Participants made a number of inferences about the Programmer\u2019s Assistant and its capacities for thought. Many participants talked about how the assistant possessed a level of \u201cunderstanding\u201d (P6, P8, P11, P18, P32) of \u201cthe context\u201d (P9, P21) as well as \u201cmajor concepts\u201d (P9) and \u201cknowledge\u201d (P33). P24 was amazed by the assistant\u2019s ability to \u201ctake a plain english request and interpret it properly.\u201d P7 ascribed intelligence to the assistant, saying, \u201cIt was a lot smarter and trained tha[n] I thought it was.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "c3b7a5da-0e1f-4037-92ab-51f6f030e3f5",
        "metadata": {},
        "text": "Figure 3: Role orientations. Participants overwhelmingly felt that the assistant\u2019s role was of a tool orientation rather than a social orientation. The chart shows ratings distributions across 9 different roles the assistant might take, sorted by the percentage of participants who rated the extent of that role as \u201cA great deal.\u201d The leftmost role is of a tool, with 80.9% of participants rating it as \u201ca great deal.\u201d Following tool are content generator (69.0%), reference guide (64.3%), collaborator (40.5%), problem solver (35.7%), advisor (21.4%), coach (19.0%), reviewer (16.7%), and colleague (14.3%).",
        "type": "NarrativeText"
    },
    {
        "element_id": "aaed6ed1-56bf-4e0c-876b-ca21d22f203f",
        "metadata": {},
        "text": "One participant assumed that the assistant \u201cKeeps improving through (user) feedback\u201d (P31). Another felt that the assistant was capable of computation: \u201cIt understands the problem... It can calculate the results of a function back\u201d (P8).",
        "type": "NarrativeText"
    },
    {
        "element_id": "9dcf8071-40ac-4374-afd0-4d9272343fcf",
        "metadata": {},
        "text": "However, not all participants were convinced of the assistant\u2019s ability to understand. P37 questioned the assistant\u2019s limitations: \u201cI wonder how far beyond boilerplate it can go and if it works for truly original problems.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "439ed86d-78e1-4310-a302-5693f4eff855",
        "metadata": {},
        "text": "Impact of Conversational Assistance on Work Practices. Many 5.4.3 participants discussed how the Programmer\u2019s Assistant shaped their work practices on the programming challenges. Overall, par- ticipants felt that the assistant \u201csaves time\u201d (P10), \u201chelps me code faster\u201d (P34), and would \u201cspeed up my productivity\u201d (P19) because \u201cI could focus on validating and improving the code it generated instead of having to write it all from scratch\u201d (P18). P37 remarked that, \u201cIt opens a whole new door for fast develpment.\u201d P4 discussed how the assistant \u201cwas helpful in staying focused on the code,\u201d although for P14, \u201cit took [me] time to get into tempo with the tool.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "24938ea3-fffa-4ba0-a73d-d3dea3d887ba",
        "metadata": {},
        "text": "We show participants\u2019 ratings of the assistant\u2019s role in Figure 3. Despite the fact that their attitudes toward the assistant overwhelm- ingly reflected a tool orientation, their behaviors reveal that many participants actually treated the assistant as a social agent. P6 de- scribed how \u201cI felt it like a partner,\u201d and P4 told the assistant, \u201cI could not have solved [the challenge] without your help,\u201d to which the assistant responded, \u201cI\u2019m glad I could help.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "d26e2b4f-4f77-469c-950c-7319f58dbf19",
        "metadata": {},
        "text": "The literature on Computers as Social Agents (CASA) helps us interpret this result as it demonstrates how computers are often treated like people [56, 67]. LLM-based conversational agents can exacerbate this tendency; as they likely have been trained on ex- amples of social interaction, they can also respond as social agents. In the conversation logs, we identified participants who inter- acted with the assistant in a socially-oriented fashion (the social",
        "type": "NarrativeText"
    },
    {
        "element_id": "7207284d-633c-44b1-a796-2015a780530f",
        "metadata": {},
        "text": "P31 pointed out how the assistant would change the nature of",
        "type": "NarrativeText"
    },
    {
        "element_id": "47caedf8-b74f-498d-824c-02b2b0dfb1c8",
        "metadata": {},
        "text": "their work:",
        "type": "Title"
    },
    {
        "element_id": "7b1c9c74-93aa-4bcb-8d68-ad99ee0e1cf8",
        "metadata": {},
        "text": "\u201cMy job could focus more on higher level aspects and therefore achieving better (quality) results, besides the",
        "type": "NarrativeText"
    },
    {
        "element_id": "3eea50dd-c8ae-482a-97f0-bb4389f251c8",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "91ae24a8-289d-4572-829b-c50c6b7b8922",
        "metadata": {},
        "text": "505",
        "type": "UncategorizedText"
    },
    {
        "element_id": "192d138a-a015-4252-bd56-fa0866dd8dba",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "ce58e407-a6f4-4e48-a270-94138dc88968",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "bc9ae6b5-7761-4208-8d9a-c2a3c50ea784",
        "metadata": {},
        "text": "time-to-value... Data science (and dev) becomes a more creative-higher level experience.\u201d (P31)",
        "type": "NarrativeText"
    },
    {
        "element_id": "92843821-e25d-4359-a833-6dfb2565b94f",
        "metadata": {},
        "text": "When a desirable item is found, users must translate it into their code environment (e.g. via copy/paste) and possibly edit it to fit their existing code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "e3be8cfd-547b-4e8a-b08c-560adc08d3ba",
        "metadata": {},
        "text": "Other participants discussed a work process in which the assis- tant provided incomplete solutions \u2013 the \u201cbuilding blocks\u201d (P38) or \u201cinitial draft of code\u201d (P11) \u2013 upon which they could build. P5 aptly described this process:",
        "type": "NarrativeText"
    },
    {
        "element_id": "e456ad0e-a1db-491a-b4e7-bd2d529eb426",
        "metadata": {},
        "text": "We also note that the Programmer\u2019s Assistant and Copilot both utilize the same underlying AI model, Codex [24], which means that the only difference between these tools is the user experience. The extent to which Codex was trained on data from programming- related Q&A web sites is less clear, but for the purposes of our analysis, we focus our discussion solely on the differences in their interaction models16.",
        "type": "NarrativeText"
    },
    {
        "element_id": "927b75e2-106f-4792-bd50-fb19a814f189",
        "metadata": {},
        "text": "\u201cIt\u2019s nice to copy well formulated challenges in natural language and have the code generator take its best stab at it, then edit to our hearts content.\u201d (P5)",
        "type": "NarrativeText"
    },
    {
        "element_id": "3310a227-5d8d-4126-bf04-6ebbb367e197",
        "metadata": {},
        "text": "Participants felt that human review of the assistant\u2019s responses was necessary because \u201cThe answers provided are generally not novel solutions, often look clunky and non-elegant. There may be some unnecessary code. Basically the code would need to be reviewed\u201d (P16). P35 also pointed out how \u201cThe code generator was good but you still have to really check it.\u201d P19 discussed how they would turn to the assistant as a first source for support, and only if it wasn\u2019t able to help would they then turn to other support tools:",
        "type": "NarrativeText"
    },
    {
        "element_id": "54080db6-8e62-468c-af04-d86cd65afddc",
        "metadata": {},
        "text": "Participants reported various benefits and drawbacks of a con- versational interaction over a direct manipulation interaction. Fore- most, conversation \u201cfelt very natural\u201d (P21) and \u201cfeels much more natural using Natural Language with the AI\u201d (P39). In addition, P39 felt that \u201cthe use cases of Programmers\u2019 Assistant seem more open- ended.\u201d Many participants were surprised at the variety of tasks the assistant was capable of performing, from writing unit tests (P19, P36, P37) and documentation (P12, P19, P36, P37) to explaining what code did (P31, P38) and even answering general-knowledge questions (P31). Again, we note that the Programmer\u2019s Assistant utilizes the same underlying model as Copilot, yet the conversa- tional interface was able to expose a wider variety of emergent behaviors from the model. Multiple participants explored the limits of the assistant\u2019s knowledge and abilities beyond our programming challenges. For example, P37 asked it questions about physics and ordinary differential equations (\u201cODe\u201d as written by P37), and was surprised by the \u201cversatility of what it could answer.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "3654741b-5045-4c1e-b612-14ef8ff8104c",
        "metadata": {},
        "text": "\u201cThe way I will use it is, I will first us[e] the Program- mer\u2019s assistant for most of my cases. Only in certain cases where Programmer\u2019s assistant cant answer things I will turn up to official documentation or stack overflow.\u201d (P19)",
        "type": "NarrativeText"
    },
    {
        "element_id": "f315cbf2-5770-464b-ad5e-99c0efa9e681",
        "metadata": {},
        "text": "However, latency was a factor for interactive use of the assistant and participants noticed when the assistant took a long time to respond. P19 remarked, \u201cSometimes it took lot of time, like more than 5 seconds.\u201d P40 also felt \u201cthe response [was] a little slow sometimes... in chat mode I expect faster responses.\u201d As discussed in Section 5.2.1, the assistant took an average of 6.7 seconds (SD = 3.1 seconds) to respond to a request, and participants did appreciate when the assistant produced rapid responses: \u201cI loved how quick it was able to pull up answers to questions I had\u201d (P38).",
        "type": "NarrativeText"
    },
    {
        "element_id": "4b2db942-1c4f-495b-a04b-0fc77266e520",
        "metadata": {},
        "text": "\u201cI asked it some physics and ODe question and the answers, though not complete, included the key parts needed to write that code.\u201d (P37)",
        "type": "NarrativeText"
    },
    {
        "element_id": "55a5082f-909a-4aca-9238-95285e3fd0c2",
        "metadata": {},
        "text": "P31 probed the assistant on its knowledge of geography and was",
        "type": "NarrativeText"
    },
    {
        "element_id": "75288aa0-428e-4349-9da8-b3a866970d7a",
        "metadata": {},
        "text": "surprised when the assistant produced a correct answer.",
        "type": "NarrativeText"
    },
    {
        "element_id": "3889e90c-c422-4b7f-90ed-27e7df378b9f",
        "metadata": {},
        "text": "\u201cI asked something out of SW engineering domain (ge- ography) and it replied correctly, also by correctly an- swering on my nationality.\u201d (P31)",
        "type": "NarrativeText"
    },
    {
        "element_id": "b3cd8dd9-b3ce-4560-99ca-23c70538f550",
        "metadata": {},
        "text": "5.4.4 Conversational Interaction vs. Other Interaction Models. Al- though our study was not intended to make comparative evalu- ations with the Copilot tool, we nonetheless asked participants whether they were familiar with Copilot, and if so, to comment on how the two tools compared. We also asked a similar question to compare the assistant with another popular form of programming assistance, searching the web (via a search engine like Google, or a Q&A site like Stack Overflow). In discussing the differences be- tween these three tools, we note that the primary differentiator is their interaction model.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ae57c2e9-c378-47bf-8158-561c091ed2b6",
        "metadata": {},
        "text": "For some participants, the ability to assess the assistant\u2019s re- sponse before committing to it (i.e. by inserting assistant-generated code into their editor) was a boon. P15 described how the copy/- paste boundary provided them with \u201ca bit more control to ask specific questions about what I wanted and to assess before putting it in my code.\u201d Other participants felt that the copy/paste boundary was more inefficient:",
        "type": "NarrativeText"
    },
    {
        "element_id": "5441c42f-ac4d-4ce4-9dd2-c585de8ef164",
        "metadata": {},
        "text": "The interaction model for the Programmer\u2019s Assistant is clearly conversational: users ask questions in natural language and are provided with a response in natural language and/or code. The interaction model of Copilot is reminiscent of direct manipulation interfaces [37], in which the user\u2019s actions in the user interface directly manipulate an object on the screen. Copilot automatically makes autocompletion suggestions as the user types. This auto- completed code is directly placed in the source editor; thus, the user\u2019s work is contained entirely within the scope of the object on which they are working (i.e. the source code), which is how direct manipulation interfaces operate. In web search, users enter a separate search context (e.g. a search engine accessed within a web browser), type in a natural language query, and then forage amongst search results to identify relevant items of interest [12, 62].",
        "type": "NarrativeText"
    },
    {
        "element_id": "7a81032e-3557-4b2f-bc96-57d1617739df",
        "metadata": {},
        "text": "\u201cI think the main difference is the ability of Copilot to suggest code while you type, what make it faster and easier to use. While using the Programmer\u2019s Assistant, you need to go to the chat, ask the question, copy the",
        "type": "NarrativeText"
    },
    {
        "element_id": "cd50ca47-42c2-44b3-850c-4e07372c5490",
        "metadata": {},
        "text": "16As an aside, our comparison of direct manipulation, search, and conversational inter- action models is reminiscent of historical comparisons of text-based and graphical user interfaces [54, 63]. Each modality was shown to have advantages and disadvantages. For example, text-only interfaces can provide accessibility [54, 78] and productivity [53] advantages, whereas graphical user interfaces provide greater discoverability [10, 88]. Some researchers explored ways to bridge the two interaction modes, such as by developing GUI wrappers for command line programs [53, 94] or by developing tools that converted GUI activities into procedural descriptions [55]. Our view is that similar bridges can be constructed between direct manipulation, search, and conversational models of interaction; a user\u2019s interaction with an LLM need not be constrained to a single interaction model.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7cc0a1c5-ac1b-4f49-bfc8-36831eb56c81",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "2a8e5898-23b2-4f83-be73-0ea70868ef6e",
        "metadata": {},
        "text": "506",
        "type": "UncategorizedText"
    },
    {
        "element_id": "68ce30be-3cbb-4332-bd68-db5acb598d86",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "650867de-f2ea-4293-ab27-c48a25f7c33e",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "ca6c2354-e6bf-4e20-8eab-3887871aae20",
        "metadata": {},
        "text": "code (or rephrase the question if it was not understood by the agent), and edit it to match your code.\u201d (P3)",
        "type": "NarrativeText"
    },
    {
        "element_id": "d071e7e6-1e49-4509-97c4-5d0f2f56cc99",
        "metadata": {},
        "text": "models (direct manipulation and search) because of its embedded- ness in the UI and its ability to surface emergent behaviors of the model (Section 5.4.4).",
        "type": "NarrativeText"
    },
    {
        "element_id": "198fa1cf-f43f-4b38-80d0-cefffa9ef911",
        "metadata": {},
        "text": "A large number of participants felt that the conversational inter- action was faster than web search (P1, P6, P7, P10, P11, P12, P16, P17, P18, P20, P24, P29, P30, P33, P36, P37, P42) because of its ability to provide \u201creal-time responses\u201d (P32) that can be \u201capplied exactly to your code\u201d (P33) without having to \u201cparse through lots of text... to get what you need\u201d (P15). In addition, the assistant provided \u201cMUCH faster, better responses\u201d (P17) that were \u201cmuch more relevant to the problems\u201d (P34) and \u201csimple [and] succinct\u201d (P9), without having to \u201csort through answers on your own or read documentation\u201d (P9) or \u201clook at many posts before finding the relevant one\u201d (P18).",
        "type": "NarrativeText"
    },
    {
        "element_id": "76fc4727-316b-4fe4-9bfe-cc9e2e727c97",
        "metadata": {},
        "text": "We do not believe that these different interaction models are in competition and we agree with P39\u2019s assessment that assistive tools can be built using a plethora of different interaction models. For use cases in which a model is known to produce high-quality results (e.g. code autocompletion for Codex), a direct manipulation interface seems wholly appropriate as it would provide a discov- erable and predictable way of invoking the model to produce a known type of result. However, direct manipulation interfaces may be less ideal for surfacing the emergent behaviors of a foundation model [14], and thus natural language interaction may be more suit- able. Many popular text-to-image models, such as DALL-E 2 [66] and Stable Diffusion [72], operate in a one-shot fashion, in which the user specifies a prompt, clicks a button, and gets results. Our study demonstrates how the additional contextual layers of con- versational history and the artifact-under-development provide additional value to the co-creative process.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0a2e9c38-7662-49ec-9a5c-e010e45fbda6",
        "metadata": {},
        "text": "Despite these benefits, some participants felt that the assistant might not work well for \u201cmore specific and difficult problems on a bigger scale\u201d as compared to web search. P9 felt that \u201cthe data [of the Programmer\u2019s Assistant] wasn\u2019t as rich\u201d as the web. Other participants felt that the assistant lacked the \u201cmultiple answers\u201d (P9) and \u201crich social commentary\u201d (P19) that accompanies answers on Q&A sites:",
        "type": "NarrativeText"
    },
    {
        "element_id": "9bb498a6-e437-45a2-bb84-572314271ae9",
        "metadata": {},
        "text": "\u201cI like to see the different versions proposed on stack overflow and the commentary of what makes one solu- tion better than another in a given situation.\u201d (P27)",
        "type": "NarrativeText"
    },
    {
        "element_id": "eb64b9cd-eb0b-4f66-8325-875d469be5f9",
        "metadata": {},
        "text": "6.2 Toward Human-AI Synergy The aim of human-centered AI is to \u201cenable[] people to see, think, create, and act in extraordinary ways, by combining potent user experiences with embedded AI methods to support services that users want\u201d [82]. Building upon this definition, Rezwana and Maher [69] posit that, \u201cIn a creative collaboration, interaction dynamics, such as turn-taking, contribution type, and communication, are the driving forces of the co-creative process. Therefore the interaction model is a critical and essential component for effective co-creative systems.\u201d [69]. They go on to note that, \u201cThere is relatively little research about interaction design in the co-creativity field, which is reflected in a lack of focus on interaction design in many existing co-creative systems.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "c6d72e70-9a15-4c7b-986a-58247e971f1e",
        "metadata": {},
        "text": "Some participants promoted a more balanced view that there isn\u2019t a single mode of interaction superior to all others. P19 felt that web search would be a fallback when the assistant failed to answer a question. P39 described how search could be integrated with the conversational interaction:",
        "type": "NarrativeText"
    },
    {
        "element_id": "78b0d360-a4d3-4f4c-bbb0-455c10bd53dd",
        "metadata": {},
        "text": "\u201cI think both options should exist: people should be able to input their queries like a search bar AND also give their question as if in conversation.\u201d (P39)",
        "type": "NarrativeText"
    },
    {
        "element_id": "eb0301e1-f026-4ab7-a6be-70ce93e7f91c",
        "metadata": {},
        "text": "6 DISCUSSION 6.1 Value of Conversational Interaction We began our research by asking the question of whether con- temporary developments in code-fluent LLMs could sufficiently support a conversational programming assistant. We believe that our work has demonstrated that they can. Clearly, the Program- mer\u2019s Assistant was viewed by our participants as a useful tool that provided real value \u2013 so much so that many participants explic- itly requested or expressed the desire to use it in their own work. However, how much of this value was derived from the model itself and its ability to produce high-quality responses to programming questions, versus from participants\u2019 ability to conduct extended conversational interactions grounded in their actual source code? We believe that both of these constituent aspects were valuable. Indeed, many participants commented on their surprise and satis- faction with the quality of the assistant\u2019s responses (Section 5.2.3). However, participants also valued the conversational interactions that they had with the assistant. In the event logs, we saw evi- dence that participants were leveraging conversational context to ask follow-up questions as well as leveraging code context by ask- ing about their code selections (Section 5.3.2). Many participants reported that they would find the tool less valuable if the conver- sational interaction were removed (Section 5.3.2). Further, conver- sation seemed to provide unique value beyond other interaction",
        "type": "NarrativeText"
    },
    {
        "element_id": "ec97a4e0-8757-494b-9554-3d47e4d1c25a",
        "metadata": {},
        "text": "Our study begins to address this gap. While many co-creative systems examine casual tasks or experimental activities (e.g., Spoto and Oleynik [87]), our focus was on the co-creative practice of programming. Our goal was to understand peoples\u2019 attitudes to- ward a conversational programming assistant, akin to Wang et al.\u2019s examination of data scientists\u2019 attitudes toward automated data science technologies [99]. We found that, despite an initial level of skepticism, participants felt that a conversational assistant would provide value by improving their productivity (Section 5.4.3). How- ever, further work is needed to assess the extent to which this type of assistance provides measurable productivity increases.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f229d006-d60a-4d6d-9f6b-195898dcd67c",
        "metadata": {},
        "text": "Campero et al. [19] conducted a survey of papers published in 2021 that examined human-AI synergy, the notion that a human-AI team can accomplish more by working together than either party could accomplish working alone. They found mixed results, with no clear consensus emerging on how to design human-centered AI systems that can guarantee positive synergy. Summarizing from their discussion,",
        "type": "NarrativeText"
    },
    {
        "element_id": "ad02405c-a48e-4883-9195-1de1be236568",
        "metadata": {},
        "text": "\u201cPerhaps achieving substantial synergies among people and computers is harder than many people think. Per- haps it requires... new ways of configuring groups that include people and computers. And perhaps it needs",
        "type": "NarrativeText"
    },
    {
        "element_id": "444112d3-b32a-4abd-a2de-fc27c98b2c99",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "b901f9ed-a638-4267-82c8-32874f5056be",
        "metadata": {},
        "text": "507",
        "type": "UncategorizedText"
    },
    {
        "element_id": "eb6facb4-422a-4163-82d6-5fd4c14b1fed",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "408c9de1-ef7a-43ed-8d4f-aebdbbde5e42",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "a8ed9ad1-2b35-4505-8973-9107fd9e0b7d",
        "metadata": {},
        "text": "more systematic, focused attention from researchers than it has, so far, received.\u201d [19, p.9]",
        "type": "NarrativeText"
    },
    {
        "element_id": "309b5ef1-2ceb-4db6-9d7b-62b671f91e3a",
        "metadata": {},
        "text": "the underlying LLM for conversational interaction, such as what has been done with Lamda [91], is one opportunity to improve the assistant\u2019s performance. Another opportunity is to align the lan- guage model to follow the desiderata proposed by Askell et al. [11] and described by Ouyang et al. as, \u201chelpful (they should help the user solve their task), honest (they shouldn\u2019t fabricate information or mislead the user), and harmless (they should not cause physical, psychological, or social harm to people or the environment)\u201d [61, p.2]. Glaese et al. [33] propose a slightly different desiderata of \u201ccorrect\u201d instead of \u201chonest,\u201d which may be more applicable to the software engineering domain, as the ability to produce correct code and correct answers about code are both important properties of a conversational programming assistant.",
        "type": "NarrativeText"
    },
    {
        "element_id": "73dc4557-7983-4cb4-b1b7-8a776a2460bd",
        "metadata": {},
        "text": "We believe such evaluations of human-AI synergy should go beyond one-shot performance measures. As implied by many of the uses cases listed by Seeber et al. [80], human-centered AI systems are often deployed in socio-organizational contexts that require longitudinal use [20, 41, 43], such as product design [93], game de- sign [4], and engineering [20, Section 3.2.2]. Thus, we would expect that over time and through interaction with each other, human-AI teams would improve their performance through a mutual learning process.",
        "type": "NarrativeText"
    },
    {
        "element_id": "daeb3a9d-5b51-4dd8-bac2-8109aa26ee3b",
        "metadata": {},
        "text": "Evidence for this process surfaced in our study when participants described how they could improve their programming skills by interacting with the assistant (Section 5.3.3). We assert that the learning should operate in both directions: not only should people improve their programming skills, but the model itself can also improve based on peoples\u2019 interactions with it. For example, when the assistant provides a code example to the user, and the user takes that example and edits it, those edits constitute feedback that can be used to further fine-tune the model. In addition, through longitudinal use, we believe that human and AI partners can create reciprocal representations of one another \u2013 i.e., the human is likely to create a mental model of the AI, and the AI may be engineered to develop a user model for each of its human users [30, 48, 79]. Such a pair of models is often described as Mutual Theory of Mind [29, 100]. This type of capability raises the possibility of personalizing and adapting an assistant to the strengths and needs of individual users. With such models, an assistant that knows a user is learning a programming language could provide natural language explana- tions alongside code outputs, whereas an assistant that knows a user is strongly skilled in a programming language might shorten or omit those explanations. Similarly, users are likely to update their mental models of the AI with more experience. We believe the space for exploring how these reciprocal models impact human-AI synergy is rich, and we encourage additional work in this area.",
        "type": "NarrativeText"
    },
    {
        "element_id": "e2fb9ceb-ef58-473f-ab95-4624e3951ba5",
        "metadata": {},
        "text": "Combining LLMs with search-based approaches to establish ad- ditional context for the model, such as AlphaCode [44] has done, may also result in more capable systems. These \u201csearches\u201d need not be limited to textual sources, but could be conducted over appro- priate semantic stores (e.g. a knowledge graph) and take advantage of explicit semantic reasoning services, resulting in an integration of symbolic and neural approaches. Further, allowing for \u201cinternal deliberation\u201d of the type shown in Nye et al. [59] could result in better-reasoned results, as well as better explanations and justifica- tions.",
        "type": "NarrativeText"
    },
    {
        "element_id": "2c9b17ef-0bcb-428e-87c7-cbf496d338c2",
        "metadata": {},
        "text": "Another avenue for improvement involves the prompt used to configure the assistant (Appendix D). Just as the prompt for each successive interaction is modified by the growth of the conversa- tional transcript, there is no requirement that the initial prompt be static. It too can be specialized to incorporate aspects of a user model, enabling the realization of a Mutual Theory of Mind [29, 100]. Pro- viding better UX affordances for visualizing and manipulating the active contexts \u2013 code and conversation \u2013 could provide users with more control over which information contributes to the generation of the assistant\u2019s response.",
        "type": "NarrativeText"
    },
    {
        "element_id": "bbaad2cb-dda8-4043-aa7b-6823773a3252",
        "metadata": {},
        "text": "Our participants clearly indicated that they were interested in having an assistant that behaved more proactively, in contrast to our deliberate design of an assistant that never takes conversational initiative. A more proactive assistant would be able to interrupt or remind a user when necessary [23], yet this characteristic raises many challenging issues. How can we calibrate the threshold for such interruptions? How can users tune the assistant to deliver only those interruptions that the they would find useful (e.g., [28, 81])? How can we help users to regain their prior context after dealing with an interruption (e.g. [89])? Should an assistant be used to persuade or nudge the user (e.g. [35])? Who should determine the topic, frequency, and insistence of such persuasion attempts (e.g. [52, 85])? Should users have the ability to moderate or defeat attempted persuasions, or should those decisions be left to the organization?",
        "type": "NarrativeText"
    },
    {
        "element_id": "eb9c658c-4f9e-498f-af74-214343179cba",
        "metadata": {},
        "text": "Human-centered AI systems that are designed to combine and synergize the distinct skills of humans and AI models cannot suc- ceed if they diminish the human skills upon which they depend. Well-designed human-centered AI systems develop new and com- plementary skills for both the human and AI constituents [82, 83], and we believe that mutual learning may address concerns that the wide deployment and use of AI systems will result in a de-skilling of the workforce [77, 108].",
        "type": "NarrativeText"
    },
    {
        "element_id": "1d77de17-0ccd-4ad8-9c91-adffd190df2e",
        "metadata": {},
        "text": "Ultimately, the design decisions that go into an interactive AI system have ethical implications. Our design attempts to augment the user\u2019s knowledge and skills by presenting help on demand, couched in non-authoritative suggestions, which leaves the user firmly in control and ultimately responsible for the work product.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ba76616f-0ffa-4d68-8f49-fb83e5d90fcc",
        "metadata": {},
        "text": "Finally, we explored the different kinds of role orientations our participants had toward the assistant and found that participants varied in their views of it as a tool versus a social agent (e.g. collabo- rator or colleague). We posit that peoples\u2019 effectiveness in working with an AI system may be influenced by their role orientation, and we encourage future research in this area.",
        "type": "NarrativeText"
    },
    {
        "element_id": "2387f40a-aca7-469d-9e5e-6475759b350d",
        "metadata": {},
        "text": "6.3 Opportunities for Future Research Our work highlights many interesting avenues for future enhance- ments that could be made to LLM-based conversational assistants such as our Programmer\u2019s Assistant, as well as future human- centered research on LLM-based conversational assistance.",
        "type": "NarrativeText"
    },
    {
        "element_id": "5389266b-2c1a-44d5-becc-47735fe8c331",
        "metadata": {},
        "text": "Our work employed a code-fluent model that was not specifi- cally designed to handle conversational interaction. Fine-tuning",
        "type": "NarrativeText"
    },
    {
        "element_id": "0eec33bf-1b8a-43dd-bdad-462b05e72890",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "dee5a0df-ee3a-4f38-bb3b-4ef60ea58950",
        "metadata": {},
        "text": "508",
        "type": "UncategorizedText"
    },
    {
        "element_id": "a0905dc3-7a5a-40ad-adf0-76ec3aaa7c03",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "ffce56d7-887c-4cb0-87e4-1b0da65f3549",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "a26646a6-5e41-4d4d-8d8f-2b6427391742",
        "metadata": {},
        "text": "7 CONCLUSION We developed a prototype system, the Programmer\u2019s Assistant, in order to assess the utility of a conversational assistant in a software engineering context. The assistant was implemented using a state- of-the-art code-fluent large language model, Codex [24], and was capable of generating both code and natural language responses to user inquiries. We further used the prompting mechanism of the model to set up a conversational interaction in which the model uses the conversational history, plus the user\u2019s current utterance, in order to generate a response. In this way, users are able to ask follow-up questions in the chat that reference prior utterances and responses. We incorporated the conversational assistant into a code editing environment, enabling the conversation to be grounded in the context of the user\u2019s source code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0b74969d-beef-4200-99a6-ef045fa5aac9",
        "metadata": {},
        "text": "[8] Craig Anslow, Stuart Marshall, James Noble, and Robert Biddle. 2013. Sourcevis: Collaborative software visualization for co-located environments. In 2013 First IEEE Working Conference on Software Visualization (VISSOFT). IEEE, 1\u201310. [9] Zahra Ashktorab, Michael Desmond, Josh Andres, Michael Muller, Naren- dra Nath Joshi, Michelle Brachman, Aabhas Sharma, Kristina Brimijoin, Qian Pan, Christine T Wolf, et al. 2021. AI-Assisted Human Labeling: Batching for Efficiency without Overreliance. Proceedings of the ACM on Human-Computer Interaction 5, CSCW1 (2021), 1\u201327.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4ff9378f-2d40-4779-8558-dcd0308970e6",
        "metadata": {},
        "text": "[10] Catherine A Ashworth. 1996. GUI Users have trouble using graphic conventions on novel tasks. In Conference Companion on Human Factors in Computing Systems. 75\u201376.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4388ecd1-f5ea-4121-8d23-100063efd24e",
        "metadata": {},
        "text": "[11] Amanda Askell, Yuntao Bai, Anna Chen, Dawn Drain, Deep Ganguli, Tom Henighan, Andy Jones, Nicholas Joseph, Ben Mann, Nova DasSarma, et al. 2021. A general language assistant as a laboratory for alignment. arXiv preprint arXiv:2112.00861 (2021).",
        "type": "NarrativeText"
    },
    {
        "element_id": "6e91be2b-31c3-4932-9f20-39c52bfa220c",
        "metadata": {},
        "text": "[12] Leif Azzopardi, Paul Thomas, and Nick Craswell. 2018. Measuring the utility of search engine result pages: an information foraging based measure. In The 41st International ACM SIGIR conference on research & development in information retrieval. 605\u2013614.",
        "type": "NarrativeText"
    },
    {
        "element_id": "e2e97c98-45af-4ab5-a245-10d4b5dfd9c7",
        "metadata": {},
        "text": "[13] Shraddha Barke, Michael B James, and Nadia Polikarpova. 2022. Grounded Copilot: How Programmers Interact with Code-Generating Models. arXiv preprint arXiv:2206.15000 (2022).",
        "type": "NarrativeText"
    },
    {
        "element_id": "f9a8c801-406d-44d4-8565-48a146b4446d",
        "metadata": {},
        "text": "We evaluated this system with 42 participants with varied levels of programming skill, and their quantitative and qualitative feed- back, coupled with their usage of the system, demonstrated the varied, and sometimes emergent, types of assistance it was able to provide. Many participants noted the high quality of the conversa- tional responses, including the assistant\u2019s ability to produce code, explain code, answer general programming questions, and even answer general knowledge questions. Participants felt this type of assistance would aid their productivity, and they drew meaningful contrasts between the conversational style of interaction with other tools that employ a direct manipulation or search-based interaction model.",
        "type": "NarrativeText"
    },
    {
        "element_id": "740ff449-ae8f-48ce-9b69-260e105ee353",
        "metadata": {},
        "text": "[14] Rishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, et al. 2021. On the opportunities and risks of foundation models. arXiv preprint arXiv:2108.07258 (2021).",
        "type": "NarrativeText"
    },
    {
        "element_id": "ee40c0bb-d4a6-4d71-adb2-9652a476e645",
        "metadata": {},
        "text": "[15] Joel Brandt, Mira Dontcheva, Marcos Weskamp, and Scott R Klemmer. 2010. Example-centric programming: integrating web search into the development environment. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. 513\u2013522.",
        "type": "NarrativeText"
    },
    {
        "element_id": "411b1d77-39ee-4020-a94b-e87544dd7d0f",
        "metadata": {},
        "text": "[16] Virginia Braun and Victoria Clarke. 2022. Common challenges in Thematic Analysis and how to avoid them. Retrieved August 11 2022 from https://youtu. be/tpWLsckpM78",
        "type": "NarrativeText"
    },
    {
        "element_id": "47294649-b764-43b4-aebb-c0177a304f34",
        "metadata": {},
        "text": "[17] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Ka- plan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. 2020. Language Models are Few-Shot Learners. In Advances in Neural Information Processing Systems, H. Larochelle, M. Ranzato, R. Hadsell, M.F. Balcan, and H. Lin (Eds.), Vol. 33. Curran Associates, Inc., 1877\u20131901. https://proceedings.neurips.cc/paper/2020/ file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf",
        "type": "NarrativeText"
    },
    {
        "element_id": "2b587bf9-5d05-42d4-8980-bba2faaf9846",
        "metadata": {},
        "text": "Our study motivates the use of conversational styles of inter- action with large language models by showing how they enable emergent behaviors in a co-creative context. The Programmer\u2019s Assistant did not always generate perfect code or correct answers; nonetheless, participants in our study had an overall positive ex- perience working with it on a variety of programming challenges. We believe that our work takes us one step closer to realizing the vision of human-centered AI: learning how to design systems that maximize the synergy in human-AI collaborations.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7bb0963f-8b78-4290-a120-cce7131b83e0",
        "metadata": {},
        "text": "[18] Sallyann Bryant, Pablo Romero, and Benedict\" du Boulay. 2006. The Collabora- tive Nature of Pair Programming. In Extreme Programming and Agile Processes in Software Engineering, Pekka Abrahamsson, Michele Marchesi, and Giancarlo Succi (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 53\u201364.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7d492ea0-9251-4ab2-a328-eb653bdc293b",
        "metadata": {},
        "text": "[19] Andres Campero, Michelle Vaccaro, Jaeyoon Song, Haoran Wen, Abdullah Almaatouq, and Thomas W Malone. 2022. A Test for Evaluating Performance in Human-Computer Systems. arXiv preprint arXiv:2206.12390 (2022).",
        "type": "NarrativeText"
    },
    {
        "element_id": "bff12b34-3095-4972-a423-7755e1e74652",
        "metadata": {},
        "text": "ACKNOWLEDGMENTS We would like to thank Socrates for his tireless assistance during the user study, as well as for suggesting the title of this paper based on its abstract.",
        "type": "NarrativeText"
    },
    {
        "element_id": "15025711-1408-4765-b5cf-0944fcf86074",
        "metadata": {},
        "text": "[20] Gaetano Cascini, Yukari Nagai, Georgi V Georgiev, Jader Zelaya, Niccol\u00f2 Be- cattini, Jean-Fran\u00e7ois Boujut, Hernan Casakin, Nathan Crilly, Elies Dekoninck, John Gero, et al. 2022. Perspectives on design creativity and innovation research: 10 years later. , 30 pages.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f17bf898-9ae4-44a0-beb1-f364fcc1940c",
        "metadata": {},
        "text": "[21] Stephen Cass. 2022. Top Programming Languages 2022. IEEE Spectrum (23 Aug",
        "type": "NarrativeText"
    },
    {
        "element_id": "436aefbd-c8ee-4567-940c-e35bc6d44216",
        "metadata": {},
        "text": "2022). https://spectrum.ieee.org/top-programming-languages-2022",
        "type": "Title"
    },
    {
        "element_id": "6f69d513-dbd2-446b-be9b-7b8d1bc0b4bc",
        "metadata": {},
        "text": "[22] Cristina Catalan Aguirre, Nuria Gonzalez Castro, Carlos Delgado Kloos, Carlos Alario-Hoyos, and Pedro Jos\u00e9 Mu\u00f1oz Merino. 2021. Conversational agent for supporting learners on a MOOC on programming with Java. (2021).",
        "type": "NarrativeText"
    },
    {
        "element_id": "8b3449ec-3935-4b58-89f9-61c8b585d912",
        "metadata": {},
        "text": "REFERENCES",
        "type": "Title"
    },
    {
        "element_id": "c097937b-d9f1-4439-b696-5eac1e78710c",
        "metadata": {},
        "text": "[1] Rabe Abdalkareem, Emad Shihab, and Juergen Rilling. 2017. What Do Developers Use the Crowd For? A Study Using Stack Overflow. IEEE Software 34, 2 (2017), 53\u201360. https://doi.org/10.1109/MS.2017.31",
        "type": "NarrativeText"
    },
    {
        "element_id": "bebd425c-dd91-4c89-a506-03726dbc4aef",
        "metadata": {},
        "text": "[23] Ana Paula Chaves and Marco Aurelio Gerosa. 2021. How should my chatbot interact? A survey on social characteristics in human\u2013chatbot interaction design. International Journal of Human\u2013Computer Interaction 37, 8 (2021), 729\u2013758. [24] Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde, Jared Kaplan, Harrison Edwards, Yura Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul Puri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sas- try, Pamela Mishkin, Brooke Chan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad Bavarian, Clemens Winter, Philippe Tillet, Felipe Petroski Such, David W. Cummings, Matthias Plappert, Fotios Chantzis, Elizabeth Barnes, Ariel Herbert-Voss, William H. Guss, Alex Nichol, Igor Babuschkin, S. Arun Balaji, Shantanu Jain, Andrew Carr, Jan Leike, Joshua Achiam, Vedant Misra, Evan Morikawa, Alec Radford, Matthew M. Knight, Miles Brundage, Mira Murati, Katie Mayer, Peter Welinder, Bob McGrew, Dario Amodei, Sam McCandlish, Ilya Sutskever, and Wojciech Zaremba. 2021. Evalu- ating a Large Language Models Trained on Code. R.B. De",
        "type": "NarrativeText"
    },
    {
        "element_id": "a1e7e1f2-c265-4589-8a2e-1af8d01be8f8",
        "metadata": {},
        "text": "[2] Eleni Adamopoulou and Lefteris Moussiades. 2020. Chatbots: History, technol- ogy, and applications. Machine Learning with Applications 2 (2020), 100006. [3] Daniel Adiwardana, Minh-Thang Luong, David R. So, Jamie Hall, Noah Fiedel, Romal Thoppilan, Zi Yang, Apoorv Kulshreshtha, Gaurav Nemade, Yifeng Lu, and Quoc V. Le. 2020. Towards a Human-like Open-Domain Chatbot.",
        "type": "NarrativeText"
    },
    {
        "element_id": "61ac7325-2103-458c-ab03-6ee193127e1c",
        "metadata": {},
        "text": "[4] Safinah Ali, Nisha Elizabeth Devasia, and Cynthia Breazeal. 2022. Escape! Bot: Social Robots as Creative Problem-Solving Partners. In Creativity and Cognition. 275\u2013283.",
        "type": "NarrativeText"
    },
    {
        "element_id": "3c5e797e-54a2-43c1-b6ce-bafa21f2f64e",
        "metadata": {},
        "text": "[5] Miltiadis Allamanis, Earl T Barr, Premkumar Devanbu, and Charles Sutton. 2018. A survey of machine learning for big code and naturalness. ACM Computing Surveys (CSUR) 51, 4 (2018), 1\u201337.",
        "type": "NarrativeText"
    },
    {
        "element_id": "de4c93a9-839e-449e-8d2d-74025ebc48c4",
        "metadata": {},
        "text": "[6] Irene Alvarado, Idan Gazit, and Amelia Wattenberger. 2022. GitHub Next |",
        "type": "NarrativeText"
    },
    {
        "element_id": "c49b2995-810c-487f-acfd-8e771f031d49",
        "metadata": {},
        "text": "GitHub Copilot Labs. https://githubnext.com/projects/copilot-labs/",
        "type": "Title"
    },
    {
        "element_id": "46847da4-ab4b-4a64-b906-93705e73ff95",
        "metadata": {},
        "text": "[7] Hikari Ando, Rosanna Cousins, and Carolyn Young. 2014. Achieving saturation in thematic analysis: Development and refinement of a codebook. Comprehensive Psychology 3 (2014), 03\u2013CP.",
        "type": "NarrativeText"
    },
    {
        "element_id": "19d0dcd2-28a1-4ccf-95eb-a15a1132ccbb",
        "metadata": {},
        "text": "[25] Li-Te Cheng,",
        "type": "UncategorizedText"
    },
    {
        "element_id": "0a8f6267-174c-4e68-8186-3094e0add4dc",
        "metadata": {},
        "text": "John",
        "type": "Title"
    },
    {
        "element_id": "1ba5b9b7-9fe9-4dda-98ff-00c650abafb1",
        "metadata": {},
        "text": "Souza,",
        "type": "UncategorizedText"
    },
    {
        "element_id": "7873672c-2071-41ab-bbe0-8a7d2d2b2c42",
        "metadata": {},
        "text": "Patter- Building Collaboration into IDEs:",
        "type": "Title"
    },
    {
        "element_id": "b49f95b2-09ad-480d-9d8b-2ab7e5d69970",
        "metadata": {},
        "text": "Susanne Hupfer,",
        "type": "UncategorizedText"
    },
    {
        "element_id": "a15e0ee8-2a69-44f5-ad8a-cd2e52c7a42e",
        "metadata": {},
        "text": "son, and Steven Ross. 2003. Edit>Compile>Run>Debug>Collaborate? Queue 1, 9 (2003).",
        "type": "NarrativeText"
    },
    {
        "element_id": "98c7016c-22ee-4788-95c7-2713e89ffdf9",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "1635bf29-d1ff-4a45-9a23-09ebf9b3b31c",
        "metadata": {},
        "text": "509",
        "type": "UncategorizedText"
    },
    {
        "element_id": "8a7bade7-2212-42b1-a460-c7715de7593e",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "bcb708ee-d7ad-4d9e-9875-11da633d271b",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "5a10d2f4-afb1-4ade-b376-9f6fce22daae",
        "metadata": {},
        "text": "[48] John E Mathieu, Tonia S Heffner, Gerald F Goodwin, Eduardo Salas, and Janis A Cannon-Bowers. 2000. The influence of shared mental models on team process and performance. Journal of applied psychology 85, 2 (2000), 273.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ca4c7277-9fc4-44fb-bd20-024cf9aa671e",
        "metadata": {},
        "text": "[26] Carl Cook, Warwick Irwin, and Neville Churcher. 2005. A user evaluation of synchronous collaborative software engineering tools. In 12th Asia-Pacific Software Engineering Conference (APSEC\u201905). IEEE, 6\u2013pp.",
        "type": "NarrativeText"
    },
    {
        "element_id": "82c12766-fc41-4097-8080-ae8f6b7d9d26",
        "metadata": {},
        "text": "[27] Claudio Le\u00f3n de la Barra, Broderick Crawford, Ricardo Soto, Sanjay Misra, and Eric Monfroy. 2013. Agile Software Development: It Is about Knowledge Management and Creativity. In Computational Science and Its Applications \u2013 ICCSA 2013, Beniamino Murgante, Sanjay Misra, Maurizio Carlini, Carmelo M. Torre, Hong-Quang Nguyen, David Taniar, Bernady O. Apduhan, and Osvaldo Gervasi (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 98\u2013113.",
        "type": "NarrativeText"
    },
    {
        "element_id": "63472eb9-1c39-4185-a7e7-26f875c48951",
        "metadata": {},
        "text": "[49] Cade Metz. 2022. Meet GPT-3. It Has Learned to Code (and Blog and Ar- gue). (Published 2020). https://www.nytimes.com/2020/11/24/science/artificial- intelligence-ai-gpt3.html",
        "type": "NarrativeText"
    },
    {
        "element_id": "5809cc17-6ffe-43ab-be7a-ce2eece7d19f",
        "metadata": {},
        "text": "[50] Robert J. Moore and Raphael Arar. 2019. Conversational UX Design: A Practi- tioner\u2019s Guide to the Natural Conversation Framework. Association for Computing Machinery, New York, NY, USA.",
        "type": "NarrativeText"
    },
    {
        "element_id": "bea5e21b-272e-4c79-8b96-0893152ee21d",
        "metadata": {},
        "text": "[28] Uri Dekel and Steven Ross. 2004. Eclipse as a platform for research on in- terruption management in software development. In Proceedings of the 2004 OOPSLA workshop on Eclipse Technology eXchange (Vancouver, British Columbia, Canada), Michael G. Burke (Ed.). ACM, 12\u201316.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d8204e8f-fc7e-422a-942a-b20a2a1c3532",
        "metadata": {},
        "text": "[51] Ekaterina A Moroz, Vladimir O Grizkevich, and Igor M Novozhilov. 2022. The Potential of Artificial Intelligence as a Method of Software Developer\u2019s Produc- tivity Improvement. In 2022 Conference of Russian Young Researchers in Electrical and Electronic Engineering (ElConRus). IEEE, 386\u2013390.",
        "type": "NarrativeText"
    },
    {
        "element_id": "18305047-0781-4e30-b595-dec8bcf9de34",
        "metadata": {},
        "text": "[52] Michael Muller, Stevean Ross, Stephanie Houde, Mayank Agarwal, Fernando Martinez, John Richards, Kartik Talamadupula, and Justin D Weisz. 2022. Drink- ing Chai with Your (AI) Programming Partner: A Design Fiction about Gener- ative AI for Software Engineering. HAI-GEN Workshop at IUI 2022: 3rd Work- shop on Human-AI Co-Creation with Generative Models (2022). https://hai- gen.github.io/2022/",
        "type": "NarrativeText"
    },
    {
        "element_id": "de266c74-66d3-4729-b851-0db02d9f1c43",
        "metadata": {},
        "text": "[29] Bobbie Eicher, Kathryn Cunningham, Sydni Peterson Marissa Gonzales, and Ashok Goel. 2017. Toward mutual theory of mind as a foundation for co-creation. In International Conference on Computational Creativity, Co-Creation Workshop. [30] Stephen M Fiore, Eduardo Salas, and Janis A Cannon-Bowers. 2001. Group dynamics and shared mental model development. How people evaluate others in organizations 234 (2001).",
        "type": "NarrativeText"
    },
    {
        "element_id": "2a5a28ae-bb2f-40b2-aec5-dced896675b4",
        "metadata": {},
        "text": "[31] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. 1995. Design patterns: elements of reusable object-oriented software. Addison-Wesley. [32] GitHub, Inc. 2022. GitHub copilot \u00b7 your AI pair programmer. Retrieved August",
        "type": "NarrativeText"
    },
    {
        "element_id": "057ca225-6ac6-4096-a4a3-541e4a30b90b",
        "metadata": {},
        "text": "[53] Sandra R Murillo and J Alfredo S\u00e1nchez. 2014. Empowering interfaces for system administrators: Keeping the command line in mind when designing GUIs. In Proceedings of the XV International Conference on Human Computer Interaction. 1\u20134.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0e7520ab-3bdb-44af-9d01-f2cd3f68dba2",
        "metadata": {},
        "text": "5, 2022 from https://github.com/features/copilot/",
        "type": "Title"
    },
    {
        "element_id": "0f30d365-655b-4f6e-882a-34a09bb4822d",
        "metadata": {},
        "text": "[54] Elizabeth D Mynatt and Gerhard Weber. 1994. Nonvisual presentation of graph- ical user interfaces: contrasting two approaches. In Proceedings of the SIGCHI conference on Human factors in computing systems. 166\u2013172.",
        "type": "NarrativeText"
    },
    {
        "element_id": "82f2d05e-88d3-479f-8286-a325ab8ac03c",
        "metadata": {},
        "text": "[33] Amelia Glaese, Nat McAleese, Maja Tr\u0119bacz, John Aslanides, Vlad Firoiu, Timo Ewalds, Maribeth Rauh, Laura Weidinger, Martin Chadwick, Phoebe Thacker, Lucy Campbell-Gillingham, Jonathan Uesato, Po-Sen Huang, Ramona Comanescu, Fan Yang, Abigail See, Sumanth Dathathri, Rory Greig, Charlie Chen, Doug Fritz, Jaume Sanchez Elias, Richard Green, So\u0148a Mokr\u00e1, Nicholas Fernando, Boxi Wu, Rachel Foley, Susannah Young, Iason Gabriel, William Isaac, John Mellor, Demis Hassabis, Koray Kavukcuoglu, Lisa Anne Hendricks, and Geoffrey Irving. 2022. Improving alignment of dialogue agents via targeted human judgements. https://arxiv.org/abs/2209.14375",
        "type": "NarrativeText"
    },
    {
        "element_id": "e3a01ebe-4e78-41c5-8111-4481e8abfbca",
        "metadata": {},
        "text": "[55] Alok Mysore and Philip J Guo. 2017. Torta: Generating mixed-media gui and command-line app tutorials using operating-system-wide activity tracing. In Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology. 703\u2013714.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f33168d7-96df-43ae-9359-b5fc074751b5",
        "metadata": {},
        "text": "[56] C. Nass and Y. Moon. 2000. Machines and Mindlessness: Social Responses to",
        "type": "NarrativeText"
    },
    {
        "element_id": "6444ca68-8773-4b19-ab25-e321af3031c9",
        "metadata": {},
        "text": "Computers. Journal of Social Issues 56, 1 (2000), 81\u2013103.",
        "type": "Title"
    },
    {
        "element_id": "168b2fb2-7bef-41bd-8ce6-92dd054be077",
        "metadata": {},
        "text": "ChatGPT writes code, but won\u2019t replace devel- Retrieved 20-Jan-2023 from https:",
        "type": "NarrativeText"
    },
    {
        "element_id": "07397b22-408c-4eba-8995-2d5df624a465",
        "metadata": {},
        "text": "[34] Stephanie Glen. 2022.",
        "type": "Title"
    },
    {
        "element_id": "32bee7d3-ec48-4d68-a46a-eb305c9ce7d1",
        "metadata": {},
        "text": "[57] Nhan Nguyen and Sarah Nadi. 2022. An Empirical Evaluation of GitHub Copi- lot\u2019s Code Suggestions. In 2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR). IEEE, 1\u20135.",
        "type": "NarrativeText"
    },
    {
        "element_id": "89cebd5a-d8f7-40e1-a1f1-50e5aa536d38",
        "metadata": {},
        "text": "TechTarget",
        "type": "Title"
    },
    {
        "element_id": "cb71c298-fdc0-4532-9474-c969d5734ea5",
        "metadata": {},
        "text": "opers. //www.techtarget.com/searchsoftwarequality/news/252528379/ChatGPT- writes-code-but-wont-replace-developers",
        "type": "Title"
    },
    {
        "element_id": "a59ed64e-229c-480b-9b13-97d4d52a1580",
        "metadata": {},
        "text": "(14 12 2022).",
        "type": "UncategorizedText"
    },
    {
        "element_id": "3da23adf-013b-485d-a96a-96ccf6950652",
        "metadata": {},
        "text": "[58] Martin Nordio, H Estler, Carlo A Furia, Bertrand Meyer, et al. 2011. Collaborative software development on the web. arXiv preprint arXiv:1105.0768 (2011). [59] Maxwell Nye, Anders Andreassen, Guy Gur-Ari, Henryk Witold Michalewski, Ja- cob Austin, David Bieber, David Martin Dohan, Aitor Lewkowycz, Maarten Paul Bosma, David Luan, Charles Sutton, and Augustus Odena. 2021. Show Your Work: Scratchpads for Intermediate Computation with Language Models. https://arxiv.org/abs/2112.00114.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d79b646e-5e86-47e7-bbb3-77d24f79bd72",
        "metadata": {},
        "text": "[35] Samuel Holmes, Anne Moorhead, Raymond Bond, Huiru Zheng, Vivien Coates, and Mike McTear. 2018. WeightMentor: a new automated chatbot for weight loss maintenance. In Proceedings of the 32nd International BCS Human Computer Interaction Conference 32. 1\u20135.",
        "type": "NarrativeText"
    },
    {
        "element_id": "93e3f677-1743-4ff3-ad4f-22e02a5e8f01",
        "metadata": {},
        "text": "[36] Xing Hu, Ge Li, Xin Xia, David Lo, and Zhi Jin. 2020. Deep code comment generation with hybrid lexical and syntactical information. Empirical Software Engineering 25, 3 (2020), 2179\u20132217.",
        "type": "NarrativeText"
    },
    {
        "element_id": "06b56fae-af33-4d68-8968-052b5c57f66d",
        "metadata": {},
        "text": "[60] OpenAI. 2022. ChatGPT: Optimizing Language Models for Dialogue. OpenAI Blog (30 11 2022). Retrieved 20-Jan-2023 from https://openai.com/blog/chatgpt/ [61] Long Ouyang, Jeff Wu, Xu Jiang, Diogo Almeida, Carroll L. Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, John Schulman, Jacob Hilton, Fraser Kelton, Luke Miller, Maddie Simens, Amanda Askell, Peter Welinder, Paul Christiano, Jan Leike, and Ryan Lowe. 2022. Training language models to follow instructions with human feedback. https://arxiv. org/abs/2203.02155",
        "type": "NarrativeText"
    },
    {
        "element_id": "85cc3436-d8bd-4428-8497-7c548c43932f",
        "metadata": {},
        "text": "[37] Edwin L Hutchins, James D Hollan, and Donald A Norman. 1985. Direct manip-",
        "type": "UncategorizedText"
    },
    {
        "element_id": "180832b3-9c3b-4723-b361-ee67fd088efc",
        "metadata": {},
        "text": "ulation interfaces. Human\u2013computer interaction 1, 4 (1985), 311\u2013338.",
        "type": "Title"
    },
    {
        "element_id": "fc009b16-e3c8-44f4-bc8d-174bc9a919da",
        "metadata": {},
        "text": "[38] Srinivasan Iyer, Ioannis Konstas, Alvin Cheung, and Luke Zettlemoyer. 2016. Summarizing source code using a neural attention model. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). 2073\u20132083.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c87f7ad9-c9c8-4365-9792-917a6866e4fe",
        "metadata": {},
        "text": "[39] Andreas Jedlitschka and Markus Nick. 2003. Software Engineering Knowledge",
        "type": "NarrativeText"
    },
    {
        "element_id": "b07793d4-a757-47cb-879d-9a8411b1f1ac",
        "metadata": {},
        "text": "[62] Peter Pirolli and Stuart Card. 1999. Information foraging. Psychological review",
        "type": "Title"
    },
    {
        "element_id": "4f4ee118-b2fe-4e64-9708-c6dcb0ceeefd",
        "metadata": {},
        "text": "Repositories. Springer Berlin Heidelberg, Berlin, Heidelberg, 55\u201380.",
        "type": "Title"
    },
    {
        "element_id": "df978ca2-12e4-4fd9-96f7-9cec84b08b0c",
        "metadata": {},
        "text": "Research: Quantifying github copilot\u2019s impact https://github.blog/2022-09-07-",
        "type": "NarrativeText"
    },
    {
        "element_id": "bc01f597-54c1-4966-a50d-869026b12411",
        "metadata": {},
        "text": "[40] Eirini Kalliamvakou. 2022.",
        "type": "Title"
    },
    {
        "element_id": "6dca51d1-156e-4570-857f-986b2b37e1d5",
        "metadata": {},
        "text": "106, 4 (1999), 643.",
        "type": "UncategorizedText"
    },
    {
        "element_id": "13b9338a-a015-48ff-a530-1d4da4c49e91",
        "metadata": {},
        "text": "[63] Larry Press. 1990. Personal computing: Windows, DOS and the MAC. Commun.",
        "type": "NarrativeText"
    },
    {
        "element_id": "6ba9d504-1e89-4a89-8599-92dd38636cff",
        "metadata": {},
        "text": "on developer productivity and happiness. research-quantifying-github-copilots-impact-on-developer-productivity- and-happiness/",
        "type": "Title"
    },
    {
        "element_id": "acedf9f6-15aa-4e4d-bd59-d06b22d94a4f",
        "metadata": {},
        "text": "ACM 33, 11 (1990), 19\u201326.",
        "type": "UncategorizedText"
    },
    {
        "element_id": "0115ead7-f17a-4790-a797-03d733a18be7",
        "metadata": {},
        "text": "[64] Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya",
        "type": "Title"
    },
    {
        "element_id": "d6aebb4e-bb9a-4231-9bb4-89c6ae850005",
        "metadata": {},
        "text": "Sutskever, et al. 2019. Language Models are Unsupervised Multitask Learners.",
        "type": "NarrativeText"
    },
    {
        "element_id": "768af053-04ff-428a-bdff-d75ed87ccce1",
        "metadata": {},
        "text": "[41] Anna Kantosalo et al. 2019. Human-Computer Co-Creativity: Designing, Evalu- ating and Modelling Computational Collaborators for Poetry Writing. (2019). [42] Sandeep Kaur Kuttal, Bali Ong, Kate Kwasny, and Peter Robe. 2021. Trade- Offs for Substituting a Human with an Agent in a Pair Programming Context: The Good, the Bad, and the Ugly. In Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems (Yokohama, Japan) (CHI \u201921). Association for Computing Machinery, New York, NY, USA, Article 243, 20 pages.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a2c3314b-b835-4c28-b433-11c227a68fcb",
        "metadata": {},
        "text": "[65] Alvin Rajkomar, Jeffrey Dean, and Isaac Kohane. 2019. Machine learning in medicine. New England Journal of Medicine 380, 14 (2019), 1347\u20131358.",
        "type": "NarrativeText"
    },
    {
        "element_id": "bdefa76f-4980-48b3-b922-82cf64df0bdc",
        "metadata": {},
        "text": "[66] Aditya Ramesh, Prafulla Dhariwal, Alex Nichol, Casey Chu, and Mark Chen. 2022. Hierarchical text-conditional image generation with clip latents. arXiv preprint arXiv:2204.06125 (2022).",
        "type": "NarrativeText"
    },
    {
        "element_id": "522c7d9a-198c-4a4b-bcf0-5d63df1256a2",
        "metadata": {},
        "text": "[67] B. Reeves and C.I. Nass. 1996. The Media Equation: How People Treat Computers, Television, and New Media Like Real People and Places. CSLI Publications. [68] Mawarny Md Rejab, James Noble, and George Allan. 2014. Distributing Expertise in Agile Software Development Projects. In 2014 Agile Conference. 33\u201336. [69] Jeba Rezwana and Mary Lou Maher. 2021. COFI: A Framework for Modeling",
        "type": "NarrativeText"
    },
    {
        "element_id": "07cb9ec0-dda0-4a3f-96db-131b1c7677a3",
        "metadata": {},
        "text": "[43] Lauramaria Laine. 2021. Exploring Advertising Creatives\u2019 Attitudes Towards",
        "type": "NarrativeText"
    },
    {
        "element_id": "18a106ab-111b-4cad-9002-e34ad81da56e",
        "metadata": {},
        "text": "Human-AI Collaboration. (2021).",
        "type": "Title"
    },
    {
        "element_id": "1a3c0c66-9d51-41f7-ae25-9e7182e73e23",
        "metadata": {},
        "text": "[44] Yujia Li, David Choi, Junyoung Chung, Nate Kushman, Julian Schrittwieser, R\u00e9mi Leblond, Tom Eccles, James Keeling, Felix Gimeno, Agustin Dal Lago, and et al. 2022. Competition-level code generation with AlphaCode. https: //arxiv.org/abs/2203.07814",
        "type": "NarrativeText"
    },
    {
        "element_id": "1e815095-f1cb-46ce-a5a4-3128924ace56",
        "metadata": {},
        "text": "Interaction in Human-AI Co-Creative Systems.. In ICCC. 444\u2013448.",
        "type": "Title"
    },
    {
        "element_id": "bdb6fbf9-de38-40f0-b9d1-f605cf035f2d",
        "metadata": {},
        "text": "[70] Charles H. Rich and Richard C. Waters. 1990. The Programmer\u2019s Apprentice.",
        "type": "NarrativeText"
    },
    {
        "element_id": "1b42971a-c41c-4165-a07d-d40cc581b4b2",
        "metadata": {},
        "text": "[45] Yaosheng Lou and Qi Sun. 2021. Over-reliance on database: A case study of using web of science. Human Behavior and Emerging Technologies 3, 3 (2021), 454\u2013459.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a77e0dce-2845-4f70-8b56-45b6f059a5da",
        "metadata": {},
        "text": "Addison-Wesley Publishing Company, Reading, MA.",
        "type": "Title"
    },
    {
        "element_id": "527525cc-2e86-4ba3-8d81-113b8dcad1f7",
        "metadata": {},
        "text": "[71] Peter Robe and Sandeep Kaur Kuttal. 2022. Designing PairBuddy\u2014A Conver- sational Agent for Pair Programming. ACM Transactions on Computer-Human Interaction (TOCHI) 29, 4 (2022), 1\u201344.",
        "type": "NarrativeText"
    },
    {
        "element_id": "5f099bda-4bd6-4da6-8bad-8ba39d8d47c3",
        "metadata": {},
        "text": "[46] David Lyell and Enrico Coiera. 2017. Automation bias and verification complex- ity: a systematic review. Journal of the American Medical Informatics Association 24, 2 (2017), 423\u2013431.",
        "type": "NarrativeText"
    },
    {
        "element_id": "06f7afc8-4c36-4283-99f6-ce7fa4d70392",
        "metadata": {},
        "text": "[72] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bj\u00f6rn Ommer. 2022. High-resolution image synthesis with latent diffusion models. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recogni- tion. 10684\u201310695.",
        "type": "NarrativeText"
    },
    {
        "element_id": "3cd2e242-6351-4bbe-a815-28bf7670d736",
        "metadata": {},
        "text": "[47] Wendy E Mackay and Anne-Laure Fayard. 1997. HCI, natural science and design: a framework for triangulation across disciplines. In Proceedings of the 2nd conference on Designing interactive systems: processes, practices, methods, and techniques. 223\u2013234.",
        "type": "NarrativeText"
    },
    {
        "element_id": "dbec8023-cd77-49f9-bdde-8bc718c653ec",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "b1849134-9f02-4941-834a-f1611f130b65",
        "metadata": {},
        "text": "510",
        "type": "UncategorizedText"
    },
    {
        "element_id": "b6a22543-cf70-4dec-8746-104f0b4ffb81",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "48a906a1-8914-45cb-a3ee-05c23aab2dd8",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "b8b2f256-860c-439a-9e5b-c042d8817af2",
        "metadata": {},
        "text": "Need. In Advances in Neural Information Processing Systems, I. Guyon, U. Von Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (Eds.), Vol. 30. Curran Associates, Inc. https://proceedings.neurips.cc/paper/ 2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf",
        "type": "NarrativeText"
    },
    {
        "element_id": "cf8f82cc-be3c-4f60-83ac-7a54b937635e",
        "metadata": {},
        "text": "[73] Steven Ross, Elizabeth Brownholtz, and Robert Armes. 2004. A Multiple- Application Conversational Agent. In Proceedings of the 9th International Con- ference on Intelligent User Interfaces (Funchal, Madeira, Portugal) (IUI \u201904). Asso- ciation for Computing Machinery, New York, NY, USA, 319\u2013321.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ffb643f0-c56f-4934-bda1-219499e6bdec",
        "metadata": {},
        "text": "[97] Yao Wan, Zhou Zhao, Min Yang, Guandong Xu, Haochao Ying, Jian Wu, and Philip S Yu. 2018. Improving automatic source code summarization via deep rein- forcement learning. In Proceedings of the 33rd ACM/IEEE international conference on automated software engineering. 397\u2013407.",
        "type": "NarrativeText"
    },
    {
        "element_id": "2720f76f-027a-4438-8975-e3d341282433",
        "metadata": {},
        "text": "[74] Steven Ross, Elizabeth Brownholtz, and Robert Armes. 2004. Voice User Interface Principles for a Conversational Agent. In Proceedings of the 9th International Conference on Intelligent User Interfaces (Funchal, Madeira, Portugal) (IUI \u201904). Association for Computing Machinery, New York, NY, USA, 364\u2013365.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0d674c49-876f-4d9f-b1d8-3827346c616d",
        "metadata": {},
        "text": "[75] Baptiste Roziere, Marie-Anne Lachaux, Lowik Chanussot, and Guillaume Lample. 2020. Unsupervised Translation of Programming Languages. In Advances in Neural Information Processing Systems, H. Larochelle, M. Ranzato, R. Hadsell, M.F. Balcan, and H. Lin (Eds.), Vol. 33. Curran Associates, Inc., 20601\u201320611.",
        "type": "NarrativeText"
    },
    {
        "element_id": "24c3ad52-d5cb-4df5-908b-688700706761",
        "metadata": {},
        "text": "[98] April Yi Wang, Dakuo Wang, Jaimie Drozdal, Michael Muller, Soya Park, Justin D Weisz, Xuye Liu, Lingfei Wu, and Casey Dugan. 2022. Documentation Matters: Human-Centered AI System to Assist Data Science Code Documentation in Computational Notebooks. ACM Transactions on Computer-Human Interaction 29, 2 (2022), 1\u201333.",
        "type": "NarrativeText"
    },
    {
        "element_id": "22012c9a-1c43-4c6a-a2c0-82a4cf77c992",
        "metadata": {},
        "text": "In Structures of Social Action: Studies in Conversation Analysis, John Heritage and J. Maxwell Atkinson (Eds.). Cambridge University Press, Cambridge, 2\u201327.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4a73fd55-105b-4f94-9ca9-5cbf420a8918",
        "metadata": {},
        "text": "[76] Harvey Sacks. 1984. Notes on methodology.",
        "type": "NarrativeText"
    },
    {
        "element_id": "97c225da-7fa9-481e-a836-b2ec736ca04f",
        "metadata": {},
        "text": "[99] Dakuo Wang, Justin D Weisz, Michael Muller, Parikshit Ram, Werner Geyer, Casey Dugan, Yla Tausczik, Horst Samulowitz, and Alexander Gray. 2019. Human-AI collaboration in data science: Exploring data scientists\u2019 perceptions of automated AI. Proceedings of the ACM on Human-Computer Interaction 3, CSCW (2019), 1\u201324.",
        "type": "NarrativeText"
    },
    {
        "element_id": "36b73520-31d1-4682-91b6-a72f85f5d801",
        "metadata": {},
        "text": "[77] Nithya Sambasivan and Rajesh Veeraraghavan. 2022. The Deskilling of Domain Expertise in AI Development. In CHI Conference on Human Factors in Computing Systems. 1\u201314.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c8fddeda-9f8a-43a4-95b1-d7e21ac52c50",
        "metadata": {},
        "text": "[100] Qiaosi Wang, Koustuv Saha, Eric Gregori, David Joyner, and Ashok Goel. 2021. Towards mutual theory of mind in human-ai interaction: How language reflects what students perceive about a virtual teaching assistant. In Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems. 1\u201314.",
        "type": "NarrativeText"
    },
    {
        "element_id": "5e972c39-2dae-4025-b6d6-227fab83841d",
        "metadata": {},
        "text": "[78] Harini Sampath, Alice Merrick, and Andrew Macvean. 2021. Accessibility of command line interfaces. In Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems. 1\u201310.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a4b7da43-e296-4ed0-bddf-d14841495326",
        "metadata": {},
        "text": "[79] Matthias Scheutz, Scott A DeLoach, and Julie A Adams. 2017. A framework for developing and using shared mental models in human-agent teams. Journal of Cognitive Engineering and Decision Making 11, 3 (2017), 203\u2013224.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ebffd0c7-413a-4d62-90d8-f496e4758dd7",
        "metadata": {},
        "text": "[101] Jeremy Warner and Philip J Guo. 2017. Codepilot: Scaffolding end-to-end collaborative software development for novice programmers. In Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems. 1136\u20131141.",
        "type": "NarrativeText"
    },
    {
        "element_id": "22561c6f-6d69-496d-befa-66f7b8a44e88",
        "metadata": {},
        "text": "[80] Isabella Seeber, Eva Bittner, Robert O Briggs, Triparna De Vreede, Gert-Jan De Vreede, Aaron Elkins, Ronald Maier, Alexander B Merz, Sarah Oeste-Rei\u00df, Nils Randrup, et al. 2020. Machines as teammates: A research agenda on AI in team collaboration. Information & management 57, 2 (2020), 103174.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4a2a74b7-c598-4c04-9816-761f20b5fd08",
        "metadata": {},
        "text": "[102] Justin D Weisz, Michael Muller, Stephanie Houde, John Richards, Steven I Ross, Fernando Martinez, Mayank Agarwal, and Kartik Talamadupula. 2021. Per- fection Not Required? Human-AI Partnerships in Code Translation. In 26th International Conference on Intelligent User Interfaces. 402\u2013412.",
        "type": "NarrativeText"
    },
    {
        "element_id": "e9c6e0df-9ef0-4d4d-8d78-7d1f974c8e6a",
        "metadata": {},
        "text": "[81] Shilad Sen, Werner Geyer, Michael Muller, Marty Moore, Beth Brownholtz, Eric Wilcox, and David R Millen. 2006. FeedMe: a collaborative alert filtering system. In Proceedings of the 2006 20th anniversary conference on Computer supported cooperative work. 89\u201398.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4e122e36-2b0c-425b-8200-0767f9363575",
        "metadata": {},
        "text": "[103] Justin D Weisz, Michael Muller, Steven I Ross, Fernando Martinez, Stephanie Houde, Mayank Agarwal, Kartik Talamadupula, and John T Richards. 2022. Bet- ter together? an evaluation of ai-supported code translation. In 27th International Conference on Intelligent User Interfaces. 369\u2013391.",
        "type": "NarrativeText"
    },
    {
        "element_id": "6e4aa7ad-b75e-46f5-a6de-f6c41fe7edcf",
        "metadata": {},
        "text": "[82] Ben Shneiderman. 2020. Human-centered artificial intelligence: Three fresh ideas. AIS Transactions on Human-Computer Interaction 12, 3 (2020), 109\u2013124.",
        "type": "NarrativeText"
    },
    {
        "element_id": "1429938f-1f55-4b45-90dd-2dfc03817d52",
        "metadata": {},
        "text": "[104] Joseph Weizenbaum. 1966. ELIZA \u2014 a computer program for the study of natural language communication between man and machine. Commun. ACM 9 (1966), 36\u201345.",
        "type": "NarrativeText"
    },
    {
        "element_id": "5ddf97c6-7697-4043-9e82-2fd80f504fd0",
        "metadata": {},
        "text": "[83] Ben Shneiderman. 2022. Human-Centered AI. Oxford University Press. [84] Kurt Shuster, Jing Xu, Mojtaba Komeili, Da Ju, Eric Michael Smith, Stephen Roller, Megan Ung, Moya Chen, Kushal Arora, Joshua Lane, et al. 2022. BlenderBot 3: a deployed conversational agent that continually learns to responsibly engage. arXiv preprint arXiv:2208.03188 (2022).",
        "type": "NarrativeText"
    },
    {
        "element_id": "f198147c-7ce1-463e-81fa-71eba43137be",
        "metadata": {},
        "text": "[105] Frank F Xu, Bogdan Vasilescu, and Graham Neubig. 2022. In-ide code generation from natural language: Promise and challenges. ACM Transactions on Software Engineering and Methodology (TOSEM) 31, 2 (2022), 1\u201347.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0fee796f-9688-4d37-a5c3-135a99e8ebd8",
        "metadata": {},
        "text": "[85] Michael Skirpan and Casey Fiesler. 2018. Ad empathy: A design fiction. In Proceedings of the 2018 ACM Conference on Supporting Groupwork. 267\u2013273.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a10b6fb0-556e-455b-96b5-b8c687efe7d5",
        "metadata": {},
        "text": "[106] Aditya Ankur Yadav, Ishan Garg, and Dr. Pratistha Mathur. 2019. PACT - Pro- gramming Assistant ChaTbot. In 2019 2nd International Conference on Intelligent Communication and Computational Techniques (ICCT). 131\u2013136.",
        "type": "NarrativeText"
    },
    {
        "element_id": "c27a2d28-d4b0-41c8-a051-66122f7d6bee",
        "metadata": {},
        "text": "IEEE Software 29, 3 (2012), 100\u2013101. https:",
        "type": "UncategorizedText"
    },
    {
        "element_id": "52af3c86-d895-4a36-99a1-b765a0874a31",
        "metadata": {},
        "text": "[86] Diomidis Spinellis. 2012. Git.",
        "type": "Title"
    },
    {
        "element_id": "dba01364-da75-4ee5-ab14-84971cf4ea98",
        "metadata": {},
        "text": "[107] Munazza Zaib, Quan Z. Sheng, and W. Zhang. 2020. A Short Survey of Pre- trained Language Models for Conversational AI-A New Age in NLP. Proceedings of the Australasian Computer Science Week Multiconference (2020).",
        "type": "NarrativeText"
    },
    {
        "element_id": "4b06ffb4-2774-4c0f-b7b7-4b9398fc5d24",
        "metadata": {},
        "text": "//doi.org/10.1109/MS.2012.61",
        "type": "UncategorizedText"
    },
    {
        "element_id": "74ca904d-ce4d-4adb-ba8f-0521462909da",
        "metadata": {},
        "text": "[87] Angie Spoto and Natalia Oleynik. 2017. Library of Mixed-Initiative Creative",
        "type": "NarrativeText"
    },
    {
        "element_id": "c58c8d9e-1489-4c66-b800-6d37cb158a93",
        "metadata": {},
        "text": "Interfaces. Retrieved 19-Jun-2021 from http://mici.codingconduct.cc/",
        "type": "NarrativeText"
    },
    {
        "element_id": "1b0ae91b-6c83-42e9-bedc-ab72ea5131f6",
        "metadata": {},
        "text": "[88] Ayushi Srivastava, Shivani Kapania, Anupriya Tuli, and Pushpendra Singh. 2021. Actionable UI Design Guidelines for Smartphone Applications Inclusive of Low-Literate Users. Proceedings of the ACM on Human-Computer Interaction 5, CSCW1 (2021), 1\u201330.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ff053592-fa16-4469-83b7-d1283f80ec62",
        "metadata": {},
        "text": "[108] Elaine Zibrowski, Lisa Shepherd, Kamran Sedig, Richard Booth, Candace Gibson, et al. 2018. Easier and faster is not always better: grounded theory of the impact of large-scale system transformation on the clinical work of emergency medicine nurses and physicians. JMIR Human Factors 5, 4 (2018), e11013.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a89656af-e460-4933-9b7d-6e0c4c119b9e",
        "metadata": {},
        "text": "[109] Albert Ziegler, Eirini Kalliamvakou, X. Alice Li, Andrew Rice, Devon Rifkin, Shawn Simister, Ganesh Sittampalam, and Edward Aftandilian. 2022. Produc- tivity Assessment of Neural Code Completion. In Proceedings of the 6th ACM SIGPLAN International Symposium on Machine Programming (San Diego, CA, USA) (MAPS 2022). Association for Computing Machinery, New York, NY, USA, 21\u201329. https://doi.org/10.1145/3520312.3534864",
        "type": "NarrativeText"
    },
    {
        "element_id": "c2f97627-6f7c-45e8-ba33-65765ab01708",
        "metadata": {},
        "text": "[89] Margaret-Anne Storey and Alexey Zagalsky. 2016. Disrupting developer produc- tivity one bot at a time. In Proceedings of the 2016 24th ACM SIGSOFT international symposium on foundations of software engineering. 928\u2013931.",
        "type": "NarrativeText"
    },
    {
        "element_id": "71cbd14e-79bf-48a8-8a34-c4d7acba0f95",
        "metadata": {},
        "text": "[90] Kartik Talamadupula. 2021. Applied AI matters: AI4Code: applying artificial",
        "type": "NarrativeText"
    },
    {
        "element_id": "479a090c-e88a-47fa-bdc5-31df6a3ebfc2",
        "metadata": {},
        "text": "intelligence to source code. AI Matters 7, 1 (2021), 18\u201320.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7f08f376-84c4-49f2-9dbc-a71715716fba",
        "metadata": {},
        "text": "[91] Romal Thoppilan, Daniel De Freitas, Jamie Hall, Noam Shazeer, Apoorv Kul- shreshtha, Heng-Tze Cheng, Alicia Jin, Taylor Bos, Leslie Baker, Yu Du, and https: et al. 2022. LAMDA: Language models for dialog applications. //arxiv.org/abs/2201.08239",
        "type": "NarrativeText"
    },
    {
        "element_id": "59c50369-5a47-4a51-b921-ae6a370760c1",
        "metadata": {},
        "text": "[92] Michele Tufano, Dawn Drain, Alexey Svyatkovskiy, Shao Kun Deng, and Neel Sundaresan. 2020. Unit Test Case Generation with Transformers and Focal Context. arXiv preprint arXiv:2009.05617 (2020).",
        "type": "NarrativeText"
    },
    {
        "element_id": "8c282317-56bf-4f69-b964-7bd1557335f8",
        "metadata": {},
        "text": "[93] Severi Uusitalo, Anna Kantosalo, Antti Salovaara, Tapio Takala, and Christian Guckelsberger. 2022. Co-creative Product Design with Interactive Evolutionary Algorithms: A Practice-Based Reflection. In International Conference on Compu- tational Intelligence in Music, Sound, Art and Design (Part of EvoStar). Springer, 292\u2013307.",
        "type": "NarrativeText"
    },
    {
        "element_id": "322283a8-8735-4506-b3da-65cecb2e33e0",
        "metadata": {},
        "text": "[94] Priyan Vaithilingam and Philip J Guo. 2019. Bespoke: Interactively synthesizing custom GUIs from command-line applications by demonstration. In Proceedings of the 32nd annual ACM symposium on user interface software and technology. 563\u2013576.",
        "type": "NarrativeText"
    },
    {
        "element_id": "650c0c66-59a0-4d01-89ee-1fd77b92459a",
        "metadata": {},
        "text": "[95] Priyan Vaithilingam, Tianyi Zhang, and Elena L. Glassman. 2022. Expectation vs. Experience: Evaluating the Usability of Code Generation Tools Powered by Large Language Models. In Extended Abstracts of the 2022 CHI Conference on Human Factors in Computing Systems (New Orleans, LA, USA) (CHI EA \u201922). Association for Computing Machinery, New York, NY, USA, Article 332, 7 pages. https://doi.org/10.1145/3491101.3519665",
        "type": "NarrativeText"
    },
    {
        "element_id": "b9bdc18a-2c80-4a40-a4ad-c9d8fac3c03a",
        "metadata": {},
        "text": "[96] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141 ukasz Kaiser, and Illia Polosukhin. 2017. Attention is All you",
        "type": "NarrativeText"
    },
    {
        "element_id": "dc3fe658-3893-423f-967c-7718d9ff604c",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "bb9f0b94-97e0-4b38-98e9-a9e91a7986bf",
        "metadata": {},
        "text": "511",
        "type": "UncategorizedText"
    },
    {
        "element_id": "82325c92-8d36-4197-bccd-370354106c13",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "3a4172ca-3ecb-4a10-87af-dd93883c8743",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "3d05ca11-4eea-40a8-8342-d6427e9caaa3",
        "metadata": {},
        "text": "A SURVEY INSTRUMENTS A.1 Screening Survey The questions below were asked of prospective participants to understand their job role, Python experience, and familiarity with GitHub Copilot. The questions on Python experience were modeled after those used by Weisz et al. [103]. 1. Do you consider yourself primarily a...",
        "type": "NarrativeText"
    },
    {
        "element_id": "a0ddefad-5a1c-447e-b458-64d7dc25fe2c",
        "metadata": {},
        "text": "Before trying out the Programmer\u2019s Assistant, we would like to assess some of your expectations. We estimate that this survey will take 5 minutes.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d00936cd-729d-4c0c-ba54-941952d5f806",
        "metadata": {},
        "text": "By submitting this survey, you consent to participate in our study. If you would like to withdraw your con- sent, please email us at [removed].",
        "type": "NarrativeText"
    },
    {
        "element_id": "4772ba24-375b-4070-bde4-bb9f1ec0569c",
        "metadata": {},
        "text": "Data Scientist \u2022 Manager \u2022 Software Architect \u2022 Software Engineer \u2022 Machine Learning Engineer \u2022 Other: write-in",
        "type": "ListItem"
    },
    {
        "element_id": "b45f08e1-f226-4bac-95a5-191fa5182b96",
        "metadata": {},
        "text": "Thanks!",
        "type": "Title"
    },
    {
        "element_id": "cc158c3a-0655-43a1-ab2b-557ec523334b",
        "metadata": {},
        "text": "1. Based on your past experience using chatbots, please let us know how you would anticipate an AI chatbot serving as a programmer\u2019s assistant to perform. Do you expect it will: Scale: Not at all, A little, Somewhat, A great deal",
        "type": "ListItem"
    },
    {
        "element_id": "042d44fb-004f-4139-b829-9aa7d76b3005",
        "metadata": {},
        "text": "Be easy to use? \u2022 Understand your requests? \u2022 Provide high quality responses? \u2022 Help you to write better code? \u2022 Help you to write code more quickly? \u2022 Be enjoyable to use? 2. Any other expectations? Open-ended response",
        "type": "ListItem"
    },
    {
        "element_id": "33dde9ce-8a71-4fa7-bfa4-7e04fc57442d",
        "metadata": {},
        "text": "2. To what extent are you familiar with Python?",
        "type": "ListItem"
    },
    {
        "element_id": "856e74b5-fe8e-4b72-8108-769f3c5cf46e",
        "metadata": {},
        "text": "I am not familiar with Python \u2022 I have < 1 year of experience with Python \u2022 I have 1-3 years experience with Python \u2022 I have 3+ years of experience with Python 3. How recently have you written Python code?",
        "type": "ListItem"
    },
    {
        "element_id": "d64f8c6c-dad3-4b37-bed7-d044475fc79b",
        "metadata": {},
        "text": "Within the past month \u2022 Within the past year \u2022 Within the past 5 years \u2022 Have not written Python code within the past 5 years",
        "type": "ListItem"
    },
    {
        "element_id": "0b65bf4f-2631-4d3b-98e0-12039ae163dc",
        "metadata": {},
        "text": "A.3 Post-task Survey The questions below were asked after a participant used the Pro- grammer\u2019s Assistant to complete the programming challenges. This survey took approximately 10-15 minutes to complete.",
        "type": "NarrativeText"
    },
    {
        "element_id": "edcc4880-0b09-4862-8f07-a9d0c82f60ca",
        "metadata": {},
        "text": "4. To what extent are you familiar with GitHub Copilot?",
        "type": "ListItem"
    },
    {
        "element_id": "c0eb9975-e7a7-4431-a6bf-159e7fd06823",
        "metadata": {},
        "text": "I am not familiar with Copilot \u2022 I\u2019ve seen demos and/or read about Copilot \u2022 I\u2019ve tried out Copilot \u2022 I\u2019ve used Copilot as a tool for my work",
        "type": "ListItem"
    },
    {
        "element_id": "76345fcb-55ba-4799-a065-74e7aaa9dda4",
        "metadata": {},
        "text": "A.3.1 Reflections.",
        "type": "Title"
    },
    {
        "element_id": "9366d62a-548a-4dfd-bb53-ccef2a66bda3",
        "metadata": {},
        "text": "1. Based on your experience using the Programmer\u2019s Assistant to complete the programming challenges in this study, how would you characterize the experience? Did you find that it: Scale: Not at all, A little, Somewhat, A great deal",
        "type": "ListItem"
    },
    {
        "element_id": "0d06cb12-8ff1-4d79-8e00-2d7467dc5fdd",
        "metadata": {},
        "text": "A.2 Pre-task Survey The questions below were asked before a participant used the Pro- grammer\u2019s Assistant to assess their expectations of a conversational programming assistant. This survey took approximately 5 minutes to complete and began with the instructions below:",
        "type": "NarrativeText"
    },
    {
        "element_id": "f20c275f-8ebe-4718-a519-3acb1f9c1d43",
        "metadata": {},
        "text": "Was easy to use? \u2022 Understand your requests? \u2022 Provided high quality responses? \u2022 Helped you to write better code? \u2022 Helped you to write code more quickly? \u2022 Provided an enjoyable experienced?",
        "type": "ListItem"
    },
    {
        "element_id": "69a612d4-8f6d-4771-ad4f-c9f86d608af9",
        "metadata": {},
        "text": "Hello! We are a team of researchers looking for feed- back on a prototype system we call the Program- mer\u2019s Assistant.",
        "type": "NarrativeText"
    },
    {
        "element_id": "24db949c-9449-4652-9a9a-49cf2673e02a",
        "metadata": {},
        "text": "2. To what extent did you view the Programmer\u2019s Assistant as: Scale: Not at all, A little, Somewhat, A great deal",
        "type": "ListItem"
    },
    {
        "element_id": "497bd0fc-d4bf-46e1-bfa6-bd6f471f8207",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant is an experiment in con- versational coding: it consists of a code editor in- tegrated with a chatbot that is able to converse in natural language to answer questions, generate code, and consult on existing code.",
        "type": "NarrativeText"
    },
    {
        "element_id": "03c7330e-5982-44fe-8e7a-e38860772cfd",
        "metadata": {},
        "text": "A tool \u2022 A reference guide \u2022 A content generator \u2022 A problem solver \u2022 A collaborator \u2022 A colleague \u2022 A coach \u2022 An advisor \u2022 A reviewer",
        "type": "ListItem"
    },
    {
        "element_id": "575cf3c8-f162-42ce-a47d-135749567cd0",
        "metadata": {},
        "text": "In this study, you will be asked to complete several programming tasks. We are not evaluating your programming skills on these tasks. Rather, we are interested in understanding how the Programmer\u2019s Assistant is able to help you accomplish those tasks. Your code and interactions with the assistant will be processed by a 3rd party AI model, so please do not include proprietary code or discuss company- confidential information. All data we collect in this study will be anonymized before it is published.",
        "type": "NarrativeText"
    },
    {
        "element_id": "45a8c147-b8f0-43d8-a3f5-7ebdead5aa42",
        "metadata": {},
        "text": "3. How important were these aspects of working with the Program- mer\u2019s Assistant: Scale: Not at all, A little, Somewhat, A great deal",
        "type": "ListItem"
    },
    {
        "element_id": "8d400681-9fa9-4fdd-bdbd-ee6436d43c8b",
        "metadata": {},
        "text": "Ability to ask followup questions on the same topic across",
        "type": "ListItem"
    },
    {
        "element_id": "3fe41265-a99c-4d77-8420-d8e5208c0769",
        "metadata": {},
        "text": "multiple conversational turns",
        "type": "Title"
    },
    {
        "element_id": "9541ddc7-321e-4d1d-b03c-fc5f6196aa62",
        "metadata": {},
        "text": "Ability to ask questions or make requests that reference selec-",
        "type": "ListItem"
    },
    {
        "element_id": "34479461-4de0-49ea-9c99-3aaae49b85eb",
        "metadata": {},
        "text": "tions in the code editor",
        "type": "Title"
    },
    {
        "element_id": "b14f1e72-4df2-494e-b5e8-bc45440643ae",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "97da5783-d74d-4b14-a8d6-797fd84dca1b",
        "metadata": {},
        "text": "512",
        "type": "UncategorizedText"
    },
    {
        "element_id": "5ab737f3-6f5c-4462-ab16-313ceeed200a",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "7e977821-b6c9-4efe-ae7d-1a5aa2663115",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "b1254b46-9ea5-41c0-80f9-71647373317a",
        "metadata": {},
        "text": "Ability to ask for alternate responses (Try Again) \u2022 Ability to clear the conversational context (Start Over)",
        "type": "ListItem"
    },
    {
        "element_id": "6c7cfa3c-fa8f-4a02-99d0-e4052277536b",
        "metadata": {},
        "text": "Listing 4: The Programmer\u2019s Assistant study tutorial \"\"\" TUTORIAL :",
        "type": "Title"
    },
    {
        "element_id": "14c24835-7d49-473e-9ec4-7746411b2b33",
        "metadata": {},
        "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76",
        "type": "UncategorizedText"
    },
    {
        "element_id": "e2d5bf06-9586-4a83-86fe-c55c3c595f63",
        "metadata": {},
        "text": "4. What stood out to you about the experience of using the Program- mers Assistant? For example, was anything good,bad, surprising, or notable? Open-ended response",
        "type": "ListItem"
    },
    {
        "element_id": "b2bab9b4-cb50-4768-94af-5525f08eea1c",
        "metadata": {},
        "text": "As a warmup activity , please work through the 10 Type or paste your results right exercises below . into the text and submit your responses when done .",
        "type": "NarrativeText"
    },
    {
        "element_id": "292e573e-557b-448c-aba0-b82e76ebacd1",
        "metadata": {},
        "text": "1) View the help page for the programmer ' s assistant by clicking on the question mark to the right of your email address at the top of the browser window .",
        "type": "ListItem"
    },
    {
        "element_id": "1dce7dcd-69e0-4f14-9dd0-38421a8c9565",
        "metadata": {},
        "text": "5. How would you compare using the Programmer\u2019s Assistant as a coding aide to searching the web (e.g. Google, Stack Overflow)? Open-ended response",
        "type": "ListItem"
    },
    {
        "element_id": "d4781840-65d0-4ea2-b702-375e694aee6a",
        "metadata": {},
        "text": "6. If you have used the commercial AI programming tool called GitHub Copilot, how would you compare it with using the Pro- grammer\u2019s Assistant? Open-ended response",
        "type": "ListItem"
    },
    {
        "element_id": "66df0c6e-eaa8-4cdc-b9eb-cfd233fccd6f",
        "metadata": {},
        "text": "2) Introduce yourself to the assistant . your name . For example : \" Hello .",
        "type": "ListItem"
    },
    {
        "element_id": "66df0c6e-eaa8-4cdc-b9eb-cfd233fccd6f",
        "metadata": {},
        "text": "2) Introduce yourself to the assistant . your name . For example : \" Hello .",
        "type": "ListItem"
    },
    {
        "element_id": "3496c98a-3b42-479e-b295-ea4d61360493",
        "metadata": {},
        "text": "My name is Stephanie .\"",
        "type": "NarrativeText"
    },
    {
        "element_id": "41579388-8f4f-44d7-bedd-0984a580380a",
        "metadata": {},
        "text": "Did it seem to understand ? :",
        "type": "NarrativeText"
    },
    {
        "element_id": "67854dae-4014-4133-8411-b1d0dea25941",
        "metadata": {},
        "text": "7. Having used the Programmer\u2019s Assistant, how did it compare with your initial expectations? Open-ended response",
        "type": "ListItem"
    },
    {
        "element_id": "235dbc00-a054-4fb9-96f9-2a7a8179cac1",
        "metadata": {},
        "text": "3) You can use the assistant to get help on how to accomplish particular programming tasks . Try it out ! For example : \" How do I read a csv file ?\" or : or : from a list ?\"",
        "type": "ListItem"
    },
    {
        "element_id": "e7c6af63-5d94-465c-9755-8163104ebfb9",
        "metadata": {},
        "text": "A.3.2 Value. 8. How valuable would the Programmer\u2019s Assistant be for your work if it could be added to your favorite development environment? Scale: (No value at all) 1 2 3 4 5 6 7 8 9 10 (An essential tool)",
        "type": "NarrativeText"
    },
    {
        "element_id": "2257faa0-b32f-4414-877f-8c5d2b94ba4a",
        "metadata": {},
        "text": "Feel free to try your own !",
        "type": "NarrativeText"
    },
    {
        "element_id": "e4f023e4-60d9-4931-bb65-5c59c14c2215",
        "metadata": {},
        "text": "9. Why?",
        "type": "ListItem"
    },
    {
        "element_id": "91852f56-21ef-457d-bdf5-561fe8e24f8f",
        "metadata": {},
        "text": "Did it successfully answer your questions ? :",
        "type": "NarrativeText"
    },
    {
        "element_id": "38a1c958-b5d5-43d4-be0b-4d067270eff4",
        "metadata": {},
        "text": "Open-ended response",
        "type": "Title"
    },
    {
        "element_id": "d1d0b8f4-7afd-4134-b570-113f8604a118",
        "metadata": {},
        "text": "4) The assistant can also write whole functions for you . Ask the assistant to write a factorial function . Paste the result below . For example : \" Write a function that returns the factorial of its input .\"",
        "type": "ListItem"
    },
    {
        "element_id": "11c9df5e-8582-48b5-8ce5-1130e90be68c",
        "metadata": {},
        "text": "10. How would the following changes impact the value of the Pro- grammer\u2019s Assistant? Scale: Less valuable, No change in value, More valuable",
        "type": "ListItem"
    },
    {
        "element_id": "925b9013-0217-40d1-ac15-f22b0517e1ad",
        "metadata": {},
        "text": "Eliminate the conversation and make the Programmer\u2019s Assis- tant behave more like a search box (e.g. without the conversational context).",
        "type": "ListItem"
    },
    {
        "element_id": "f93f0dbd-99ac-4308-9a36-8cfa680c16a0",
        "metadata": {},
        "text": "( tip - you can copy an inline response",
        "type": "NarrativeText"
    },
    {
        "element_id": "c3f7b322-72eb-47d5-8d1e-e16e58d680fa",
        "metadata": {},
        "text": "Result : ( in black ) by clicking on the associated copy icon )",
        "type": "NarrativeText"
    },
    {
        "element_id": "4cba8edc-ad9c-4f6c-9b95-3369c5001f8d",
        "metadata": {},
        "text": "Add buttons in the chat UI for common queries, such as \u201cwhat",
        "type": "ListItem"
    },
    {
        "element_id": "5b79af3c-6295-45b5-96a0-88df1be91371",
        "metadata": {},
        "text": "does this code do?\u201d or \u201cdocument this code.\u201d",
        "type": "NarrativeText"
    },
    {
        "element_id": "c3c6378a-c054-4229-8a00-f77c47b143e5",
        "metadata": {},
        "text": "Did it do it correctly ? :",
        "type": "NarrativeText"
    },
    {
        "element_id": "5738054a-2b46-4df5-806b-f08c28f047c1",
        "metadata": {},
        "text": "Have the Programmer\u2019s Assistant examine your code and make",
        "type": "ListItem"
    },
    {
        "element_id": "a2734437-c69e-41bf-a7f5-3fff458d1924",
        "metadata": {},
        "text": "proactive suggestions for improving it in the chat.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ce75f85a-f060-4578-8851-1516a7e62e46",
        "metadata": {},
        "text": "5) Select the code below and ask the system to describe what it does . You don 't need to copy and paste the code to the chat . assistant can see whatever is selected when you make a chat entry . Aside from the selection , the assistant does not monitor your activity in the code editor nor give unsolicited advice . For example : \" What does this code do ?\" def convert (n):",
        "type": "ListItem"
    },
    {
        "element_id": "12652555-9c99-4541-a07a-b92c03110e88",
        "metadata": {},
        "text": "Have the Programmer\u2019s Assistant examine your code and make proactive suggestions for improvements in comments inserted di- rectly into the code. 11. Do you have any other suggestions for how we could improve the experience of working with the Programmer\u2019s Assistant? Open-ended response",
        "type": "ListItem"
    },
    {
        "element_id": "367f438c-2b9f-4e82-a088-178f7242cf9d",
        "metadata": {},
        "text": "A.3.3 Demographics. 12. To which gender identity do you most identify?",
        "type": "NarrativeText"
    },
    {
        "element_id": "50574a41-1a36-4f87-ba32-40b4a9392427",
        "metadata": {},
        "text": "T = \"0123456789 ABCDEF \" q , r = divmod (n , 16) if q == 0:",
        "type": "UncategorizedText"
    },
    {
        "element_id": "3d2e7cbf-c3c4-4d52-94c6-4a002879d2fe",
        "metadata": {},
        "text": "Male \u2022 Female \u2022 Transgender Male \u2022 Transgender Female \u2022 Gender Variant/Non-conforming \u2022 Other: write-in \u2022 Prefer not to answer",
        "type": "ListItem"
    },
    {
        "element_id": "1075c99a-e2bb-4a13-98b8-cedef27d93ca",
        "metadata": {},
        "text": "return T[r]",
        "type": "Title"
    },
    {
        "element_id": "c1c4aef9-4e8b-4f60-9aae-9cba5d774a71",
        "metadata": {},
        "text": "else :",
        "type": "Title"
    },
    {
        "element_id": "06e73148-b204-43d5-af6a-d22d6c6ec044",
        "metadata": {},
        "text": "return convert (q) + T[r]",
        "type": "Title"
    },
    {
        "element_id": "7936d406-cd2a-488d-a726-8e28034f10c5",
        "metadata": {},
        "text": "\"\"\"",
        "type": "UncategorizedText"
    },
    {
        "element_id": "2b74814f-5de4-45c8-9a78-4a713a605270",
        "metadata": {},
        "text": "What did it say :",
        "type": "NarrativeText"
    },
    {
        "element_id": "ab6914f6-9eec-4553-819f-8507ae000fb8",
        "metadata": {},
        "text": "Was it right ? :",
        "type": "NarrativeText"
    },
    {
        "element_id": "179ed359-b99c-4451-b32a-440013b668ee",
        "metadata": {},
        "text": "6) Ask it to explain what the divmod line is doing . the conversation . For example : \" What is the divmod line doing ?\"",
        "type": "ListItem"
    },
    {
        "element_id": "a762c9ee-5792-4796-b61d-119bdc2e40c0",
        "metadata": {},
        "text": "B THE PROGRAMMER\u2019S ASSISTANT",
        "type": "Title"
    },
    {
        "element_id": "62e0ef0f-a738-4e77-a953-8b2598356a23",
        "metadata": {},
        "text": "TUTORIAL",
        "type": "Title"
    },
    {
        "element_id": "52798d57-4415-4a94-b581-89304de0e459",
        "metadata": {},
        "text": "The tutorial provided to study participants, like all the challenges, was presented as pre-loaded text in the code editor. Participants were encouraged to modify the text to record their results and submit it at the completion of the tutorial.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d4c7190d-84e6-4df7-990d-51c247031e7c",
        "metadata": {},
        "text": "What did it say ? :",
        "type": "NarrativeText"
    },
    {
        "element_id": "9b5ee058-c0f9-4152-a1fd-11b3fb4a2627",
        "metadata": {},
        "text": "Was that a good answer ? :",
        "type": "Title"
    },
    {
        "element_id": "0ab32496-15cf-48f1-af91-7e3c69c4d86a",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "d9b4ac52-fd56-472f-8557-34151472e36c",
        "metadata": {},
        "text": "513",
        "type": "UncategorizedText"
    },
    {
        "element_id": "03372a03-7bdc-4205-aa95-fcefaf3c7873",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "07c80a05-f24f-457b-a5d1-4b67c96bebab",
        "metadata": {},
        "text": "The Programmer\u2019s Assistant",
        "type": "Title"
    },
    {
        "element_id": "082b7064-45c6-49fd-a9ea-887f60af2046",
        "metadata": {},
        "text": "Trend \". \"\"\"",
        "type": "Title"
    },
    {
        "element_id": "825c18ac-42d1-4d60-9512-4d3b56d262ff",
        "metadata": {},
        "text": "7) See if the assistant remembers your name For example \" What ' s my name ?\"",
        "type": "ListItem"
    },
    {
        "element_id": "453e3a85-9cfe-426e-ac2a-dc8c2cf40a7a",
        "metadata": {},
        "text": "13 14",
        "type": "UncategorizedText"
    },
    {
        "element_id": "7b58d004-3613-4dd5-99ab-bf7fd2f713a2",
        "metadata": {},
        "text": "77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118",
        "type": "UncategorizedText"
    },
    {
        "element_id": "a0fdcd90-81dd-447f-8842-3adc03038b1d",
        "metadata": {},
        "text": "Did it ? :",
        "type": "NarrativeText"
    },
    {
        "element_id": "ae5a041b-d089-447f-a153-3ae0749bbb12",
        "metadata": {},
        "text": "Listing 7: Challenge 3: Creating documentation",
        "type": "Title"
    },
    {
        "element_id": "5a4f41a5-5205-4932-91a4-108f735ba045",
        "metadata": {},
        "text": "8) Click the \" try again \" button at the top of the chat . You should get a different answer . Try it a few times .",
        "type": "ListItem"
    },
    {
        "element_id": "4ba734eb-d1e5-41bd-880e-a39cb900f679",
        "metadata": {},
        "text": "\"\"\" Challenge #3 - Creating Documentation Document this function \"\"\" from collections import defaultdict import heapq as heap",
        "type": "NarrativeText"
    },
    {
        "element_id": "9ad477d8-830c-42e4-9e08-6733de2e2479",
        "metadata": {},
        "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27",
        "type": "UncategorizedText"
    },
    {
        "element_id": "b2ac83e6-8574-44cf-8340-97d78f6595c6",
        "metadata": {},
        "text": "Did it ever get your name right ?:",
        "type": "NarrativeText"
    },
    {
        "element_id": "91801467-fe9c-422a-b224-2d346249473d",
        "metadata": {},
        "text": "If the assistant gives you an answer that is obviously wrong or it claims to not know an answer that you think it should know , or you just want to see an alternate answer , it is worth it to give \" try again \" a shot .",
        "type": "NarrativeText"
    },
    {
        "element_id": "460a9c79-6641-4425-9797-508b24ed4ed0",
        "metadata": {},
        "text": "def analyze (G , startingNode ):",
        "type": "Title"
    },
    {
        "element_id": "8d85b487-7875-4a4e-861a-f0f318701de4",
        "metadata": {},
        "text": "visited = set () parentsMap = {} pq = [] nodeCosts = defaultdict ( lambda : float ( ' inf ') ) nodeCosts [ startingNode ] = 0 heap . heappush (pq , (0 , startingNode ))",
        "type": "NarrativeText"
    },
    {
        "element_id": "706f46cf-e905-4366-a4bb-d9e384d94c49",
        "metadata": {},
        "text": "9) Click the \" start over \" button at the top of the chat , and then enter another command to see if it remembers your name . For example \" What ' s my name ?\" Did it ? :",
        "type": "ListItem"
    },
    {
        "element_id": "0826c8f5-3729-43fa-b833-158f0abe6162",
        "metadata": {},
        "text": "while pq :",
        "type": "Title"
    },
    {
        "element_id": "d7b7b910-bdf6-47ca-81cb-84cc7c49e8c6",
        "metadata": {},
        "text": "_ , node = heap . heappop ( pq ) visited . add ( node )",
        "type": "NarrativeText"
    },
    {
        "element_id": "a466fc37-8a27-4fa0-ba91-ed62a98d4a9e",
        "metadata": {},
        "text": "for adjNode , weight in G[ node ]. items () :",
        "type": "Title"
    },
    {
        "element_id": "424d4b3d-d7a0-448b-a99e-e067f67dda42",
        "metadata": {},
        "text": "It should really have forgotten your name now , and no amount of \" trying again \" will get it right . You can \" start over \" if the assistant ever seems confused by , or stuck on , earlier parts of the conversation .",
        "type": "NarrativeText"
    },
    {
        "element_id": "7f1cb77e-e968-44ad-8ada-b952fe843e52",
        "metadata": {},
        "text": "if adjNode in visited :",
        "type": "NarrativeText"
    },
    {
        "element_id": "a9bc4d28-93c9-49e4-8ff8-06ef6aa05637",
        "metadata": {},
        "text": "continue",
        "type": "Title"
    },
    {
        "element_id": "66df824a-ffc8-4a8c-88e5-b497fe63db3b",
        "metadata": {},
        "text": "newCost = nodeCosts [ node ] + weight if nodeCosts [ adjNode ] > newCost :",
        "type": "NarrativeText"
    },
    {
        "element_id": "5b4c145b-47d8-48a3-b96f-a6ae061b3c1c",
        "metadata": {},
        "text": "parentsMap [ adjNode ] = node nodeCosts [ adjNode ] = newCost heap . heappush (pq , ( newCost ,",
        "type": "NarrativeText"
    },
    {
        "element_id": "c4015386-57df-4517-b0b0-4948decbab8e",
        "metadata": {},
        "text": "10) You can chat with the assistant on any topic you like to explore its functionality and capabilities further . See if you can stump it with a tough question ! Thanks !",
        "type": "ListItem"
    },
    {
        "element_id": "837df14c-fe9c-4461-93ed-fc533e8be578",
        "metadata": {},
        "text": "adjNode ) )",
        "type": "Title"
    },
    {
        "element_id": "51ffadb7-e67c-4309-9756-43f41ca4e60f",
        "metadata": {},
        "text": "return parentsMap , nodeCosts",
        "type": "Title"
    },
    {
        "element_id": "1c817a42-700b-4a33-b754-41d6cc8327fb",
        "metadata": {},
        "text": "28",
        "type": "UncategorizedText"
    },
    {
        "element_id": "b98149c0-b3a5-48bf-bb87-0425d06974e2",
        "metadata": {},
        "text": "Listing 8: Challenge 4: Testing",
        "type": "Title"
    },
    {
        "element_id": "ce2c48c8-abe1-417d-bce3-6c7e90daabc5",
        "metadata": {},
        "text": "When you are done , submit your results by clicking on the blue submit button and move on to the challenges !!! \"\"\"",
        "type": "NarrativeText"
    },
    {
        "element_id": "519297cb-2a4a-45ca-a496-149043503eb8",
        "metadata": {},
        "text": "\"\"\" Challenge #4 - Testing Create a unit test for this function \"\"\" def euclid (a , b): while b != 0:",
        "type": "NarrativeText"
    },
    {
        "element_id": "00ff4a43-1450-4d43-8f16-c603c0142e2c",
        "metadata": {},
        "text": "1 2 3 4 5 6 7 8 9 10",
        "type": "UncategorizedText"
    },
    {
        "element_id": "44c4ecb2-91ac-47b2-8905-43f1799b95e4",
        "metadata": {},
        "text": "C CHALLENGES Each of the study challenges was presented as text in the code editor. Participants completed their work in the code editor and then submitted it when finished. The prototype did not provide any ability to run or debug code and participants were encouraged to make their best attempt at solving each challenge.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4a2a2e52-b374-44e0-9910-f4843a3968dc",
        "metadata": {},
        "text": "(a , b) = (b , a % b )",
        "type": "UncategorizedText"
    },
    {
        "element_id": "aa1e82c7-bdd6-4aaf-8b3f-d7b26de74a49",
        "metadata": {},
        "text": "return a",
        "type": "NarrativeText"
    },
    {
        "element_id": "ad9f5a20-4637-461b-8a56-c886e71f25a1",
        "metadata": {},
        "text": "# Unit test for euclid function",
        "type": "Title"
    },
    {
        "element_id": "826d1a96-fe3a-4323-927e-5882686acfb3",
        "metadata": {},
        "text": "D PROGRAMMER\u2019S ASSISTANT PROMPT Listing 9 shows the initial prompt sent to Codex to configure it as a conversational agent. On subsequent exchanges, the prompt was augmented with a transcript of the user\u2019s requests and the assis- tant\u2019s responses. When the transcript length + initial prompt length + the new utterance length exceeded a threshold, we automatically deleted the earliest request-response pairs from the transcript until the sum fell below the threshold in order to leave room in the token allocation for a response.",
        "type": "NarrativeText"
    },
    {
        "element_id": "7142729f-0555-40c7-b9ac-2a28f39bdce5",
        "metadata": {},
        "text": "Listing 5: Challenge 1: Program generation",
        "type": "Title"
    },
    {
        "element_id": "4d1b066f-5894-448f-aade-075d21981770",
        "metadata": {},
        "text": "1 2 3 4 5 6 7",
        "type": "UncategorizedText"
    },
    {
        "element_id": "40e680ed-6ec0-4e3a-abfa-ac54666a65a1",
        "metadata": {},
        "text": "\"\"\" Challenge #1 - Program Generation (#1)",
        "type": "Title"
    },
    {
        "element_id": "46420440-1299-4a0b-9ce5-68679abd432b",
        "metadata": {},
        "text": "Write a \" Queue \" class in Python ; with the basic enqueue , dequeue and peek methods . \"\"\"",
        "type": "NarrativeText"
    },
    {
        "element_id": "c6ffc48c-dd9d-4a51-9ceb-22dce0c64a42",
        "metadata": {},
        "text": "Listing 6: Challenge 2: Program generation",
        "type": "Title"
    },
    {
        "element_id": "f9a9fe33-0256-4b46-831c-ef6789422dd1",
        "metadata": {},
        "text": "Listing 9: The Programmer\u2019s Assistant prompt This is a conversation with Socrates , an eager and helpful , but humble expert automatic AI software engineering assistant . Socrates will answer questions and write code to help the user develop programs , but doesn 't assign work to the user , quiz the user , or ask questions except for clarification . always presented bracketed in <CODE > ... </ CODE > delimiters indicating the language the code is written in .",
        "type": "NarrativeText"
    },
    {
        "element_id": "154f7380-2330-4e72-8f09-385a64eb0a14",
        "metadata": {},
        "text": "\"\"\" Challenge #2 - Program Generation (#2)",
        "type": "Title"
    },
    {
        "element_id": "80a50c4f-b986-4378-848a-c07f246ef2b8",
        "metadata": {},
        "text": "1 2 3 4 5 6 7 8 9 10 11 12",
        "type": "UncategorizedText"
    },
    {
        "element_id": "be87897e-5821-44d7-bfdb-2f1bb0940f01",
        "metadata": {},
        "text": "1 2 3 4 5 6 7 8 9 10 11 12",
        "type": "UncategorizedText"
    },
    {
        "element_id": "60cfece0-8e83-4da5-984f-838b4e9a1fc5",
        "metadata": {},
        "text": "Write a program to draw a scatter plot of the data in ' shampoo . csv ' and save it to ' shampoo . png '. The plot size should be 10 inches wide and 6 inches high . The csv file is not provided , but you can assume it will have 'Date ' and ' Sales ' columns . The Date column is the x - axis . The date string shown on the plot should be in the YYYY -MM - DD format . The Sales column is the y - axis . The graph should have the title \" Shampoo Sales",
        "type": "NarrativeText"
    },
    {
        "element_id": "835c12aa-ac14-4444-853e-bc866dbafb9b",
        "metadata": {},
        "text": "Code generated by Socrates is",
        "type": "NarrativeText"
    },
    {
        "element_id": "525bfeb8-ec6b-4dcc-839b-00420fa22511",
        "metadata": {},
        "text": "Socrates : Hello . I am Socrates . How can I help you ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "a4473ace-a4fd-4d85-b766-d1448e9f8f07",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "0800ec61-a8e7-4fee-9c0d-ede75557832e",
        "metadata": {},
        "text": "514",
        "type": "UncategorizedText"
    },
    {
        "element_id": "f7b8c090-5646-4125-9b1a-874d69b86aef",
        "metadata": {},
        "text": "IUI \u201923, March 27\u201331, 2023, Sydney, NSW, Australia",
        "type": "Title"
    },
    {
        "element_id": "940874f5-1a31-4a14-9b9a-6b63a47b6857",
        "metadata": {},
        "text": "Ross et al.",
        "type": "Title"
    },
    {
        "element_id": "cf0e6c6a-1255-4ab7-9cfb-5df4a91fcf00",
        "metadata": {},
        "text": "month, 4 (\u02dc9%) within the past year, 5 (12%) within the past 5 years, and 4 (\u02dc9%) had not written Python code within the past 5 years.",
        "type": "NarrativeText"
    },
    {
        "element_id": "4c22be8c-e989-4dc2-838d-4a71910b1b7e",
        "metadata": {},
        "text": "User : Please show me how to write a palindrome",
        "type": "NarrativeText"
    },
    {
        "element_id": "496dfbe4-17d2-4078-9292-29c461d7ae12",
        "metadata": {},
        "text": "13",
        "type": "UncategorizedText"
    },
    {
        "element_id": "ce88cd98-a498-415a-8b4d-f926b24a6d5c",
        "metadata": {},
        "text": "detection function in python .",
        "type": "Title"
    },
    {
        "element_id": "7ef8ee46-3225-4064-8ffb-10810903aeb7",
        "metadata": {},
        "text": "Socrates :I think you would do something like this : < CODE lang =\" python \">",
        "type": "NarrativeText"
    },
    {
        "element_id": "59209399-8280-454a-beb0-bb25ce85665f",
        "metadata": {},
        "text": "14 15 16 17 18 19",
        "type": "UncategorizedText"
    },
    {
        "element_id": "042eac61-1f53-4eb0-b08a-43f76fee3ed9",
        "metadata": {},
        "text": "is_Palindrome = s == s [:: -1]",
        "type": "Title"
    },
    {
        "element_id": "8f52503e-0ee4-47f2-9e57-8fd9695cf899",
        "metadata": {},
        "text": "Fam. Rec. NF 3+ 1-3 3+ 3+ < 1 < 1 1-3 3+ 1-3 1-3 3+ < 1 < 1 3+ 3+ < 1 3+ 1-3 1-3 3+ < 1 1-3 < 1 < 1 < 1 < 1 3+ NF 3+ 1-3 1-3 < 1 3+ 3+ 1-3 3+ 3+ 1-3 3+ NF 3+",
        "type": "UncategorizedText"
    },
    {
        "element_id": "bae1d80e-0ab1-47f9-8f2b-f89a1d2cb13f",
        "metadata": {},
        "text": "Gender Role",
        "type": "Title"
    },
    {
        "element_id": "c3b9777d-9a84-47cf-b1f0-881ce7071da4",
        "metadata": {},
        "text": "P 1 M 2 M 3 M 4 M 5 M 6 F F 7 F 8 9 F 10 GV/NC 11 F 12 M 13 F F 14 15 F 16 M F 17 18 F 19 M 20 M 21 M 22 NR 23 M 24 F 25 M F 26 27 F 28 M F 29 30 F 31 M F 32 F 33 34 F 35 M 36 M 37 M 38 M F 39 F 40 41 F 42 M",
        "type": "UncategorizedText"
    },
    {
        "element_id": "4d182fc4-6886-48ac-9782-13e1d1fd1ce8",
        "metadata": {},
        "text": "</ CODE > User : Can you explain how that solves the problem ? Socrates :I believe that a palindrome is a string that reads the same forwards and backwards . s [:: -1] results in the reversed string . If the string is equal to its reversed self , then it is a palindrome , so the equality would hold True .",
        "type": "NarrativeText"
    },
    {
        "element_id": "9a0a8550-0a63-4d70-a464-7c90398603a9",
        "metadata": {},
        "text": "Marketer Researcher / Scientist Software Engineer Researcher / Scientist Researcher / Scientist Software Engineer Software Engineer Software Engineer Software Engineer Business Analyst Software Engineer Researcher / Scientist Manager Software Engineer Researcher / Scientist Researcher / Scientist Software Engineer Researcher / Scientist Software Engineer Machine Learning Engineer Software Architect Software Engineer Software Engineer Software Architect Software Engineer Software Engineer Software Engineer Researcher / Scientist Software Engineer Data Scientist Data Scientist Other (Consultant) Other (Systems Test Engineer) Researcher / Scientist Software Engineer Software Architect Researcher / Scientist Software Engineer Software Engineer Researcher / Scientist Researcher / Scientist Software Engineer",
        "type": "UncategorizedText"
    },
    {
        "element_id": "f9a9a540-9291-4dd2-b084-dc42211d7b30",
        "metadata": {},
        "text": "> 5 Yr Mo Mo Mo Mo Yr Mo Mo Mo Mo Mo Mo Mo >5 Yr Mo Mo Yr Mo Mo Mo Yr 5 Yr Mo 5 Yr 5 Yr 5 Yr 5 Yr Mo > 5 Yr Mo Mo Mo Mo Mo Mo Mo Mo Mo Mo Mo > 5 Yr Mo",
        "type": "UncategorizedText"
    },
    {
        "element_id": "7fa2d5a3-dedc-4f74-9242-f5aa47028f65",
        "metadata": {},
        "text": "User : Thanks ! Socrates : You ' re welcome ! User : Now could you show me how to write a",
        "type": "NarrativeText"
    },
    {
        "element_id": "d3ac46f0-b53a-4c9a-b8d8-54ba5a41041a",
        "metadata": {},
        "text": "20 21 22",
        "type": "UncategorizedText"
    },
    {
        "element_id": "c6f194b8-9786-417d-83e9-8b7a7c2195c0",
        "metadata": {},
        "text": "factorial function in Python ?",
        "type": "Title"
    },
    {
        "element_id": "48c52d19-4090-46c3-a1b0-a0913e779f0c",
        "metadata": {},
        "text": "Socrates :I will give it a try . < CODE lang =\" python \"> def fact (n):",
        "type": "NarrativeText"
    },
    {
        "element_id": "52354a85-5334-458b-ad03-c5d4bb6f5236",
        "metadata": {},
        "text": "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61",
        "type": "UncategorizedText"
    },
    {
        "element_id": "efcdc2dd-8651-4eb7-9a13-8ec6bc6f6eb4",
        "metadata": {},
        "text": "if n ==0:",
        "type": "UncategorizedText"
    },
    {
        "element_id": "ec4461a5-af72-41bd-aef9-a810656baa89",
        "metadata": {},
        "text": "return 1",
        "type": "Title"
    },
    {
        "element_id": "536447b4-e473-4493-8569-bd902d2faf56",
        "metadata": {},
        "text": "else :",
        "type": "Title"
    },
    {
        "element_id": "210589a8-a55e-4299-ba83-1f027e3d0155",
        "metadata": {},
        "text": "return n* fact (n -1)",
        "type": "Title"
    },
    {
        "element_id": "1f936940-39b5-4234-8203-cd9ff12edda3",
        "metadata": {},
        "text": "</ CODE > User : Document this function . Socrates : Ok . < CODE lang =\" python \"> def fact (n):",
        "type": "NarrativeText"
    },
    {
        "element_id": "4b93996e-6cbc-4bb0-89f3-ac3f9f292973",
        "metadata": {},
        "text": "How 's this ?",
        "type": "NarrativeText"
    },
    {
        "element_id": "259b437b-4189-4887-a19b-c1caa8560dc7",
        "metadata": {},
        "text": "\"\"\"",
        "type": "UncategorizedText"
    },
    {
        "element_id": "a23475be-577d-436e-aa8d-24f2c6912f2c",
        "metadata": {},
        "text": "Compute the factorial of the given number",
        "type": "NarrativeText"
    },
    {
        "element_id": "910ef26b-ac14-4567-9783-bb65f6675827",
        "metadata": {},
        "text": "Parameters ---------- n : number",
        "type": "Title"
    },
    {
        "element_id": "2224ea0a-673a-444a-bce7-487165113364",
        "metadata": {},
        "text": "the input parameter , an integer >= 0",
        "type": "NarrativeText"
    },
    {
        "element_id": "70219beb-6250-453c-aaa3-4093de9e11be",
        "metadata": {},
        "text": "Returns",
        "type": "Title"
    },
    {
        "element_id": "64ad3f5a-a265-40f2-9dc3-704b8eee0509",
        "metadata": {},
        "text": "------- number",
        "type": "UncategorizedText"
    },
    {
        "element_id": "ef0e6ebd-7ecf-452e-9ad8-133eb7ef5687",
        "metadata": {},
        "text": "n!, the factorial of the given number",
        "type": "NarrativeText"
    },
    {
        "element_id": "c2f7b31b-0e74-4fa2-89a6-9ebc9b1a1e43",
        "metadata": {},
        "text": "\"\"\"",
        "type": "UncategorizedText"
    },
    {
        "element_id": "5e2b25a5-d488-48da-aefe-ce861a0979c5",
        "metadata": {},
        "text": "if n ==0:",
        "type": "UncategorizedText"
    },
    {
        "element_id": "6b1b30d1-53ac-42c2-bf5c-2c7d95e8f8bc",
        "metadata": {},
        "text": "return 1",
        "type": "Title"
    },
    {
        "element_id": "c07e1c5a-ee39-417d-8e80-24d9e8c16fde",
        "metadata": {},
        "text": "else :",
        "type": "Title"
    },
    {
        "element_id": "264c5684-a544-4b19-a26a-a946f41e42df",
        "metadata": {},
        "text": "return n* fact (n -1)",
        "type": "Title"
    },
    {
        "element_id": "c63d55a8-a581-43e5-8e6e-b6b1959b8ef9",
        "metadata": {},
        "text": "</ CODE > User : Very good ! Socrates : Always happy to help . User : <CODE >",
        "type": "NarrativeText"
    },
    {
        "element_id": "90b35350-e980-4104-9214-ccc5fe4f3f87",
        "metadata": {},
        "text": "while j < 10: print (i)",
        "type": "NarrativeText"
    },
    {
        "element_id": "9656b605-d035-4469-bae4-e048c6365cd7",
        "metadata": {},
        "text": "</ CODE > Tell me what ' s wrong with this code ? Socrates : It seems to me that your termination",
        "type": "NarrativeText"
    },
    {
        "element_id": "ae20d967-d76c-4b7d-8829-33a16c7fd659",
        "metadata": {},
        "text": "condition involves a loop invariant , so the loop will either not run or not terminate , depending on the value of j.",
        "type": "NarrativeText"
    },
    {
        "element_id": "f00574d5-d53f-411c-b556-cac91786e212",
        "metadata": {},
        "text": "User : Great ! You ' re a genius ! Socrates : Well , above average .",
        "type": "NarrativeText"
    },
    {
        "element_id": "2c25bf73-c3fc-4ae3-a322-10705288df58",
        "metadata": {},
        "text": "62 63",
        "type": "UncategorizedText"
    },
    {
        "element_id": "949709dc-63ce-44c6-ac4b-83229d54e2ae",
        "metadata": {},
        "text": "E STUDY PARTICIPANT DEMOGRAPHICS Of the 42 participants in our study, 21 (50%) reported their gender as Female, 19 (45%) as Male, 1 as Gender Variant / Non-conforming, and 1 preferred not to say. Seventeen (\u02dc40%) participants had 3+ years of Python experience, 11 (26%) had 1-3 years, 11 (26%) had less than 1 year, and 3 (7%) were not familiar with Python. Twenty- nine (69%) participants had written Python code within the past",
        "type": "NarrativeText"
    },
    {
        "element_id": "147149cd-8478-4eb2-b94c-ad287a27de2a",
        "metadata": {},
        "text": "Table 2: Participant Demographics. Gender is coded as M = Male, F = Female, GV/NC = Gender Varying / Non-conforming, and NR = Not reported. Python familiarity (Fam.) is coded as NF = Not familiar, < 1 = < 1 year, 1-3 = 1-3 years, and 3+ = 3+ years. Recency of Python use (Rec.) is coded as Mo = Within the past month, Yr = Within the past year, 5 Yr = Within the past 5 years, and > 5 Yr = Not within the past 5 years.",
        "type": "NarrativeText"
    },
    {
        "element_id": "762aa3cd-eab8-4f10-97b6-c68be80d1d8d",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    }
]