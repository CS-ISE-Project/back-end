[
    {
        "element_id": "f4cc630d-09a4-49de-b2a4-dbd4aaf4e5ce",
        "metadata": {},
        "text": "2020 IEEE/ACM 42nd International Conference on Software Engineering Workshops (ICSEW)",
        "type": "Header"
    },
    {
        "element_id": "913a5448-0eee-4fab-9e06-cfab133640b6",
        "metadata": {},
        "text": "Towards a Quantum Software Modeling Language",
        "type": "Title"
    },
    {
        "element_id": "4feb1aa3-8486-4b1c-9ae4-d6020d8e47f6",
        "metadata": {},
        "text": "Carlos A. P\u00e9rez-Delgado\u2217 University of Kent Canterbury, Kent, United Kingdom c.perez@kent.ac.uk",
        "type": "NarrativeText"
    },
    {
        "element_id": "f9ba4b02-5998-41bf-a19e-411eb9a0f757",
        "metadata": {},
        "text": "Hector G. Perez-Gonzalez Universidad Aut\u00f3noma de San Luis Potos\u00ed San Luis Potos\u00ed, SLP, M\u00e9xico hectorgerardo@uaslp.mx",
        "type": "NarrativeText"
    },
    {
        "element_id": "6f85b2fa-d93c-4eb5-a77e-285813f2c272",
        "metadata": {},
        "text": "ABSTRACT We set down the principles behind a modeling language for quan- tum software. We present a minimal set of extensions to the well- known Unified Modeling Language (UML) that allows it to effec- tively model quantum software. These extensions are separate and independent of UML as a whole. As such they can be used to ex- tend any other software modeling language, or as a basis for a completely new language. We argue that these extensions are both necessary and sufficient to model, abstractly, any piece of quantum software. Finally, we provide a small set of examples that showcase the effectiveness of the extension set.",
        "type": "NarrativeText"
    },
    {
        "element_id": "3d9482b8-746b-4758-821e-90cdcc132188",
        "metadata": {},
        "text": "Quantum computation has, until today, been studied almost exclusively \u2018in the small.\u2019 A general understanding of quantum computation, or, quantum programming \u2018in the large\u2019 is yet to be developed. Here we aim to set the foundations of a general frame- work for studying, developing, and conveying quantum programs. We aim to do so by developing a universal modeling language for quantum software. Rather than develop such a language from scratch, we have decided to start from the well-known Unified Modeling Language (UML)[3], and introduce a minimum set of extensions that allow it to effectively model quantum software.",
        "type": "NarrativeText"
    },
    {
        "element_id": "624c373b-3e79-410d-8723-a06937f80e11",
        "metadata": {},
        "text": "CCS CONCEPTS \u2022 General and reference \u2192 General conference proceedings; Design; \u2022 Software and its engineering \u2192 System descrip- tion languages; Unified Modeling Language (UML); Software design engineering; \u2022 Theory of computation \u2192 Quantum computation theory; Quantum information theory.",
        "type": "NarrativeText"
    },
    {
        "element_id": "5f996bec-d979-456f-ae3a-65deee02693c",
        "metadata": {},
        "text": "Assuming UML to be a shared common-language upon which we can build, allows us to convey our original extensions much more succinctly. Our extension set can, however, be applied with little or no modification to any other modeling language.",
        "type": "NarrativeText"
    },
    {
        "element_id": "823634b9-bd13-4ce6-96f8-79871c09d7ac",
        "metadata": {},
        "text": "2 Q-UML Before discussing in depth the extensions we are introducing, we make a few fundamental observations on which we base the guiding principles for our extension set.",
        "type": "NarrativeText"
    },
    {
        "element_id": "85c87109-d47c-4e74-bc9e-3e7a402b8110",
        "metadata": {},
        "text": "KEYWORDS quantum computing, software engineering, UML",
        "type": "Title"
    },
    {
        "element_id": "9eb0989b-578f-48f5-bded-05dafa5d093e",
        "metadata": {},
        "text": "ACM Reference Format: Carlos A. P\u00e9rez-Delgado and Hector G. Perez-Gonzalez. 2020. Towards a Quantum Software Modeling Language. In IEEE/ACM 42nd International Conference on Software Engineering Workshops (ICSEW\u201920), May 23\u201329, 2020, Seoul, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/ 10.1145/3387940.3392183",
        "type": "NarrativeText"
    },
    {
        "element_id": "d0380404-3786-44f1-bcc9-043f8fb43a57",
        "metadata": {},
        "text": "1 INTRODUCTION Quantum computation rose to prominence after the discovery of quantum algorithms[5, 7] that can efficiently perform tasks that are intractable classically. These discoveries propelled research and interest in quantum computation. Today, there exists prototype quantum hardware with computational capabilities beyond that of any classical machine[1]. Further applications of quantum theory to computation have also been made in several areas of theory of computing, such as models of computation[6], data structures[8], and cryptography[2].",
        "type": "NarrativeText"
    },
    {
        "element_id": "97860b58-15dc-4b29-bb6f-2cb68d96cb35",
        "metadata": {},
        "text": "Our first observation is about the nature of quantum computa- tion. The central difference between quantum and classical com- putation is in how it achieves its goals. Quantum computers have access to quantum algorithms[7], and quantum data-structures[8], that are unavailable to classical computers\u2014hence their perfor- mance advantage. Algorithms and data-structures are, however, implementation details. Algorithms are an essential design choice while programming in the small. However, they are more often than not completely ignored in large-scale software architectural design. For instance, UML diagrams seldom portray algorithms and data-structures beyond a very high-level design perspective.",
        "type": "NarrativeText"
    },
    {
        "element_id": "91529cd6-5af0-4f3c-9cd1-f2084ce676c7",
        "metadata": {},
        "text": "It would seem then that quantum computation introduces noth- ing to computation that needs to be captured in a software design diagram. This is not the case, and the reason for this is our second observation. Quantum computation changes the very nature of in- formation itself. Quantum information is much richer than classical information. It is also much more challenging to store, transmit, and receive. If a module (class, object, etc.) needs to store, transmit or receive quantum information, then this is an important design consideration\u2014which needs to be included in any effective software design.",
        "type": "NarrativeText"
    },
    {
        "element_id": "114d43ef-8186-498b-a891-f35061a22a27",
        "metadata": {},
        "text": "\u2217Both authors contributed equally to this research.",
        "type": "NarrativeText"
    },
    {
        "element_id": "9690208f-d146-425d-ade9-715b37c6c2fc",
        "metadata": {},
        "text": "Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. ICSEW\u201920, May 23\u201329, 2020, Seoul, Republic of Korea \u00a9 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 978-1-4503-7963-2/20/05. . . $15.00 https://doi.org/10.1145/3387940.3392183",
        "type": "NarrativeText"
    },
    {
        "element_id": "427050c2-a3ed-41db-bb60-adf2df865cc7",
        "metadata": {},
        "text": "A third observation here is that the classical vs. quantum nature of the information used by a module is an important consideration both when discussing its internal implementation and its interface. Furthermore, these two are separate and independent considera- tions.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ab5298b1-ed4a-40e3-8e87-3b94a8bbaa8b",
        "metadata": {},
        "text": "A classical module, implementing some classical behavior, would have no need, or capability, to communicate quantum data. A quan- tum module may or may not have to; i.e. a module\u2019s quantum behavior may be completely part of its internal implementation",
        "type": "NarrativeText"
    },
    {
        "element_id": "1f55c568-2428-4edc-9c51-bcfea1d4d7e1",
        "metadata": {},
        "text": "442",
        "type": "Footer"
    },
    {
        "element_id": "47a73162-3259-4307-b00a-49a2d7fb271c",
        "metadata": {},
        "text": "442",
        "type": "UncategorizedText"
    },
    {
        "element_id": "bd64b635-880c-4f43-80b6-9f0301419dba",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "3d55b6c3-3244-439d-b6b8-773d7ed8b866",
        "metadata": {},
        "text": "and not appear as part of its interface. For instance, take a module implementing Shor\u2019s algorithm. Shor\u2019s algorithm uses quantum effects to efficiently factor a large integer into its prime factors. The implementation of this module must necessarily be quantum. Both the input (the large integer) and the output (the prime factors), consist of classical information. And hence, the interface of such a module can be strictly classical.",
        "type": "NarrativeText"
    },
    {
        "element_id": "3e60664b-5082-43dd-84ff-fe5ce9bb9b92",
        "metadata": {},
        "text": "More generally, we can conceive of quantum software modules that have all classical inputs and outputs (like the above example), all quantum inputs and outputs, or a mix of both. A quantum soft- ware design must address, for each individual interface element, whether it is classical input/output, or if it is quantum. In short, whether a module communicates classically or via quantum infor- mation, and whether its internal implementation requires quantum hardware are important considerations that need to be captured in a design document.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0702fdc5-3cd8-4cb0-bb27-aeef20cac51d",
        "metadata": {},
        "text": "The importance of such labelling should be clear. Quantum data can only be stored and transmitted with special hardware designed to do so. More importantly, from an abstract, device-independent, strictly software perspective: quantum and classical information are not interchangeable. Classical information is clone-able and admits fanout operations, while quantum information (in general) does not. On the other hand, quantum information has a much larger state-space.",
        "type": "NarrativeText"
    },
    {
        "element_id": "a6411cc2-bc5b-4907-b820-e7ec6bdad5fb",
        "metadata": {},
        "text": "Finally, it is true that quantum information is strictly a super-set of classical information\u2014and hence a quantum module can commu- nicate any classical information it desires using a quantum interface element. We argue, however, that using a quantum interface ele- ment and messaging when classical would suffice is bad quantum software design, for the reasons stated above.",
        "type": "NarrativeText"
    },
    {
        "element_id": "fa8798db-42cd-4371-8c1d-ffd56b31d30d",
        "metadata": {},
        "text": "In summary, the guiding principles behind any quantum software modeling language must include the following:",
        "type": "NarrativeText"
    },
    {
        "element_id": "ee0b12af-a728-47dd-bc24-07b007977bbd",
        "metadata": {},
        "text": "(1) (Quantum Classes): Whenever a software module makes use of quantum information, either as part of its internal state/implementation, or as part of its interface, this must be clearly established in a design document.",
        "type": "ListItem"
    },
    {
        "element_id": "13c180ec-b78a-48bc-b3e9-ca3ffb016995",
        "metadata": {},
        "text": "(2) (Quantum Elements): Each module interface element (e.g. public functions/methods, public variables) and internal state variables can be either classical or quantum, and must be labelled accordingly.",
        "type": "NarrativeText"
    },
    {
        "element_id": "0f8cc919-4630-4ed0-ae68-2696f834a46a",
        "metadata": {},
        "text": "(a) (Quantum Variables): Each variable should be labelled as classical or quantum. If the model represents data types, the variables should also specify the classical (e.g. integer, string) or quantum (e.g. qubit, qubit array, quantum graph state) data type,",
        "type": "ListItem"
    },
    {
        "element_id": "cbf92066-e55f-4b29-be4e-55d4fbf3a803",
        "metadata": {},
        "text": "(b) (Quantum Operations): For each operation, both the in- put and output should be clearly labelled as either classical or quantum. Whether the operation internally operates quantumly should also be labelled.",
        "type": "ListItem"
    },
    {
        "element_id": "7d3586e9-a1d5-4184-9b1a-6376a3d8d374",
        "metadata": {},
        "text": "(3) (Quantum Supremacy): A module that has at least one quantum element is to be considered a quantum software module, otherwise it is a classical module. Quantum and classical modules should be clearly labelled as such.",
        "type": "ListItem"
    },
    {
        "element_id": "1b5886c1-35a6-42b1-af61-444aabf5562e",
        "metadata": {},
        "text": "(4) (Quantum Aggregation): Any module that is composed of one or more quantum modules will itself be considered a quantum module, and must be labelled as such.",
        "type": "ListItem"
    },
    {
        "element_id": "82c993d1-61cc-4546-81f5-92570ae0458d",
        "metadata": {},
        "text": "(5) (Quantum Communication): Quantum and classical mod- ules can communicate with each other as long as their inter- faces are compatible, i.e. the quantum module has classical inputs and/or outputs that can interface with the classical module.",
        "type": "ListItem"
    },
    {
        "element_id": "3d25af3c-2505-4935-ad82-870d7a351e05",
        "metadata": {},
        "text": "We will argue in Sec. 2.3 how these extensions are not only nec- essary, but also sufficient in order to design and represent quantum software. First, in the following two sections we put these principles into practice as a set of concrete extensions to UML.",
        "type": "NarrativeText"
    },
    {
        "element_id": "78e02bd8-811e-4f4c-afa5-658c3168b90a",
        "metadata": {},
        "text": "2.1 Class Diagram Extensions UML is a very graphical language, meant to convey a lot of meaning in a very small amount of space. As such, it makes sense to use a graphical way to represent quantum software elements. We chose to do this by use of bold text to denote quantum elements, and double lines to denote a quantum relationship or quantum communication.",
        "type": "NarrativeText"
    },
    {
        "element_id": "ee7de8da-f113-4ff3-af0f-ef8ac1195b6f",
        "metadata": {},
        "text": "ShorApplication -N\u00e9int start) Euclidian QFT -aValue:int -piqint -bValuesint ++get-QFT-0> 0) : gint on +evaluateGCD() SEMA PED Performs a quantum ShorFactor | Get the greatest Fourier transform on, Oo\u2014 common factor (GCD) the input state over the -Ncint of aValue and bValue group G. The group is set by subclass. +actor():int ShorOrder Given an integer N, 1 find one of its prime -N:int QFT_n factors. Naan -acint 1 torderFind():int (Q@\u2014 Performs a quantum whe tesa Fasiengemt man positive integer such the input state over the that a\u2019r = 1 mod N. CEEDERER)",
        "type": "Image"
    },
    {
        "element_id": "2e14c9fe-1d83-44ba-bfb0-eff5008f9ae9",
        "metadata": {},
        "text": "Figure 1: Q-UML class diagram of Shor\u2019s Algorithm. Quan- tum classes and interface elements are presented in bold text, and quantum relationships use double-lines.",
        "type": "FigureCaption"
    },
    {
        "element_id": "d041acc8-858f-4f86-b1c4-f1ae6abf3a96",
        "metadata": {},
        "text": "For attributes, the name will be bold if it is represented using quantum information. For methods, we use the following conven- tion. If any of the inputs are quantum, these are bold. If the output or datatype of the method is quantum, then the datatype should also be bold. For backwards compatibility with regular UML, whenever the input or output datatypes of a method are omitted, these will be assumed to be classical in nature. If a class/object has any quantum attributes or methods then it itself is considered quantum, and its name shall also be bold.",
        "type": "NarrativeText"
    },
    {
        "element_id": "af033d86-1a45-4482-84fe-7cbe98679f15",
        "metadata": {},
        "text": "Relationships between classes will use double-lines whenever the relationship is quantum in nature. For inheritance, if the superclass is quantum then the subclass, and the inheritance relationship, will also be quantum. (the converse is not necessarily true however). In the case of aggregation and composition, if a class/object being aggregated/composed is quantum, then the class/object to which it is aggregated/composed into, as well as that relationship will",
        "type": "NarrativeText"
    },
    {
        "element_id": "fbce4071-ff07-4a31-8bb5-0184ed0c45ce",
        "metadata": {},
        "text": "443",
        "type": "Footer"
    },
    {
        "element_id": "3c1a881c-107d-42eb-81ba-bc749e1796c2",
        "metadata": {},
        "text": "443",
        "type": "UncategorizedText"
    },
    {
        "element_id": "9769389d-3145-4e65-ace4-9a8c0730d8e2",
        "metadata": {},
        "text": "",
        "type": "PageBreak"
    },
    {
        "element_id": "cf153718-f93a-4f8f-9a6a-7408829379b6",
        "metadata": {},
        "text": "also be quantum. Association relationships do not have any special rules, beyond the need of a quantum class/object to have a classical interface if it is to associate with classical classes/objects.",
        "type": "NarrativeText"
    },
    {
        "element_id": "1e2172f7-22e4-4531-97f5-6802746c9ce5",
        "metadata": {},
        "text": "Fig. 1 showcases a Q-UML diagram that exemplifies the above rules.",
        "type": "NarrativeText"
    },
    {
        "element_id": "34a00b98-ac2f-477d-8fbf-56d0cfaffd14",
        "metadata": {},
        "text": "2.2 Sequence Diagram Extensions Sequence diagrams in UML allow us to portray the dynamic rela- tionship between modules in a software program. As we did before for static relationships, we extend the existing language in order to allow us to differentiate between classical and quantum messages. As previously discussed, this is essential information. Quantum information behaves differently from classical information; it can store/portray different data; it admits different operations; and, it requires different hardware to store, send, and receive.",
        "type": "NarrativeText"
    },
    {
        "element_id": "fa2ffa3b-64ac-476c-b3f7-0a3f6973d07f",
        "metadata": {},
        "text": "| sewn \u2014>| coo \u2014>| [iseeaniann-of Iys0ded or expfa2) #1 mod N] [Levatuxtescooe| aerate iteco(an) #4]",
        "type": "Image"
    },
    {
        "element_id": "eb10984b-b1b1-4924-b0f1-d2fc6d3c9ac8",
        "metadata": {},
        "text": "Figure 2: Q-UML sequence diagram of Shor\u2019s Algorithm. Quantum classes are presented in bold text, and quantum messages use double-lines.",
        "type": "FigureCaption"
    },
    {
        "element_id": "387f06fe-297b-4c8a-9032-8856cc1ec8bd",
        "metadata": {},
        "text": "Like before, we make use of bold text to markup quantum mod- ules, and double lines to portray quantum messages. Fig. 2 shows a Q-UML sequence diagram. Note how even though the relationship between Shorfactor and ShorOrder is quantum, the messaging between them is not. This illustrates an important point. A module is marked as quantum if it uses quantum resources in any form, either directly as part of its internal implementation or as part of an aggregated module. If a sub-module (in UML a composed class or object) is quantum, then the encompassing module must also be marked as quantum. In a static (e.g. class) diagram, the quantum composition relationships inform us\u2014especially in the case of a seemingly classical module that does not in itself use quantum resources\u2014which composed modules are using quantum resources. Also, note the communication between the objects ShorOrder and QFT_n. The module QFT_n operates on a quantum state. Hence, both \u2018set\u2019 messages are quantum. Likewise, the return mes- sages p and p\u2019 are quantum states. However, the request to perform a quantum Fourier transform (QFT) or a QFT inverse operation",
        "type": "NarrativeText"
    },
    {
        "element_id": "cca5066f-e1af-4035-997a-31b3b3c5dc3c",
        "metadata": {},
        "text": "444",
        "type": "Footer"
    },
    {
        "element_id": "ea887fdb-aa54-47d1-b069-79f9c3b49a70",
        "metadata": {},
        "text": "444",
        "type": "UncategorizedText"
    },
    {
        "element_id": "edd334c7-f764-41e5-b21b-69dce385dc7c",
        "metadata": {},
        "text": "can (and therefore should) be communicated classically. This dia- gram showcases the level of granularity available to us using these diagrams with the proposed extensions.",
        "type": "NarrativeText"
    },
    {
        "element_id": "9e5bcb36-7d84-4a4d-b6b5-19b01a376d27",
        "metadata": {},
        "text": "2.3 Discussion We have proposed a minimal series of extensions to existing soft- ware modeling languages. We exemplify our additions in UML, but these extensions are easily applicable to any other modeling language, or be used as the basis for a new modeling language.",
        "type": "NarrativeText"
    },
    {
        "element_id": "d37ded2b-bd2a-4ac0-9f4e-4aa14f2019e7",
        "metadata": {},
        "text": "We\u2019ve argued the necessity of each of the extensions in previous sections. We can argue as well, that these extensions are not only necessary, but also sufficient to fully model quantum software. To make this argument, we appeal to the fact that all quantum computation is simulable using classical computation albeit with an efficiency loss. Other than their use of quantum information and algorithms, quantum computers are indistinct from classical ones. Hence, from a high-level design perspective, the only information element that needs to be considered when developing quantum software is when quantum (rather than classical) information is being used.",
        "type": "NarrativeText"
    },
    {
        "element_id": "224eccf4-936c-4a66-8ac5-5775aebfaf04",
        "metadata": {},
        "text": "The one remaining information element we have not discussed is algorithm efficiency. If quantum computation is to be used, it will most likely be due to the efficient algorithms at its disposal. That said, algorithm efficiency is not a solely quantum consider- ation. UML itself does not inherently have language elements for algorithm efficiency (beyond user-defined notes). It does, however, have several extensions used and proposed for this purpose(see e.g.[4]). Other modeling languages may also have definite algorithm efficiency elements. We argue that it is best to use existing language elements when they are available.",
        "type": "NarrativeText"
    },
    {
        "element_id": "99e5e129-44bf-4a1f-9e09-5f03207fef10",
        "metadata": {},
        "text": "ACKNOWLEDGMENTS CP-D would like to acknowledge funding through the EPSRC Quan- tum Communications Hub (EP/T001011/1). The authors would also like to thank Joanna I. Ziembicka for useful comments during the preparation on this manuscript.",
        "type": "NarrativeText"
    },
    {
        "element_id": "9143789d-ed22-44e7-a470-f0459a4b8aae",
        "metadata": {},
        "text": "REFERENCES [1] Frank Arute et. al. 2019. Quantum supremacy using a programmable supercon- ducting processor. Nature 574, 7779 (2019), 505\u2013510. https://doi.org/10.1038/ s41586-019-1666-5",
        "type": "NarrativeText"
    },
    {
        "element_id": "fbd79ae7-100c-4d9a-b9f9-07b41de04aa4",
        "metadata": {},
        "text": "[2] Charles H Bennett and Gilles Brassard. 2014. Quantum cryptography: public key distribution and coin tossing. Theor. Comput. Sci. 560, 12 (2014), 7\u201311.",
        "type": "ListItem"
    },
    {
        "element_id": "5fb85754-ad7e-4555-9edd-c00947c39cfe",
        "metadata": {},
        "text": "[3] Grady Booch, James Rumbaugh, and Ivar Jacobson. 2005. Unified Modeling Lan- guage User Guide, The (2nd Edition) (Addison-Wesley Object Technology Series). Addison-Wesley Professional.",
        "type": "ListItem"
    },
    {
        "element_id": "117f95ee-20c8-4d08-b9d5-8f887d236b38",
        "metadata": {},
        "text": "[4] C. Canevet, S. Gilmore, J. Hillston, M. Prowse, and P. Stevens. 2003. Performance modelling with the Unified Modelling Language and stochastic process algebras. IEE Proceedings - Computers and Digital Techniques 150, 2 (March 2003), 107\u2013120. https://doi.org/10.1049/ip-cdt:20030084",
        "type": "ListItem"
    },
    {
        "element_id": "04bff6eb-fac7-427a-85a4-ad8339639ec0",
        "metadata": {},
        "text": "[5] Lov K. Grover. 1996. A Fast Quantum Mechanical Algorithm for Database Search. In Proceedings of the Twenty-eighth Annual ACM Symposium on The- ory of Computing (STOC \u201996). ACM, New York, NY, USA, 212\u2013219. https: //doi.org/10.1145/237814.237866",
        "type": "ListItem"
    },
    {
        "element_id": "22291a45-3e91-4bab-b7b6-94fc790148eb",
        "metadata": {},
        "text": "[6] Carlos A. P\u00e9rez-Delgado and Donny Cheung. 2007. Local unitary quantum cellular automata. Phys. Rev. A 76 (Sep 2007), 032320. Issue 3. https://doi.org/10.1103/ PhysRevA.76.032320",
        "type": "ListItem"
    },
    {
        "element_id": "6d16447f-5db2-4436-9296-a3320064d68a",
        "metadata": {},
        "text": "[7] Peter W Shor. 1994. Algorithms for quantum computation: Discrete logarithms and factoring. In Proceedings 35th annual symposium on foundations of computer science. Ieee, 124\u2013134.",
        "type": "ListItem"
    },
    {
        "element_id": "6eb5d7c8-994a-4af5-9d68-b98541c44bd1",
        "metadata": {},
        "text": "[8] Liming Zhao, Carlos A. P\u00e9rez-Delgado, and Joseph F. Fitzsimons. 2016. Fast graph operations in quantum computation. Phys. Rev. A 93 (Mar 2016), 032314. Issue 3. https://doi.org/10.1103/PhysRevA.93.032314",
        "type": "ListItem"
    }
]