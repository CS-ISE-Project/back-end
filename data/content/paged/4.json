[
    "609\n\nHow to Teach Software Modeling\n\nTetsuo Tamai Graduate School of Arts and Sciences The University of Tokyo 3-8-1 Komaba, Meguro-ku Tokyo 153-8902, Japan tamai@acm.org\n\nABSTRACT To enhance motivation of students to study software engineering, some way of \ufb01nding balance between the scienti\ufb01c aspect and the practical aspect of software engineering is required. In this paper, we claim that teaching multiple software modeling techniques from a uni\ufb01ed viewpoint is a good way of obtaining the balance and attracting the students\u2019 interest as well.\n\ntechnology and may generate anti-intellectualism. A good balance between the scienti\ufb01c aspect and the practical aspect of software engineering should always be pursued.\n\nIn our view, teaching various software modeling techniques is a good way to achieve balanced software engineering education. It is needless to say that model is a key concept and modeling is an essential skill in software engineering. There are a variety of mod- eling techniques; some are intuitive and quite accessible to novices, while some are highly sophisticated and attract theory oriented stu- dents and researchers.\n\nCategories and Subject Descriptors K.3.2 [Computers and Education]: Computer and Information Science Education\u2014computer science education; D.2.1 [Software Engineering]: Requirements/Speci\ufb01cation\u2014modeling\n\nIn this paper, we would like to show that it is effective to teach multiple modeling techniques from a uni\ufb01ed viewpoint. It is based on our experience of teaching software engineering courses at sev- eral universities in Japan. Recently, the author published a textbook on software engineering, speci\ufb01cally focused on software model- ing (unfortunately, it is written in Japanese)[1]. The book covers the whole area of software engineering, including design, testing and evolution but the modeling part has a role of attracting inter- ests of intelligent students, who may not have much experience in developing real scale software systems. It also gives a consistent viewpoint penetrating through various techniques employed in dif- ferent stages of software engineering.\n\nGeneral Terms Design\n\nKeywords software modeling, software engineering education, UML\n\n1.\n\nINTRODUCTION\n\n2. MODELING TECHNIQUES\n\nSoftware engineering education at universities faces a common problem; that is regular students do not usually have experience of developing software for practical use and thus are not motivated for software engineering aiming at high quality software production by a project team or a persistent organization. Software projects conducted by students simulating real scale software development may help enhance students\u2019 motivation, although it requires a lot of efforts to prepare such projects and manage them.\n\nIn software engineering, models are used for various purposes, e.g. life cycle model, process model, project model, product model, quality model, domain model, requirements model, design model, object model, data model, etc. In the following, we basically focus on requirements and design models but most of the discussions will hold for other kinds of models.\n\nTeaching modeling is almost equal to teaching abstraction. Mod- els are constructed through capturing the crucial properties and structure of the target, abstracting away irrelevant details. Thus, learning how to model is a good training for mastering abstraction.\n\nAnother way of solving this problem is to teach those who al- ready have real experience in industry. In our case, there are cur- rently \ufb01ve Ph. D. students under the author\u2019s supervision who are working at companies as well as doing research in our lab. As a by-product, interactions between the part-time students and the other regular students stimulate each other, particularly enlighten- ing the regular students to practical software issues. However, too much emphasis on practicality may bring negligence to science and\n\n2.1 Graph Representation of Models\n\nMany software models are represented with diagrams. Wide ac- ceptance of UML symbolizes the trend that diagrams are often pre- ferred to textual languages. Among many types of diagrams, graph structured diagrams are by far the most widely used. The reasons may be as follows.\n\n1. A most fundamental way for human mind to understand the world is by regarding it as consisting of a set of conceptual units and a set of relations between them. Conceptual units can be naturally illustrated with boxes or circles or whatever closed \ufb01gures and relations can be illustrated with lines or ar- rows connecting such \ufb01gures, corresponding to vertices and edges of graphs, respectively.\n\nCopyright is held by the author/owner. ICSE\u201905, May 15\u201321, 2005, St. Louis, Missouri, USA. ACM 1-58113-963-2/05/0005.\n\n",
    "610\n\nStatic models and dynamic models may not be easily confused but confusion between different dynamic models are often observed, e.g. data \ufb02ow and control \ufb02ow or state transition and activity tran- sition. Since graphs are intuitively understandable, their semantics are apt to be understood ambiguously or misunderstood.\n\n2. It is easy to draw graph structured diagrams by hand or with drawing tools.\n\n3. Concepts and algorithms of the graph theory are available and often useful in analyzing models represented by graphs. A typical example is reasoning on transitive relations by trac- ing along paths of graphs. Also, the concept of subgraph is highly useful in decomposing higher-level models or cluster- ing lower-level models.\n\n3. UML\n\nUML diagrams can also be viewed in terms of graph structures.\n\nTable 2 shows graph structures of \ufb01ve UML diagrams.\n\nAccordingly, a number of models share the same structure of\n\ngraphs. Table 1 shows graph structures of some typical models.\n\nTable 2: Graph structures of UML diagrams\n\nTable 1: Graph structures of typical models\n\ndiagram class diagram\n\nvertex class\n\nedge generalization, composition, association transition control \ufb02ow message \ufb02ow message \ufb02ow\n\nmodel Data \ufb02ow ER State transition JSD\n\nvertex process entity state process\n\nedge data \ufb02ow relationship transition data stream connection state vector connection control \ufb02ow \ufb01re and token \ufb02ow\n\nstate machine activity diagram collaboration diagram object sequence diagram\n\nstate activity\n\nmessage anchor point\n\nActivity Petri net\n\nactivity place, transition\n\nIt is usually not desirable to teach UML per se. UML is a col- lection of miscellaneous diagrams and its speci\ufb01cation is continu- ously changing. For the pedagogical purpose, UML had better be regarded as a catalogue of analysis and design know-how collected around diagrammatic representations. Diagrams should be selected according to the policy of how to teach modeling methods.\n\n2.2 Commonality and Difference between\n\nModels\n\nIt is pedagogical to let students notice the common structure shared by a number of models. However, the apparent resemblance often causes confusion. Such confusion can be observed not only in software modeling graphs but in many diagrams found in daily newspapers, magazines, reports, proposals and other documents. It is often the case that one vertex denotes a type of things and an- other denotes quite a different type on the same diagram or one type of edges co-exist with edges with different meaning. Thus, it is important to make students consciously aware the differences between different models. We often experience that when we let students draw data \ufb02ow diagrams who appear to have understood the data \ufb02ow model perfectly, the diagrams turn out to be some- thing like control \ufb02ow graphs.\n\nEach UML diagram contains overly rich constructs, which some- times blur the essential property of the model. For example, the activity diagram is essentially a control \ufb02ow diagram but it also in- cludes a notation for data \ufb02ow description. From the stance of em- phasizing differences between various models, it is not appropriate to include such ad hoc constructs. By the same token, the collab- oration diagram (, renamed to \u201ccommunication diagram\u201d in UML 2) is explained to have the equivalent semantics as the sequence diagram. But if that is the case, signi\ufb01cance of the collaboration diagram is considerably limited. The author prefers to regard it as showing collaboration relations between objects, integrating a set of different sequence diagrams.\n\nTo show the difference, it is instructive to categorize models rep-\n\nresented by graphs. Basically, there are two categories.\n\n4. CONCLUSION\n\n1. Static models:\n\nSoftware modeling is important by itself but teaching modeling in the software engineering course has at least two additional mean- ings. One is to give a bird\u2019s-eye view to the whole software engi- neering through the standpoint of modeling technology. The other is to attract interest of good students who may not have much expe- rience in developing a real-scale software but possess intelligence and will to attack complexity of modern software construction.\n\nAn edge connecting vertex A and vertex B represents a rela- tion between A and B. When the edge is undirected, it means \u201cA and B are in some relation\u201d and when directed, it means \u201cA has a relation with B\u201d. Typical examples include entity relationship model, class diagram and semantic network.\n\n2. Dynamic models:\n\nAn edge from vertex A to B denotes a move from A to B. The edge in this case is always directed. There are two sub- categories:\n\n5. REFERENCES [1] T. Tamai. Foundations of Software Engineering. Iwanami Shoten, Tokyo, Japan, 2004. in Japanese.\n\n(a) The case where a view of control moves from A to B. Examples are control \ufb02ow model and state transition model.\n\n(b) The case where data or objects \ufb02ow from A to B. Exam- ples are data \ufb02ow model, work \ufb02ow model, and trans- portation \ufb02ow model.\n\n"
]