[
    "Advances in Engineering Software 188 (2024) 103571\nAvailable online 7 December 2023\n0965-9978/\u00a9 2023 Elsevier Ltd. All rights reserved.\nContents lists available at ScienceDirect\nAdvances in Engineering Software\njournal homepage: www.elsevier.com/locate/advengsoft\nResearch paper\nSMT 2.0: A Surrogate Modeling Toolbox with a focus on hierarchical and\nmixed variables Gaussian processes\nPaul Saves a,b,\u2217,1, R\u00e9mi Lafage a,1, Nathalie Bartoli a,1, Youssef Diouane c,1, Jasper Bussemaker d,1,\nThierry Lefebvre a,1, John T. Hwang e,1, Joseph Morlier f,1, Joaquim R.R.A. Martins g,1\na ONERA/DTIS, Universit\u00e9 de Toulouse, Toulouse, France\nb ISAE-SUPAERO, Universit\u00e9 de Toulouse, Toulouse, France\nc Polytechnique Montr\u00e9al, Montreal, QC, Canada\nd German Aerospace Center (DLR), Institute of System Architectures in Aeronautics, Hamburg, Germany\ne University of California San Diego, Department of Mechanical and Aerospace Engineering, La Jolla, CA, USA\nf ICA, Universit\u00e9 de Toulouse, ISAE\u2013SUPAERO, INSA, CNRS, MINES ALBI, UPS, Toulouse, France\ng University of Michigan, Department of Aerospace Engineering, Ann Arbor, MI, USA\nA R T I C L E\nI N F O\nDataset link: https://colab.research.google.com\n/github/SMTorg/smt/blob/master/tutorial/No\ntebookRunTestCases_Paper_SMT_v2.ipynb\nKeywords:\nSurrogate modeling\nGaussian process\nKriging\nHierarchical problems\nHierarchical and mixed-categorical inputs\nMeta variables\nA B S T R A C T\nThe Surrogate Modeling Toolbox (SMT) is an open-source Python package that offers a collection of surrogate\nmodeling methods, sampling techniques, and a set of sample problems. This paper presents SMT 2.0, a major\nnew release of SMT that introduces significant upgrades and new features to the toolbox. This release adds\nthe capability to handle mixed-variable surrogate models and hierarchical variables. These types of variables\nare becoming increasingly important in several surrogate modeling applications. SMT 2.0 also improves SMT\nby extending sampling methods, adding new surrogate models, and computing variance and kernel derivatives\nfor Kriging. This release also includes new functions to handle noisy and use multi-fidelity data. To the best of\nour knowledge, SMT 2.0 is the first open-source surrogate library to propose surrogate models for hierarchical\nand mixed inputs. This open-source software is distributed under the New BSD license.2\n1. Motivation and significance\nWith the increasing complexity and accuracy of numerical models, it\nhas become more challenging to run complex simulations and computer\ncodes [1,2]. As a consequence, surrogate models have been recognized\nas a key tool for engineering tasks such as design space exploration,\nuncertainty quantification, and optimization [3]. In practice, surrogate\nmodels are used to reduce the computational effort of these tasks by\nreplacing expensive numerical simulations with closed-form approxi-\nmations [4, Ch. 10]. To build such a model, we start by evaluating\nthe original expensive simulation at a set of points through a Design\nof Experiments (DoE). Then, the corresponding evaluations are used to\nbuild the surrogate model according to the chosen approximation, such\nas Kriging, quadratic interpolation, or least squares regression.\nThe Surrogate Modeling Toolbox (SMT) is an open-source frame-\nwork that provides functions to efficiently build surrogate models [5].\n\u2217 Corresponding author at: ONERA/DTIS, Universit\u00e9 de Toulouse, Toulouse, France.\nE-mail addresses: paul.saves@onera.fr (P. Saves), remi.lafage@onera.fr (R. Lafage), nathalie.bartoli@onera.fr (N. Bartoli), youssef.diouane@polymtl.ca\n(Y. Diouane), jasper.bussemaker@dlr.de (J. Bussemaker), thierry.lefebvre@onera.fr (T. Lefebvre), jhwang@eng.ucsd.edu (J.T. Hwang),\njoseph.morlier@isae-supaero.fr (J. Morlier), jrram@umich.edu (J.R.R.A. Martins).\n1 All authors contributed to this work, research and manuscript.\n2 https://github.com/SMTorg/SMT\nKriging models (also known as Gaussian processes) that take advantage\nof derivative information are one of SMT\u2019s key features [6]. Numerical\nexperiments have shown that SMT achieved lower prediction error\nand computational cost than Scikit-learn [7] and UQLab [8] for a\nfixed number of points [9]. SMT has been applied to rocket engine\ncoaxial-injector optimization [10], aircraft engine consumption mod-\neling [11], numerical integration [12], multi-fidelity sensitivity analy-\nsis [13], high-order robust finite elements methods [14,15], planning\nfor photovoltaic solar energy [16], wind turbines design optimiza-\ntion [17], porous material optimization for a high pressure turbine\nvane [18], chemical process design [19] and many other applications.\nIn systems engineering, architecture-level choices significantly in-\nfluence the final system performance, and therefore, it is desirable to\nconsider such choices in the early design phases [20]. Architectural\nchoices are parameterized with discrete design variables; examples in-\nclude the selection of technologies, materials, component connections,\nhttps://doi.org/10.1016/j.advengsoft.2023.103571\nReceived 22 August 2023; Received in revised form 23 October 2023; Accepted 26 November 2023\n",
    "Advances in Engineering Software 188 (2024) 103571\n2\nP. Saves et al.\nTable 1\nComparison of software packages for hierarchical and mixed Kriging models. \u2713= implemented. * = user-defined.\nPackage\nBOTorch\nDakota\nDiceKriging\nKerGP\nLVGP\nParmoo\nSpearmint\nSMT 2.0\nReference\n[25]\n[26]\n[27]\n[32]\n[28]\n[29]\n[30]\nThis paper\nLicense\nMIT\nEPL\nGPL\nGPL\nGPL\nBSD\nGNU\nBSD\nLanguage\nPython\nC\nR\nR\nR\nPython\nPython\nPython\nMixed var.\n\u2713\n\u2713\n\u2713\n\u2713\n\u2713\n\u2713\n\u2713\n\u2713\nGD kernel\n\u2713\n\u2713\n\u2713\n*\n\u2713\nCR kernel\n\u2713\n\u2713\n\u2713\n\u2713\nHH kernel\n\u2713\n\u2713\nEHH kernel\n*\n\u2713\nHierarchical var.\n\u2713\nand number of instantiated elements. When design problems include\nboth discrete variables and continuous variables, they are said to have\nmixed variables.\nWhen architectural choices lead to different sets of design variables,\nwe have hierarchical variables [21,22]. For example, consider differ-\nent aircraft propulsion architectures [23]. A conventional gas turbine\nwould not require a variable to represent a choice in the electrical\npower source, while hybrid or pure electric propulsion would require\nsuch a variable. The relationship between the choices and the sets of\nvariables can be represented by a hierarchy.\nHandling hierarchical and mixed variables requires specialized sur-\nrogate modeling techniques [24]. To address these needs, SMT 2.0\nis offering researchers and practitioners a collection of cutting-edge\ntools to build surrogate models with continuous, mixed and hierarchical\nvariables. The main objective of this paper is to detail the new enhance-\nments that have been added in this release compared to the original\nSMT 0.2 release [5].\nThere are two new major capabilities in SMT 2.0: the ability\nto build surrogate models involving mixed variables and the support\nfor hierarchical variables within Kriging models. To handle mixed\nvariables in Kriging models, existing libraries such as BoTorch [25],\nDakota [26], DiceKriging [27], LVGP [28], Parmoo [29], and Spearmint\n[30] implement simple mixed models by using either continuous relax-\nation (CR), also known as one-hot encoding [30], or a Gower distance\n(GD) based correlation kernel [31]. KerGP [32] (developed in R) imple-\nments more general kernels but there is no Python open-source toolbox\nthat implements more general kernels to deal with mixed variables,\nsuch as the homoscedastic hypersphere (HH) [33] and exponential\nhomoscedastic hypersphere (EHH) [34] kernels. Such kernels require\nthe tuning of a large number of hyperparameters but lead to more\naccurate Kriging surrogates than simpler mixed kernels [34,35]. SMT\n2.0 implements all these kernels (CR, GD, HH, and EHH) through a\nunified framework and implementation. To handle hierarchical vari-\nables, no library in the literature can build peculiar surrogate models\nexcept SMT 2.0, which implements two Kriging methods for these\nvariables. Notwithstanding, most softwares are compatible with a na\u00efve\nstrategy called the imputation method [24] but this method lacks depth\nand depends on arbitrary choices. This is why Hutter and Osborne\n[21] proposed a first kernel, called Arc-Kernel which in turn was\ngeneralized by Horn et al. [36] with a new kernel called the Wedge-\nKernel [37]. None of these kernels are available in any open-source\nmodeling software. Furthermore, thanks to the framework introduced\nin Audet et al. [38], our proposed kernels are sufficiently general so\nthat all existing hierarchical kernels are included within it. Section 4\ndescribes the two kernels implemented in SMT 2.0 that are referred\nas SMT Arc-Kernel and SMT Alg-Kernel. In particular, Alg-\nKernel is a novel hierarchical kernel introduced in this paper. Table 1\noutlines the main features of the state-of-the-art modeling software that\ncan handle hierarchical and mixed variables.\nSMT 2.0 introduces other enhancements, such as additional sam-\npling procedures, new surrogate models, new Kriging kernels (and their\nderivatives), Kriging variance derivatives, and an adaptive criterion for\nhigh-dimensional problems. SMT 2.0 adds applications of Bayesian\noptimization (BO) with hierarchical and mixed variables or noisy co-\nKriging that have been successfully applied to aircraft design [39], data\nfusion [40], and structural design [41]. The SMT 2.0 interface is more\nuser-friendly and offers an improved and more detailed documentation\nfor users and developers.3 SMT 2.0 is hosted publicly4 and can be\ndirectly imported within Python scripts. It is released under the New\nBSD License and runs on Linux, MacOS, and Windows operating sys-\ntems. Regression tests are run automatically for each operating system\nwhenever a change is committed to the repository. In short, SMT 2.0\nbuilds on the strengths of the original SMT package while adding new\nfeatures. On one hand, the emphasis on derivatives (including predic-\ntion, training and output derivatives) is maintained and improved in\nSMT 2.0. On the other hand, this new release includes support for\nhierarchical and mixed variables Kriging based models. For the sake\nof reproducibility, an open-source notebook is available that gathers\nall the methods and results presented on this paper.5\nThe remainder of the paper is organized as follows. First, we in-\ntroduce the organization and the main implemented features of the\nrelease in Section 2. Then, we describe the mixed-variable Kriging\nmodel with an example in Section 3. Similarly, we describe and provide\nan example for a hierarchical-variable Kriging model in Section 4.\nThe Bayesian optimization models and applications are described in\nSection 5. Finally, we describe the other relevant contributions in\nSection 6 and conclude in Section 7.\n2. SMT 2.0 : an improved surrogate modeling toolbox\nFrom a software point of view, SMT 2.0 maintains and improves\nthe modularity and generality of the original SMT version [5]. In this\nsection, we describe the software as follows. Section 2.1 describes the\nlegacy of SMT 0.2. Then, Section 2.2 describes the organization of the\nrepository. Finally, Section 2.3 shows the new capabilities implemented\nin the SMT 2.0 update.\n2.1. Background on SMT former version: SMT 0.2\nSMT [5] is an open-source collaborative work originally developed\nby ONERA, NASA Glenn, ISAE-SUPAERO/ICA and the University of\nMichigan. Now, both Polytechnique Montr\u00e9al and the University of\nCalifornia San Diego are also contributors. SMT 2.0 updates and ex-\ntends the original SMT repository capabilities among which the original\npublication [5] focuses on different types of derivatives for surrogate\nmodels detailed hereafter.\n3 http://smt.readthedocs.io/en/latest\n4 https://github.com/SMTorg/smt\n5 https://github.com/SMTorg/smt/tree/master/tutorial/\nNotebookRunTestCases_Paper_SMT_v2.ipynb\n",
    "Advances in Engineering Software 188 (2024) 103571\n3\nP. Saves et al.\nTable 2\nImpact of using Numba on training time of the hierarchical Goldstein problem. Speedup\nis calculated excluding the JIT compilation table, as this step is only needed once after\nSMT installation.\nTraining set\nWithout numba\nNumba\nSpeedup\nJIT overhead\n15 points\n1.3 s\n1.1 s\n15%\n24 s\n150 points\n38 s\n7.4 s\n80%\n23 s\nA Python surrogate modeling framework with derivatives. One of the\noriginal main motivations for SMT was derivative support. In fact, none\nof the existing packages for surrogate modeling such as Scikit-learn in\nPython [7], SUMO in Matlab [42] or GPML in Matlab and Octave [43]\nfocuses on derivatives. Three types of derivatives are distinguished:\nprediction derivatives, training derivatives, and output derivatives.\nSMT also includes new models with derivatives such as Kriging with\nPartial Least Squares (KPLS) [44] and Regularized Minimal-energy\nTensor-product Spline (RMTS) [3]. These developed derivatives were\neven used in a novel algorithm called Gradient-Enhanced Kriging with\nPartial Least Squares (GEKPLS) [6] to use with adjoint methods, for\nexample [45].\nSoftware architecture, documentation, and automatic testing. SMT is orga-\nnized along three main sub-modules that implement a set of sampling\ntechniques (sampling_methods), benchmarking functions (problems),\nand surrogate modeling techniques (surrogate_models). The toolbox\ndocumentation6 is created using reStructuredText and Sphinx, a doc-\numentation generation package for Python, with custom extensions.\nCode snippets in the documentation pages are taken directly from\nactual tests in the source code and are automatically updated. The\noutput from these code snippets and tables of options are generated\ndynamically by custom Sphinx extensions. This leads to high-quality\ndocumentation with minimal effort. Along with user documentation,\ndeveloper documentation is also provided to explain how to contribute\nto SMT. This includes a list of API methods for the SurrogateModel,\nSamplingMethod, and Problem classes, that must be implemented\nto create a new surrogate modeling method, sampling technique, or\nbenchmarking problem. When a developer submits a pull request, it is\nmerged only after passing the automated tests and receiving approval\nfrom at least one reviewer. The repository on GitHub7 is linked to\ncontinuous integration tests (GitHub Actions) for Windows, Linux and\nMacOS, to a coverage test on coveralls.io and to a dependency version\ncheck for Python with DependaBot. Various parts of the source code\nhave been accelerated using Numba [46], an LLVM-based just-in-time\n(JIT) compiler for numpy-heavy Python code. Numba is applied to con-\nventional Python code using function decorators, thereby minimizing\nits impact on the development process and not requiring an additional\nbuild step. For a mixed Kriging surrogate with 150 training points, a\nspeedup of up to 80% is observed, see Table 2. The JIT compilation\nstep only needs to be done once when installing or upgrading SMT\nand adds an overhead of approximately 24 s on a typical workstation\nIn this paper, all results are obtained using an Intel\u00ae Xeon\u00ae CPU\nE5-2650 v4 @ 2.20 GHz core and 128 GB of memory with a Broadwell-\ngeneration processor front-end and a compute node of a peak power of\n844 GFlops.\n2.2. Organization of SMT 2.0\nThe main features of the open-source repository SMT 2.0 are\ndescribed in Fig. 1. More precisely, Sampling Methods, Problems\nand Surrogate models are kept from SMT 0.2 and two new\nsections Models applications and Interactive notebooks\nhave been added to the architecture of the code. These sections are\n6 https://smt.readthedocs.org\n7 https://github.com/SMTorg/smt\nhighlighted in blue and detailed on Fig. 1. The new major features\nimplemented in SMT 2.0 are highlighted in lavender whereas the\nlegacy features that were already in present in the original publication\nfor SMT 0.2 [5] are in black.\n2.3. New features within SMT 2.0\nThe main objective of this new release is to enable Kriging surrogate\nmodels for use with both hierarchical and mixed variables. Moreover,\nfor each of these five sub-modules described in Section 2.2, several\nimprovements have been made between the original version and the\nSMT 2.0 release.\nHierarchical and mixed design space. A new design space definition\nclass DesignSpace has been added that implements hierarchical\nand mixed functionalities. Design variables can either be continu-\nous (FloatVariable), ordered (OrdinalVariable) or categorical\n(CategoricalVariable). The integer type (IntegerVariable) rep-\nresents a special case of the ordered variable, specified by bounds\n(inclusive) rather than a list of possible values. The hierarchical struc-\nture of the design space can be defined using declare_decreed_var:\nthis function declares that a variable is a decreed variable that is\nactivated when the associated meta variable takes one of a set of\nspecified values, see Section 4 for background. The DesignSpace\nclass also implements mechanisms for sampling valid design vectors\n(i.e. design vectors that adhere to the hierarchical structure of the\ndesign space) using any of the below-mentioned samplers, for cor-\nrecting and imputing design vectors, and for requesting which design\nvariables are acting in a given design vector. Correction ensures that\nvariables have valid values (e.g. integers for discrete variables) [24],\nand imputation replaces non-acting variables by some default value\n(0 for discrete variables, mid-way between the bounds for continuous\nvariables in SMT 2.0) [47].\nSampling. SMT implements three methods for sampling. The first one\nis a na\u00efve approach, called Random that draws uniformly points along\nevery dimension. The second sampling method is called Full Fac-\ntorial and draws a point for every cross combination of variables,\nto have an \u2018\u2018exhaustive\u2019\u2019 design of experiments. The last one is the\nLatin Hypercube Sampling (LHS) [48] that draws a point in\nevery Latin square parameterized by a certain criterion. For LHS, a\nnew criterion to manage the randomness has been implemented and\nthe sampling method was adapted for multi-fidelity and mixed or\nhierarchical variables. More details about the new sampling techniques\nare given in Section 6.1.\nProblems. SMT implements two new engineering problems: a mixed\nvariant of a cantilever beam described in Section 3 and a hierarchical\nneural network described in Section 4.\nSurrogate models. In order to keep up with state-of-art, several re-\nleases done from the original version developed new options for the\nalready existing surrogates. In particular, compared to the original\npublication [5], SMT 2.0 adds gradient-enhanced neural networks [45]\nand marginal Gaussian process [49] models to the list of available\nsurrogates. More details about the new models are given in Section 6.2.\nApplications. Several applications have been added to the toolbox to\ndemonstrate the surrogate models capabilities. The most relevant ap-\nplication is efficient global optimization (EGO), a Bayesian optimiza-\ntion algorithm [50,51]. EGO optimizes expensive-to-evaluate black-box\nproblems with a chosen surrogate model and a chosen optimization\ncriterion [52]. The usage of EGO with hierarchical and mixed variables\nis described in Section 5.\n",
    "Advances in Engineering Software 188 (2024) 103571\n4\nP. Saves et al.\nFig. 1. Functionalities of SMT 2.0. The new major features implemented in SMT 2.0 compared to SMT 0.2 are highlighted with the lavender color.\nInteractive notebooks. These tutorials introduce and explain how to use\nthe toolbox for different surrogate models and applications.8 Every\ntutorial is available both as a .ipynb file and directly on Google\ncolab.9 In particular, a hierarchical and mixed variables dedicated\nnotebook is available to reproduce the results presented on this paper.10\nIn the following, Section 3 details the Kriging based surrogate\nmodels for mixed variables, and Section 4 presents our new Kriging\nsurrogate for hierarchical variables. Section 5 details the EGO applica-\ntion and the other new relevant features aforementioned are described\nsuccinctly in Section 6.\n8 https://github.com/SMTorg/smt/tree/master/tutorial\n9 https://colab.research.google.com/github/SMTorg/smt/\n10 https://github.com/SMTorg/smt/tree/master/tutorial/\nNotebookRunTestCases_Paper_SMT_v2.ipynb\n3. Surrogate models with mixed variables in SMT 2.0\nAs mentioned in Section 1, design variables can be either of continu-\nous or discrete type, and a problem with both types is a mixed-variable\nproblem. Discrete variables can be ordinal or categorical. A discrete\nvariable is ordinal if there is an order relation within the set of possible\nvalues. An example of an ordinal design variable is the number of\nengines in an aircraft. A possible set of values in this case could be\n2, 4, 8. A discrete variable is categorical if no order relation is known\nbetween the possible choices the variable can take. One example of a\ncategorical variable is the color of a surface. A possible example of a\nset of choices could be blue, red, green. The possible choices are called\nthe levels of the variable.\nSeveral methods have been proposed to address the recent increase\ninterest in mixed Kriging based models [30\u201333,35,39,53,54]. The main\ndifference from a continuous Kriging model is in the estimation of\n",
    "Advances in Engineering Software 188 (2024) 103571\n5\nP. Saves et al.\nTable 3\nCategorical kernels implemented in SMT 2.0.\nName\n\ud835\udf05(\ud835\udf19)\n\ud835\udef7(\ud835\udee9\ud835\udc56)\n# of hyperparam.\nSMT GD\nexp(\u2212\ud835\udf19)\n[\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57,\ud835\udc57 \u2236= 1\n2 \ud835\udf03\ud835\udc56 ; [\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57\u2260\ud835\udc57\u2032 \u2236= 0\n1\nSMT CR\nexp(\u2212\ud835\udf19)\n[\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57,\ud835\udc57 \u2236= [\ud835\udee9\ud835\udc56]\ud835\udc57,\ud835\udc57 ; [\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57\u2260\ud835\udc57\u2032 \u2236= 0\n\ud835\udc3f\ud835\udc56\nSMT EHH\nexp(\u2212\ud835\udf19)\n[\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57,\ud835\udc57 \u2236= 0 ; [\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57\u2260\ud835\udc57\u2032 \u2236= log \ud835\udf16\n2 ([\ud835\udc36(\ud835\udee9\ud835\udc56)\ud835\udc36(\ud835\udee9\ud835\udc56)\u22a4]\ud835\udc57,\ud835\udc57\u2032 \u2212 1)\n1\n2 (\ud835\udc3f\ud835\udc56)(\ud835\udc3f\ud835\udc56 \u2212 1)\nSMT HH\n\ud835\udf19\n[\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57,\ud835\udc57 \u2236= 1 ; [\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udc57\u2260\ud835\udc57\u2032 \u2236= [\ud835\udc36(\ud835\udee9\ud835\udc56)\ud835\udc36(\ud835\udee9\ud835\udc56)\u22a4]\ud835\udc57,\ud835\udc57\u2032\n1\n2 (\ud835\udc3f\ud835\udc56)(\ud835\udc3f\ud835\udc56 \u2212 1)\nthe categorical correlation matrix, which is critical to determine the\nmean and variance predictions. As mentioned in Section 1, approaches\nsuch as CR [30,39], continuous latent variables [54], and GD [31]\nuse a kernel-based method to estimate the correlation matrix. Other\nmethods estimate the correlation matrix by modeling the correlation\nentries directly [32,35,53], such as HH [33] and EHH [34]. The HH\ncorrelation kernel is of particular interest because it generalizes simpler\nkernels such as CR and GD [34]. In SMT 2.0, the correlation kernel is\nan option that can be set to either CR (CONT_RELAX_KERNEL), GD\n(GOWER_KERNEL),\nHH\n(HOMO_HSPHERE_KERNEL)\nor\nEHH\n(EXP_HOMO_HSPHERE_KERNEL).\n3.1. Mixed Gaussian processes\nThe continuous and ordinal variables are both treated similarly\nin SMT 2.0 with a continuous kernel, where the ordinal values are\nconverted to continuous through relaxation. For categorical variables,\nfour models (GD, CR, EHH and HH) can be used in SMT 2.0 if\nspecified by the API. This is why we developed a unified mathematical\nformulation that allows a unique implementation for any model.\nDenote \ud835\udc59 the number of categorical variables. For a given \ud835\udc56 \u2208\n{1, \u2026 , \ud835\udc59}, the \ud835\udc56th categorical variable is denoted \ud835\udc50\ud835\udc56 and its number\nof levels is denoted \ud835\udc3f\ud835\udc56. The hyperparameter matrix peculiar to this\nvariable \ud835\udc50\ud835\udc56 is\n\ud835\udee9\ud835\udc56 =\n\u23a1\n\u23a2\n\u23a2\n\u23a2\n\u23a2\u23a3\n[\ud835\udee9\ud835\udc56]1,1\n\ud835\udc7a\ud835\udc9a\ud835\udc8e.\n[\ud835\udee9\ud835\udc56]1,2\n[\ud835\udee9\ud835\udc56]2,2\n\u22ee\n\u22f1\n\u22f1\n[\ud835\udee9\ud835\udc56]1,\ud835\udc3f\ud835\udc56\n\u2026\n[\ud835\udee9\ud835\udc56]\ud835\udc3f\ud835\udc56\u22121,\ud835\udc3f\ud835\udc56\n[\ud835\udee9\ud835\udc56]\ud835\udc3f\ud835\udc56,\ud835\udc3f\ud835\udc56\n\u23a4\n\u23a5\n\u23a5\n\u23a5\n\u23a5\u23a6\n,\nand the categorical parameters are defined as \ud835\udf03\ud835\udc50\ud835\udc4e\ud835\udc61 = {\ud835\udee91, \u2026 , \ud835\udee9\ud835\udc59}. For\ntwo given inputs in the DoE, for example, the \ud835\udc5fth and \ud835\udc60th points, let\n\ud835\udc50\ud835\udc5f\n\ud835\udc56 and \ud835\udc50\ud835\udc60\n\ud835\udc56 be the associated categorical variables taking respectively\nthe \ud835\udcc1\ud835\udc56\n\ud835\udc5f and the \ud835\udcc1\ud835\udc56\n\ud835\udc60 level on the categorical variable \ud835\udc50\ud835\udc56. The categorical\ncorrelation kernel is defined by\n\ud835\udc58\ud835\udc50\ud835\udc4e\ud835\udc61(\ud835\udc50\ud835\udc5f, \ud835\udc50\ud835\udc60, \ud835\udf03\ud835\udc50\ud835\udc4e\ud835\udc61) =\n\ud835\udc59\u220f\n\ud835\udc56=1\n\ud835\udf05([\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udcc1\ud835\udc5f\n\ud835\udc56 ,\ud835\udcc1\ud835\udc60\n\ud835\udc56 ) \ud835\udf05([\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udcc1\ud835\udc60\n\ud835\udc56 ,\ud835\udcc1\ud835\udc5f\n\ud835\udc56 )\ud835\udf05([\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udcc1\ud835\udc5f\n\ud835\udc56 ,\ud835\udcc1\ud835\udc5f\n\ud835\udc56 )\ud835\udf05([\ud835\udef7(\ud835\udee9\ud835\udc56)]\ud835\udcc1\ud835\udc60\n\ud835\udc56 ,\ud835\udcc1\ud835\udc60\n\ud835\udc56 )\n(1)\nwhere \ud835\udf05 is either a positive definite kernel or identity and \ud835\udef7(.) is a\nsymmetric positive definite (SPD) function such that the matrix \ud835\udef7(\ud835\udee9\ud835\udc56)\nis SPD if \ud835\udee9\ud835\udc56 is SPD. For an exponential kernel, Table 3 gives the\nparameterizations of \ud835\udef7 and \ud835\udf05 that correspond to GD, CR, HH, and\nEHH kernels. The complexity of these different kernels depends on\nthe number of hyperparameters that characterizes them. As defined\nby Saves et al. [34], for every categorical variable \ud835\udc56 \u2208 {1, \u2026 , \ud835\udc59}, the\nmatrix \ud835\udc36(\ud835\udee9\ud835\udc56) \u2208 R\ud835\udc3f\ud835\udc56\u00d7\ud835\udc3f\ud835\udc56 is lower triangular and built using a hypersphere\ndecomposition [55,56] from the symmetric matrix \ud835\udee9\ud835\udc56 \u2208 R\ud835\udc3f\ud835\udc56\u00d7\ud835\udc3f\ud835\udc56 of\nhyperparameters. The variable \ud835\udf16 is a small positive constant and the\nvariable \ud835\udf03\ud835\udc56 denotes the only positive hyperparameter that is used for\nthe Gower distance kernel.\nAnother Kriging based model that can use mixed variables is Kriging\nwith partial least squares (KPLS) [57]. KPLS adapts Kriging to high\ndimensional problems by using a reduced number of hyperparameters\nthanks to a projection into a smaller space. Also, for a general surrogate,\nnot necessarily Kriging, SMT 2.0 uses continuous relaxation to allow\nwhatever model to handle mixed variables. For example, we can use\nmixed variables with least squares (LS) or quadratic polynomial (QP)\nmodels. We now illustrate the abilities of the toolbox in terms of mixed\nmodeling over an engineering test case.\nTable 4\nResults of the cantilever beam models [34, Table 4].\nCategorical\nkernel\nDisplacement\nerror (cm)\nLikelihood\n# of\nhyperparam.\nSMT GD\n1.3861\n111.13\n3\nSMT CR\n1.1671\n155.32\n14\nSMT EHH\n0.1613\n236.25\n68\nSMT HH\n0.2033\n235.66\n68\n3.2. An engineering design test-case\nA classic engineering problem commonly used for model validation\nis the beam bending problem [32,58]. This problem is illustrated\non Fig. 2(a) and consists of a cantilever beam in its linear range loaded\nat its free end with a force \ud835\udc39. As in Cheng et al. [58], the Young\nmodulus is \ud835\udc38 = 200 GPa and the chosen load is \ud835\udc39 = 50 kN. Also, as\nin Roustant et al. [32], 12 possible cross-sections can be used. These\n12 sections consist of 4 possible shapes that can be either hollow, thick\nor full as illustrated in Fig. 2(b).\nTo compare the mixed Kriging models of SMT 2.0, we draw a 98\npoint LHS as training set and the validation set is a grid of 12 \u00d7 30 \u00d7\n30 = 10800 points. For the four implemented methods, displacement\nerror (computed with a root-mean-square error criterion), likelihood,\nnumber of hyperparameters and computational time for every model\nare shown in Table 4. For the continuous variables, we use the square\nexponential kernel. More details are found in [34]. As expected, the\ncomplex EHH and HH models lead to a lower displacement error and a\nhigher likelihood value, but use more hyperparameters and increase\nthe computational cost compared to GD and CR. On this test case,\nthe kernel EHH is easier to optimize than HH but in general, they\nare similar in terms of performance. Also, by default SMT 2.0 uses\nCR as it is known to be a good trade-off between complexity and\nperformance [59].\n4. Surrogate models with hierarchical variables in SMT 2.0\nTo introduce the newly developed Kriging model for hierarchical\nvariables implemented in SMT 2.0, we present the general mathe-\nmatical framework for hierarchical and mixed variables established\nby Audet et al. [38]. In SMT 2.0, two variants of our new method\nare implemented, namely SMT Alg-Kernel and SMT Arc-Kernel.\nIn particular, the SMT Alg-Kernel is a novel correlation kernel\nintroduced in this paper.\n4.1. The hierarchical variables framework\nA problem structure is classified as hierarchical when the sets of\nactive variables depend on architectural choices. This occurs frequently\nin industrial design problems. In hierarchical problems, we can classify\nvariables as neutral, meta (also known as dimensional) or decreed\n(also known as conditionally active) as detailed in Audet et al. [38].\nNeutral variables are the variables that are not affected by the hierarchy\nwhereas the value assigned to meta variables determines which decreed\nvariables are activated. For example, a meta variable could be the\nnumber of engines. If the number of engines changes, the number of\ndecreed bypass ratios that every engine should specify also changes.\n",
    "Advances in Engineering Software 188 (2024) 103571\n6\nP. Saves et al.\nFig. 2. Cantilever beam problem [34, Figure 6].\nFig. 3. Variables classification as used in SMT 2.0.\nHowever, the wing aspect ratio being neutral, it is not affected by this\nhierarchy.\nProblems involving hierarchical variables are generally dependant\non discrete architectures and as such involve mixed variables. Hence,\nin addition to their role (neutral, meta or decreed), each variable also\nhas a variable type amongst categorical, ordinal or continuous. For the\nsake of simplicity and because both continuous and ordinal variables\nare treated similarly [34], we chose to regroup them as quantitative\nvariables. For instance, the neutral variables \ud835\udc65neu may be partitioned\ninto different variable types, such that \ud835\udc65neu = (\ud835\udc65cat\nneu, \ud835\udc65qnt\nneu) where \ud835\udc65cat\nneu\nrepresents the categorical variables and \ud835\udc65qnt\nneu are the quantitative ones.\nThe variable classification scheme in SMT 2.0 is detailed in Fig. 3.\nTo explain the framework and the new Kriging model, we illustrate\nthe inputs variables of the model using a classical machine learn-\ning problem related to the hyperparameters optimization of a fully-\nconnected Multi-Layer Perceptron (MLP) [38] on Fig. 4. In\nTable 5,\nwe detail the input variables of the model related to the MLP problem\n(i.e., the hyperparameters of the neural network, together with their\ntypes and roles). To keep things clear and concise, the chosen problem\nis a simplification of the original problem developed by Audet et al.\n[38]. Regarding the MLP problem of Fig. 4 and following the classi-\nfication scheme of Fig. 3, we start by separating the input variables\naccording to their role. In fact,\n1. changing the number of hidden layers modifies the number\nof inputs variables. Therefore, \u2018\u2018# of hidden layers\u2019\u2019 is a meta\nvariable.\n2. The number of neurons in the hidden layer number \ud835\udc58 is either\nincluded or excluded. For example, the \u2018\u2018# of neurons in the 3rd\nlayer\u2019\u2019 would be excluded for an input that only has 2 hidden\nlayers. Therefore, \u2018\u2018# of neurons hidden layer \ud835\udc58\u2019\u2019 are decreed\nvariables.\n3. The \u2018\u2018Learning rate\u2019\u2019, \u2018\u2018Momentum\u2019\u2019, \u2018\u2018Activation function\u2019\u2019 and\n\u2018\u2018Batch size\u2019\u2019 are not affected by the hierarchy choice. Therefore,\nthey are neutral variables.\nAccording to their types, the MLP input variables can be classified as\nfollows:\n4. The meta variable \u2018\u2018# of hidden layers\u2019\u2019 is an integer and, as\nsuch, is represented by the component \ud835\udc65qnt\nmet.\n5. The decreed variables \u2018\u2018# of neurons hidden layer \ud835\udc58\u2019\u2019 are integers\nand, as such, are represented by the component \ud835\udc65qnt\ndec.\n6. The \u2018\u2018Learning rate\u2019\u2019, \u2018\u2018Momentum\u2019\u2019, \u2018\u2018Activation function\u2019\u2019 and\n\u2018\u2018Batch size\u2019\u2019 are, respectively, continuous, for the first two (ev-\nery value between two bounds), categorical (qualitative between\nthree choices) and integer (quantitative between 6 choices).\nTherefore, the \u2018\u2018Activation function\u2019\u2019 and the \u2018\u2018Momentum\u2019\u2019 are\nrepresented by the component \ud835\udc65cat\nneu. The \u2018\u2018Learning rate\u2019\u2019 and the\n\u2018\u2018Batch size\u2019\u2019 are represented by the component \ud835\udc65qnt\nneu.\nTo model hierarchical variables, as proposed in [38], we separate\nthe input space \ue244 as (\ue244neu, \ue244met, \ue244dec) where \ue244dec =\n\u22c3\n\ud835\udc65met\u2208\ue244met\n\ue244inc(\ud835\udc65met).\n",
    "Advances in Engineering Software 188 (2024) 103571\n7\nP. Saves et al.\nFig. 4. The Multi-Layer Perceptron (MLP) problem.\nSource: Figure adapted from [38, Figure 1].\nTable 5\nA detailed description of the variables in the MLP problem.\nMLP\nHyperparameters\nVariable\nDomain\nType\nRole\nLearning rate\n\ud835\udc5f\n[10\u22125, 10\u22122]\nFLOAT\nNEUTRAL\nMomentum\n\ud835\udefc\n[0, 1]\nFLOAT\nNEUTRAL\nActivation\nfunction\n\ud835\udc4e\n{\ud835\udc45\ud835\udc52\ud835\udc3f\ud835\udc48, \ud835\udc46\ud835\udc56\ud835\udc54\ud835\udc5a\ud835\udc5c\ud835\udc56\ud835\udc51, \ud835\udc47 \ud835\udc4e\ud835\udc5b\u210e}\nENUM\nNEUTRAL\nBatch size\n\ud835\udc4f\n{8, 16, \u2026 , 128, 256}\nORD\nNEUTRAL\n# of hidden\nlayers\n\ud835\udc59\n{1, 2, 3}\nORD\nMETA\n# of neurons\nhidden layer \ud835\udc58\n\ud835\udc5b\ud835\udc58\n{50, 51, \u2026 , 55}\nORD\nDECREED\nHence, for a given point \ud835\udc65 \u2208 \ue244, one has \ud835\udc65 = (\ud835\udc65neu, \ud835\udc65met, \ud835\udc65inc(\ud835\udc65met)), where\n\ud835\udc65neu \u2208 \ue244neu, \ud835\udc65met \u2208 \ue244met and \ud835\udc65inc(\ud835\udc62met) \u2208 \ue244inc(\ud835\udc62met) are defined as follows:\n\u2022 The components \ud835\udc65neu \u2208 \ue244neu gather all neutral variables that\nare not impacted by the meta variables but needed. For ex-\nample, in the MLP problem, \ue244neu gathers the possible learning\nrates, momentum, activation functions and batch sizes. Namely,\nfrom Table 5, \ue244neu = [10\u22125, 10\u22122]\u00d7[0, 1] \u00d7 {ReLu, Sigmoid, Tanh}\u00d7\n{8, 16, \u2026 , 256}.\n\u2022 The components \ud835\udc65met gather the meta (also known as dimen-\nsional) variables that determine the inclusion or exclusion of\nother variables. For example, in the MLP problem, \ue244met represents\nthe possible numbers of layers in the MLP. Namely, from Table 5,\n\ue244met = {1, 2, 3}.\n\u2022 The components \ud835\udc65inc(\ud835\udc65met), contain the decreed variables whose\ninclusion (decreed-included) or exclusion (decreed-excluded) is\ndetermined by the values of the meta components \ud835\udc65met. For exam-\nple, in the MLP problem, \ue244dec represents the number of neurons\nin the decreed layers. Namely, from Table 5, \ue244inc(\ud835\udc65met = 3) =\n[50, 55]3, \ue244inc(\ud835\udc65met = 2) = [50, 55]2 and \ue244inc(\ud835\udc65met = 1) = [50, 55].\n4.2. A Kriging model for hierarchical variables\nIn this section, a new method to build a Kriging model with hierar-\nchical variables is introduced based on the framework aforementioned.\nThe proposed methods are included in SMT 2.0.\n4.2.1. Motivation and state-of-the-art\nAssuming that the decreed variables are quantitative, Hutter and\nOsborne [21] proposed several kernels for the hierarchical context. A\nclassic approach, called the imputation method (Imp-Kernel) leads\nto an efficient paradigm in practice that can be easily integrated into\na more general framework as proposed by Bussemaker et al. [24].\nHowever, this kernel lacks depth and depends on arbitrary choices.\nTherefore, Hutter and Osborne [21] also proposed a more general\nkernel, called Arc-Kernel and Horn et al. [36] generalized this\nkernel even more and proposed a new formulation called the Wedge-\nKernel [37]. The drawbacks of these two methods are that they add\nsome extra hyperparameters for every decreed dimension (respectively\none extra hyperparameter for the Arc-Kernel and two hyperparam-\neters for the Wedge-Kernel) and that they need a normalization\naccording to the bounds. More recently, Pelamatti et al. [60] developed\na hierarchical kernel for Bayesian optimization. However, our work\nis also more general thanks to the framework introduced earlier [38]\nthat considers variable-wise formulation and is more flexible as we are\nallowing sub-problems to be intersecting.\nIn the following, we describe our new method to build a correlation\nkernel for hierarchical variables. In particular, we introduce a new alge-\nbraic kernel called Alg-Kernel that behaves like the Arc-Kernel\nwhilst correcting most of its drawbacks. In particular, our kernel does\nnot add any hyperparameters, and the normalization is handled in a\nnatural way.\n4.2.2. A new hierarchical correlation kernel\nFor modeling purposes, we assume that the decreed space is quan-\ntitative, i.e., \ue244dec = \ue244qnt\ndec. Let \ud835\udc62 \u2208 \ue244 be an input point partitioned as\n",
    "Advances in Engineering Software 188 (2024) 103571\n8\nP. Saves et al.\n\ud835\udc62 = (\ud835\udc62neu, \ud835\udc62met, \ud835\udc62inc(\ud835\udc62met)) and, similarly, \ud835\udc63 \u2208 \ue244 is another input such\nthat \ud835\udc63 = (\ud835\udc63neu, \ud835\udc63met, \ud835\udc63inc(\ud835\udc63met)). The new kernel \ud835\udc58 that we propose for\nhierarchical variables is given by\n\ud835\udc58(\ud835\udc62, \ud835\udc63) = \ud835\udc58neu(\ud835\udc62neu, \ud835\udc63neu) \u00d7 \ud835\udc58met(\ud835\udc62met, \ud835\udc63met)\n\u00d7 \ud835\udc58met,dec([\ud835\udc62met, \ud835\udc62inc(\ud835\udc62met)], [\ud835\udc63met, \ud835\udc63inc(\ud835\udc63met)]),\n(2)\nwhere \ud835\udc58neu, \ud835\udc58met and \ud835\udc58met,dec are as follows:\n\u2022 \ud835\udc58neu represents the neutral kernel that encompasses both categor-\nical and quantitative neutral variables, i.e., \ud835\udc58neu can be decom-\nposed into two parts \ud835\udc58neu(\ud835\udc62neu, \ud835\udc63neu) = \ud835\udc58cat(\ud835\udc62cat\nneu, \ud835\udc63cat\nneu)\ud835\udc58qnt(\ud835\udc62qnt\nneu, \ud835\udc63qnt\nneu).\nThe categorical kernel, denoted \ud835\udc58cat, could be any Symmetric\nPositive Definite (SPD) [34] mixed kernel (see Section 3). For\nthe quantitative (integer or continuous) variables, a distance-\nbased kernel is used. The chosen quantitative kernel (Exponential,\nMat\u00e9rn, ...), always depends on a given distance \ud835\udc51. For example,\nthe \ud835\udc5b-dimensional exponential kernel gives\n\ud835\udc58qnt(\ud835\udc62qnt, \ud835\udc63qnt) =\n\ud835\udc5b\n\u220f\n\ud835\udc56=1\nexp(\u2212\ud835\udc51(\ud835\udc62qnt\n\ud835\udc56\n, \ud835\udc63qnt\n\ud835\udc56\n)).\n(3)\n\u2022 \ud835\udc58met is the meta variables related kernel. It is also separated into\ntwo parts: \ud835\udc58met(\ud835\udc62met, \ud835\udc63met) = \ud835\udc58cat(\ud835\udc62cat\nmet, \ud835\udc63cat\nmet)\ud835\udc58qnt(\ud835\udc62qnt\nmet, \ud835\udc63qnt\nmet) where the\nquantitative kernel is ordered and not continuous because meta\nvariables take value in a finite set.\n\u2022 \ud835\udc58met,dec is an SPD kernel that models the correlations between the\nmeta levels (all the possible subspaces) and the decreed variables.\nIn what comes next, we detailed this kernel.\n4.2.3. Towards an algebraic meta-decreed kernel\nMeta-decreed\nkernels\nlike\nthe\nimputation\nkernel\nor\nthe\nArc-Kernel were first proposed in [21,47] and the distance-based\nkernels such as Arc-Kernel or Wedge-Kernel [37] were proven\nto be SPD. Nevertheless, to guarantee this SPD property, the same\nhyperparameters are used to model the correlations between the meta\nlevels and between the decreed variables [47]. For this reason, the\nArc-Kernel includes additional continuous hyperparameters which\nmakes the training of the GP models more expensive and introduces\nmore numerical stability issues. In this context, we are proposing a\nnew algebraic meta-decreed kernel (denoted as Alg-Kernel) that\nenjoys similar properties as Arc-Kernel but without using additional\ncontinuous hyperparameters nor rescaling. In the SMT 2.0 release, we\nincluded Alg-Kernel and a simpler version of Arc-Kernel that do\nnot relies on additional hyperparameters.\nOur proposed Alg-Kernel kernel is given by\n\ud835\udc58alg\nmet,dec([\ud835\udc62met, \ud835\udc62inc(\ud835\udc62met)], [\ud835\udc63met, \ud835\udc63inc(\ud835\udc63met)])\n= \ud835\udc58alg\nmet(\ud835\udc62met, \ud835\udc63met) \u00d7 \ud835\udc58alg\ndec(\ud835\udc62inc(\ud835\udc62met), \ud835\udc63inc(\ud835\udc63met)).\n(4)\nMathematically, we could consider that there is only one meta variable\nwhose levels correspond to every possible included subspace. Let \ud835\udc3csub\ndenotes the components indices of possible subspaces, the subspaces\nparameterized by the meta component \ud835\udc62met are defined as \ue244inc(\ud835\udc62met =\n\ud835\udc59), \ud835\udc59 \u2208 \ud835\udc3csub. It follows that the fully extended continuous decreed\nspace writes as \ue244dec = \u22c3\n\ud835\udc59\u2208\ud835\udc3csub \ue244inc(\ud835\udc62met = \ud835\udc59) and \ud835\udc3cdec is the set of the\nassociated indices. Let \ud835\udc3c\ud835\udc56\ud835\udc5b\ud835\udc61\ud835\udc52\ud835\udc5f\n\ud835\udc62,\ud835\udc63\ndenotes the set of components related to\nthe space \ue244inc(\ud835\udc62met, \ud835\udc63met) containing the variables decreed-included in\nboth \ue244inc(\ud835\udc62met) and \ue244inc(\ud835\udc63met).\nSince the decreed variables are quantitative, one has\n\ud835\udc58alg\ndec(\ud835\udc62inc(\ud835\udc62met), \ud835\udc63inc(\ud835\udc63met)) = \ud835\udc58qnt(\ud835\udc62inc(\ud835\udc62met), \ud835\udc63inc(\ud835\udc63met))\n=\n\u220f\n\ud835\udc56\u2208\ud835\udc3c\ud835\udc56\ud835\udc5b\ud835\udc61\ud835\udc52\ud835\udc5f\n\ud835\udc62,\ud835\udc63\n\ud835\udc58qnt([\ud835\udc62inc(\ud835\udc62met)]\ud835\udc56, [\ud835\udc63inc(\ud835\udc63met)]\ud835\udc56)\n(5)\nThe construction of the quantitative kernel \ud835\udc58qnt depends on a given\ndistance denoted \ud835\udc51alg. The kernel \ud835\udc58alg\nmet is an induced meta kernel that\ndepends on the same distance \ud835\udc51alg to preserve the SPD property of\n\ud835\udc58alg\nmet,dec. For every \ud835\udc56 \u2208 \ud835\udc3cdec, if \ud835\udc56 \u2208 \ud835\udc3c\ud835\udc56\ud835\udc5b\ud835\udc61\ud835\udc52\ud835\udc5f\n\ud835\udc62,\ud835\udc63 , the new algebraic distance is\ngiven by\n\ud835\udc51alg([\ud835\udc62inc(\ud835\udc62met)]\ud835\udc56, [\ud835\udc63inc(\ud835\udc63met)]\ud835\udc56) =\n\u239b\n\u239c\n\u239c\n\u239c\u239d\n2|[\ud835\udc62inc(\ud835\udc62met)]\ud835\udc56 \u2212 [\ud835\udc63inc(\ud835\udc63met)]\ud835\udc56|\n\u221a\n[\ud835\udc62inc(\ud835\udc62met)]\ud835\udc56\n2 + 1\n\u221a\n[\ud835\udc63inc(\ud835\udc63met)]\ud835\udc56\n2 + 1\n\u239e\n\u239f\n\u239f\n\u239f\u23a0\n\ud835\udf03\ud835\udc56,\n(6)\nwhere \ud835\udf03\ud835\udc56 \u2208 R+ is a continuous hyperparameter. Otherwise, if \ud835\udc56 \u2208 \ud835\udc3cdec\nbut \ud835\udc56 \u2209 \ud835\udc3c\ud835\udc56\ud835\udc5b\ud835\udc61\ud835\udc52\ud835\udc5f\n\ud835\udc62,\ud835\udc63 , there should be a non-zero residual distance between the\ntwo different subspaces \ue244inc(\ud835\udc62met) and \ue244inc(\ud835\udc63met) to ensure the kernel\nSPD property. To have a residual not depending on the decreed values,\nour model considers that there is a unit distance\n\ud835\udc51alg([\ud835\udc62inc(\ud835\udc62met)]\ud835\udc56, [\ud835\udc63inc(\ud835\udc63met)]\ud835\udc56) = 1.0 \ud835\udf03\ud835\udc56, \u2200\ud835\udc56 \u2208 \ud835\udc3cdec \u29f5 \ud835\udc3c\ud835\udc56\ud835\udc5b\ud835\udc61\ud835\udc52\ud835\udc5f\n\ud835\udc62,\ud835\udc63 .\nThe induced meta kernel \ud835\udc58alg\nmet(\ud835\udc62met, \ud835\udc63met) to preserve the SPD property\nof \ud835\udc58alg is defined as:\n\ud835\udc58alg\nmet(\ud835\udc62met, \ud835\udc63met) =\n\u220f\n\ud835\udc56\u2208\ud835\udc3cmet\n\ud835\udc58qnt(1.0 \ud835\udf03\ud835\udc56).\n(7)\nNot only our kernel of Eq. (2) uses less hyperparameters than the Arc-\nKernel (as we cut off its extra parameters) but it is also a more flexible\nkernel as it allows different kernels for meta and decreed variables.\nMoreover, another advantage of our kernel is that it is numerically\nmore stable thanks to the new non-stationary [61] algebraic distance\ndefined in Eq. (7) [62]. Our proposed distance also does not need any\nrescaling by the bounds to have values between 0 and 1.\nIn what comes next, we will refer to the implementation of the\nkernels Arc-Kernel and Alg-Kernel by SMT Arc-Kernel and\nSMT Alg-Kernel. We note also that the implementation of SMT\nArc-Kernel differs slightly from the original Arc-Kernel as we\nfixed some hyperparameters to 1 in order to avoid adding extra hy-\nperparameters and use the formulation of Eq. (2) and rescaling of the\ndata.\n4.2.4. Illustration on the MLP problem\nIn this section, we illustrate the hierarchical Arc-Kernel on the\nMLP example. For that sake, we consider two design variables \ud835\udc62 and\n\ud835\udc63 such that \ud835\udc62 = (2.10\u22124, 0.9, ReLU, 16, 2, 55, 51) and \ud835\udc63 = (5.10\u22123, 0.8,\nSigmoid, 64, 3, 50, 54, 53). Since the value of \ud835\udc62met (i.e., the number of\nhidden layers) differs from one point to another (namely, 2 for \ud835\udc62 and 3\nfor \ud835\udc63), the associated variables \ud835\udc62inc(\ud835\udc62met) have either 2 or 3 variables\nfor the number of neurons in each layer (namely 55 and 51 for \ud835\udc62,\nand 50, 54 and 53 for the point \ud835\udc63). In our case, 8 hyperparame-\nters ([\ud835\udc451]1,2, \ud835\udf031, \u2026 , \ud835\udf037) will have to be optimized where \ud835\udc58 is given by\nEq. (2). These 7 hyperparameters can be described using our proposed\nframework as follows:\n\u2022 For the neutral components, we have \ud835\udc62neu = (2.10\u22124, 0.9, ReLU, 16)\nand \ud835\udc63neu = (5.10\u22123, 0.8, Sigmoid, 64). Therefore, for a categorical\nmatrix kernel \ud835\udc451 and a square exponential quantitative kernel,\n\ud835\udc58neu(\ud835\udc62neu, \ud835\udc63neu) = \ud835\udc58cat(\ud835\udc62cat\nneu, \ud835\udc63cat\nneu)\ud835\udc58qnt(\ud835\udc62qnt\nneu, \ud835\udc63qnt\nneu)\n= [\ud835\udc451]1,2 exp [\u2212\ud835\udf031(2.10\u22124 \u2212 5.10\u22123)2]\nexp [\u2212\ud835\udf032(0.9 \u2212 0.8)2] exp [\u2212\ud835\udf033(16 \u2212 64)2].\nThe values [\ud835\udc451]1,2, \ud835\udf031, \ud835\udf032 and \ud835\udf033 need to be optimized. Here,\n[\ud835\udc451]1,2 is the correlation between \"ReLU\" and \"Sigmoid\".\n\u2022 For the meta components, we have \ud835\udc62met\n= 2 and \ud835\udc63met\n= 3.\nTherefore, for a square exponential quantitative kernel,\n\ud835\udc58met(\ud835\udc62met, \ud835\udc63met) = \ud835\udc58cat(\ud835\udc62cat\nmet, \ud835\udc63cat\nmet)\ud835\udc58qnt(\ud835\udc62qnt\nmet, \ud835\udc63qnt\nmet)\n= exp [\u2212\ud835\udf034(3 \u2212 2)2].\nThe value \ud835\udf034 needs to be optimized.\n",
    "Advances in Engineering Software 188 (2024) 103571\n9\nP. Saves et al.\n\u2022 For the meta-decreed kernel, we have [\ud835\udc62met, \ud835\udc62inc(\ud835\udc62met)] = [2, (55, 51)]\nand [\ud835\udc63met, \ud835\udc63inc(\ud835\udc63met)] = [3, (50, 54, 53)] which gives\n\ud835\udc58alg\nmet,dec([\ud835\udc62met, \ud835\udc62inc(\ud835\udc62met)], [\ud835\udc63met, \ud835\udc63inc(\ud835\udc63met)])\n= \ud835\udc58alg\nmet(2, 3) \ud835\udc58alg\ndec((55, 51), (50, 54, 53)).\nThe distance \ud835\udc51alg(51, 54) =\n(\n2\u00d7|51\u221254|\n\u221a\n512+1\n\u221a\n542+1\n)\n\ud835\udf036 = 2.178.10\u22123 \ud835\udf036. In\ngeneral, for surrogate models, and in particular in SMT 2.0, the\ninput data are normalized. With a unit normalization from [50, 55]\nto [0, 1], we would have \ud835\udc51alg(0.2, 0.8) =\n(\n2\u00d70.6\n\u221a\n0.22+1\n\u221a\n0.62+1\n)\n\ud835\udf036 =\n0.919 \ud835\udf036. Similarly, we have, between 55 and 50, \ud835\udc51alg(0, 1) =\n1.414 \ud835\udf035. Hence, for a square exponential quantitative kernel, one\ngets\n\ud835\udc58alg\nmet,dec([\ud835\udc62met, \ud835\udc62inc(\ud835\udc62met)], [\ud835\udc63met, \ud835\udc63inc(\ud835\udc63met)])\n= exp [\u2212\ud835\udf037] \u00d7 exp [\u22121.414 \ud835\udf035] \u00d7 exp [\u22120.919 \ud835\udf036],\nwhere the meta induced component is \ud835\udc58alg\nmet(\ud835\udc62met, \ud835\udc63met) = exp [\u2212\ud835\udf037]\nbecause the decreed value 53 in \ud835\udc63 has nothing to be compared\nwith in \ud835\udc62 as in Eq. (7). The values \ud835\udf035, \ud835\udf036 and \ud835\udf037 need to be opti-\nmized which complete the description of the hyperparameters.\nWe note that for the MLP problem, Alg-Kernel models use\n10 hyperparameters whereas the Arc-Kernel would require\n12 hyperparameters without the meta kernel (\ud835\udf034) but with 3\nextra decreed hyperparameters and the Wedge-Kernel would\nrequire 15 hyperparameters. For deep learning applications, a\nmore complex perceptron with up to 10 hidden layers would\nrequire 17 hyperparameters with SMT 2.0 models against 26\nfor Arc-Kernel and 36 for Wedge-Kernel. The next section\nillustrates the interest of our method to build a surrogate model\nfor this neural network engineering problem.\n4.3. A neural network test-case using SMT 2.0\nIn this section, we apply our models to the hyperparameters opti-\nmization of a MLP problem aforementioned of Fig. 4. Within SMT 2.0\nan example illustrates this MLP problem. For the sake of showing the\nKriging surrogate abilities, we implemented a dummy function with no\nsignificance to replace the real black-box that would require training\na whole Neural Network (NN) with big data. This function requires a\nnumber of variables that depends on the value of the meta variable,\ni.e the number of hidden layers. To simplify, we have chosen only\n1, 2 or 3 hidden layers and therefore, we have 3 decreed variables\nbut deep neural networks could also be investigated as our model can\ntackle a few dozen variables. A test case (test_hierarchical_variables_NN)\nshows that our model SMT Alg-Kernel interpolates the data prop-\nerly, checks that the data dimension is correct and also asserts that\nthe inactive decreed variables have no influence over the prediction.\nIn Fig. 5 we illustrate the usage of Kriging surrogates with hierarchical\nand mixed variables based on the implementation of SMT 2.0 for\ntest_hierarchical_variables_NN.\nTo compare the hierarchical models of SMT 2.0 (SMT Alg-Kernel\nand SMT Arc-Kernel) with the state-of-the-art imputation method\npreviously used on industrial application (Imp-Kernel) [24], we\ndraw a 99 point LHS (33 points by meta level) as a training set and the\nvalidation set is a LHS of 3\u00d71000 = 3000 points. For the Imp-Kernel,\nthe decreed-excluded values are replaced by 52 because the mean value\n52.5 is not an integer (by default, SMT rounds to the floor value).\nFor the three methods, the precision (computed with a root-mean-\nsquare error RMSE criterion), the likelihood and the computational\ntime are shown in Table 6. For this problem, we can see that SMT Alg-\nkernel gives better performance than the imputation method or SMT\nArc-kernel. Also, as all methods use the same number of hyperpa-\nrameters, they have similar time performances. A direct application of\nTable 6\nResults on the neural network model.\nHierarchical method\nPrediction\nerror (RMSE)\nLikelihood\n# of\nhyperparam.\nSMT Alg-kernel\n3.7610\n176.11\n10\nSMT Arc-kernel\n4.9208\n162.01\n10\nImp-Kernel\n4.5455\n170.64\n10\nour modeling method is Bayesian optimization to perform quickly the\nhyperparameter optimization of a neural network [63].\n5. Bayesian optimization within SMT 2.0\nEfficient global optimization (EGO) is a sequential Bayesian op-\ntimization algorithm designed to find the optimum of a black-box\nfunction that may be expensive to evaluate [52]. EGO starts by fitting\na Kriging model to an initial DoE, and then uses an acquisition function\nto select the next point to evaluate. The most used acquisition function\nis the expected improvement. Once a new point has been evaluated, the\nKriging model is updated. Successive updates increase the model accu-\nracy over iterations. This enrichment process repeats until a stopping\ncriterion is met.\nBecause SMT 2.0 implements Kriging models that handle mixed\nand hierarchical variables, we can use EGO to solve problems in-\nvolving such design variables. Other Bayesian optimization algorithms\noften adopt approaches based on solving subproblems with contin-\nuous or non-hierarchical Kriging. This subproblem approach is less\nefficient and scales poorly, but it can only solve simple problems.\nSeveral Bayesian optimization software packages can handle mixed or\nhierarchical variables with such a subproblem approach. The pack-\nages include BoTorch [25], SMAC [65], Trieste [66], HEBO [67],\nOpenBox [68], and Dragonfly [69].\n5.1. A mixed optimization problem\nFig. 6 compares the four EGO methods implemented in SMT 2.0:\nSMT GD, SMT CR, SMT EHH and SMT HH. The mixed test case that\nillustrates Bayesian optimization is a toy test case [64] detailed in Ap-\npendix A. This test case has two variables, one continuous and one\ncategorical with 10 levels. To assess the performance of our algorithm,\nwe performed 20 runs with different initial DoE sampled by LHS.\nEvery DoE consists of 5 points and we chose a budget of 55 infill\npoints. Fig. 6(a) plots the convergence curves for the four methods. In\nparticular, the median is the solid line, and the first and third quantiles\nare plotted in dotted lines. To visualize better the data dispersion,\nthe boxplots of the 20 best solutions after 20 evaluations are plotted\nin Fig. 6(b). As expected, the more a method is complex, the better\nthe optimization. Both SMT HH and SMT EHH converged in around 18\nevaluations whereas SMT CR and SMT GD take around 26 iterations as\nshown on Fig. 6(a). Also, the more complex the model, the closer the\noptimum is to the real value as shown on Fig. 6(b).\nIn Fig. 7 we illustrate how to use EGO with mixed variables based\non the implementation of SMT 2.0. The illustrated problem is a mixed\nvariant of the Branin function [70].\nNote that a dedicated notebook is available to reproduce the results\npresented in this paper and the mixed integer notebook also includes\nan extra mechanical application with composite materials [41].11\n11 https://colab.research.google.com/github/SMTorg/smt/blob/master/\ntutorial/SMT_MixedInteger_application.ipynb\n",
    "Advances in Engineering Software 188 (2024) 103571\n10\nP. Saves et al.\nFig. 5. Example of usage of Hierarchical and Mixed Kriging surrogate.\n",
    "Advances in Engineering Software 188 (2024) 103571\n11\nP. Saves et al.\nFig. 6. Optimization results for the Toy function [64].\nFig. 7. Example of usage of mixed surrogates for Bayesian optimization.\n",
    "Advances in Engineering Software 188 (2024) 103571\n12\nP. Saves et al.\nFig. 8. Optimization results for the hierarchical Goldstein function.\n5.2. A hierarchical optimization problem\nThe hierarchical test case considered in this paper to illustrate\nBayesian optimization is a modified Goldstein function [60] detailed\nin Appendix B. The resulting optimization problem involves 11 vari-\nables: 5 are continuous, 4 are integer (ordinal) and 2 are categorical.\nThese variables consist in 6 neutral variables, 1 dimensional (or meta)\nvariable and 4 decreed variables. Depending on the meta variable\nvalues, 4 different sub-problems can be identified. The optimization\nproblem is given by:\nmin \ud835\udc53(\ud835\udc65cat\nneu, \ud835\udc65qnt\nneu, \ud835\udc65cat\n\ud835\udc5a , \ud835\udc65qnt\ndec)\nw.r.t. \ud835\udc65cat\nneu = \ud835\udc642 \u2208 {0, 1}\n\ud835\udc65qnt\nneu = (\ud835\udc651, \ud835\udc652, \ud835\udc655, \ud835\udc673, \ud835\udc674) \u2208 {0, 100}3 \u00d7 {0, 1, 2}2\n\ud835\udc65cat\n\ud835\udc5a = \ud835\udc641 \u2208 {0, 1, 2, 3}\n\ud835\udc65qnt\ndec = (\ud835\udc653, \ud835\udc654, \ud835\udc671, \ud835\udc672) \u2208 {0, 100}2 \u00d7 {0, 1, 2}2\n(8)\nCompared to the model choice of Pelamatti et al. [60], we chose to\nmodel \ud835\udc655 and \ud835\udc642 as neutral variables even if \ud835\udc53 does not depend on\n\ud835\udc655 when \ud835\udc642 = 0. Other modeling choices are kept; for example, \ud835\udc642 is\na so-called \u2018\u2018binary variable\u2019\u2019 and not a categorical one [71]. Similarly,\nwe also keep the formulation of \ud835\udc641 as a categorical variable but a better\nmodel would be to model it as a \u2018\u2018cyclic variable\u2019\u2019 [72]. The resulting\nproblem is described in Appendix B. To assess the performance of our\nalgorithm, we performed 20 runs with different initial DoE sampled by\nLHS. Every DoE consists of \ud835\udc5b + 1 = 12 points and we chose a budget\nof 5\ud835\udc5b = 55 infill points. To compare our method with a baseline, we\nalso tested the random search method thanks to the expand_lhs\nnew method [40] described in Section 6.1 and we also optimized the\nGoldstein function using EGO with a classic Kriging model based on\nimputation method (Imp-Kernel). This method replaces the decreed-\nexcluded variables by their mean values: 50 or 1 respectively for (\ud835\udc653, \ud835\udc654)\nand (\ud835\udc671, \ud835\udc672). Fig. 8(a) plots the convergence curves for the four methods.\nIn particular, the median is the solid line and the first and third\nquantiles are plotted in dotted lines. To visualize better the correspond-\ning data dispersion, the boxplots of the 20 best solutions are plotted\nin Fig. 8(b). The results in Fig. 8 show that the hierarchical Kriging\nmodels of SMT 2.0 lead to better results than the imputation method\nor the random search both in terms of final objective value and variance\nover the 20 runs and in term of convergence rate. More precisely, SMT\nArc-Kernel and SMT Alg-Kernel Kriging model gave the best\nEGO results and managed to converge correctly as shown in Fig. 8(b).\nMore precisely, the 20 sampled DoEs led to similar performance and\nfrom one DoE, the method SMT Alg-Kernel managed to find the true\nminimum. However, this result has not been reproduced in other runs\nand is therefore not statistically significant. The variance between the\nruns is of similar magnitude regardless of the considered methods.\n6. Other relevant contributions in SMT 2.0\nThe new release SMT 2.0 introduces several improvements be-\nsides Kriging for hierarchical and mixed variables. This section details\nthe most important new contributions. Recall from Section 2.2 that\nfive sub-modules are present in the code: Sampling, Problems,\nSurrogate Models, Applications and Notebooks.\n6.1. Contributions to Sampling\nPseudo-random sampling. The Latin Hypercube Sampling (LHS) is a\nstochastic sampling technique to generate quasi-random sampling dis-\ntributions. It is among the most popular sampling method in computer\nexperiments thanks to its simplicity and projection properties with\nhigh-dimensional problems. The LHS method uses the pyDOE package\n(Design Of Experiments for Python). Five criteria for the construction\nof LHS are implemented in SMT. The first four criteria (center,\nmaximin, centermaximin, correlation) are the same as in\npyDOE.12 The last criterion ese, is implemented by the authors of\nSMT [48]. In SMT 2.0 a new LHS method was developed for the\nNested design of experiments (NestedLHS) [73] to use with multi-\nfidelity surrogates. A new mathematical method (expand_lhs) [40]\nwas developed in SMT 2.0 to increase the size of a design of exper-\niments while maintaining the ese property. Moreover, we proposed\na sampling method for mixed variables, and the aforementioned LHS\nmethod was applied to hierarchical variables in Fig. 8.\n6.2. Contributions to Surrogate models\nNew kernels and their derivatives for Kriging. Kriging surrogates are\nbased on hyperparameters and on a correlation kernel. Four correla-\ntion kernels are now implemented in SMT 2.0 [74]. In SMT, these\ncorrelation functions are absolute exponential (abs_exp), Gaussian\n(squar_exp), Matern 5/2 (matern52) and Matern 3/2 (matern32).\nIn addition, the implementation of gradient and Hessian for each kernel\nmakes it possible to calculate both the first and second derivatives of\nthe GP likelihood with respect to the hyperparameters [5].\nVariance derivatives for Kriging. To perform uncertainty quantification\nfor system analysis purposes, it could be interesting to know more\nabout the variance derivatives of a model [75\u201377]. For that purpose\nand also to pursue the original publication about derivatives [5], SMT\n2.0 extends the derivative support to Kriging variances and kernels.\n12 https://pythonhosted.org/pyDOE/index.html\n",
    "Advances in Engineering Software 188 (2024) 103571\n13\nP. Saves et al.\nNoisy Kriging. In engineering and in big data contexts with real exper-\niments, surrogate models for noisy data are of significant interest. In\nparticular, there is a growing need for techniques like noisy Kriging\nand noisy Multi-Fidelity Kriging (MFK) for data fusion [78]. For that\npurpose, SMT 2.0 has been designed to accommodate Kriging and MFK\nto noisy data including the option to incorporate heteroscedastic noise\n(using the use_het_noise option) and to account for different noise\nlevels for each data source [40].\nKriging with partial least squares. Beside MGP, for high-dimensional\nproblems, the toolbox implements Kriging with partial least squares\n(KPLS) [57] and its extension KPLSK [44]. The PLS information is\ncomputed by projecting the data into a smaller space spanned by the\nprincipal components. By integrating this PLS information into the\nKriging correlation matrix, the number of inputs can be scaled down,\nthereby reducing the number of hyperparameters required. The result-\ning number of hyperparameters \ud835\udc51\ud835\udc52 is indeed much smaller than the\noriginal problem dimension \ud835\udc51. Recently, in SMT 2.0, we extended the\nKPLS method for multi-fidelity Kriging (MFKPLS and MFKPLSK) [73,79,\n80]. We also proposed an automatic criterion to choose automatically\nthe reduced dimension \ud835\udc51\ud835\udc52 based on Wold\u2019s R criterion [81]. This\ncriterion has been applied to aircraft optimization with EGO where the\nnumber \ud835\udc51\ud835\udc52 (\ud835\ude97_\ud835\ude8c\ud835\ude98\ud835\ude96\ud835\ude99 in the code) for the model is automatically selected\nat every iteration [39]. Special efforts have been made to accommodate\nKPLS for multi-fidelity and mixed integer data [79,80].\nMarginal Gaussian process. SMT 2.0 implements Marginal Gaussian\nProcess (MGP) surrogate models for high dimensional problems [82].\nMGP are Gaussian processes taking into account hyperparameters un-\ncertainty defined as a density probability function. Especially we sup-\npose that the function to model \ud835\udc53 \u2236 \ud835\udefa \u21a6 R, where \ud835\udefa \u2282 R\ud835\udc51 and \ud835\udc51 is\nthe number of design variables, lies in a linear embedding \ue22d such as\n\ue22d = {\ud835\udc62 = \ud835\udc34\ud835\udc65, \ud835\udc65 \u2208 \ud835\udefa}, \ud835\udc34 \u2208 R\ud835\udc51\u00d7\ud835\udc51\ud835\udc52 and \ud835\udc53(\ud835\udc65) = \ud835\udc53\ue22d(\ud835\udc34\ud835\udc65) with \ud835\udc53(\ud835\udc65) = \ud835\udc53\ue22d \u2236\n\ue22d \u21a6 R and \ud835\udc51\ud835\udc52 \u226a \ud835\udc51. Then, we must use a kernel \ud835\udc58(\ud835\udc65, \ud835\udc65\u2032) = \ud835\udc58\ue22d(\ud835\udc34\ud835\udc65, \ud835\udc34\ud835\udc65\u2032)\nwhose each component of the transfer matrix \ud835\udc34 is an hyperparameter.\nThus we have \ud835\udc51\ud835\udc52 \u00d7 \ud835\udc51 hyperparameters to find. Note that \ud835\udc51\ud835\udc52 is defined\nas \ud835\ude97_\ud835\ude8c\ud835\ude98\ud835\ude96\ud835\ude99 in the code [49].\nGradient-enhanced neural network. The new release SMT 2.0 imple-\nments Gradient-Enhanced Neural Network (GENN) models [45].\nGradient-Enhanced Neural Networks (GENN) are fully connected multi-\nlayer perceptrons whose training process was modified to account for\ngradient information. Specifically, the model is trained to minimize not\nonly the prediction error of the response but also the prediction error\nof the partial derivatives: the chief benefit of gradient enhancement is\nbetter accuracy with fewer training points. Note that GENN applies to\nregression (single-output or multi-output), but not classification since\nthere is no gradient in that case. The implementation is fully vectorized\nand uses ADAM optimization, mini-batch, and L2-norm regularization.\nFor example, GENN can be used to learn airfoil geometries from a\ndatabase. This usage is documented in SMT 2.0.13\n6.3. Contributions to Applications\nKriging trajectory and sampling. Sampling a GP with high resolution\nis usually expensive due to the large dimension of the associated\ncovariance matrix. Several methods are proposed to draw samples\nof a GP on a given set of points. To sample a conditioned GP, the\nclassic method consists in using a Cholesky decomposition (or eigende-\ncomposition) of the conditioned covariance matrix of the process but\nsome numerical computational errors can lead to non SPD matrix. A\nmore recent approach based on Karhunen\u2013Lo\u00e8ve decomposition of the\ncovariance kernel with the Nystr\u00f6m method has been proposed in [83]\n13 https://smt.readthedocs.io/en/latest/_src_docs/examples/airfoil_\nparameters/learning_airfoil_parameters.html\nwhere the paths can be sampled by generating independent standard\nNormal distributed samples. The different methods are documented in\nthe tutorial Gaussian Process Trajectory Sampling [84].\nParallel Bayesian optimization. Due to the recent progress made in\nhardware configurations, it has been of high interest to perform parallel\noptimizations. A parallel criterion called qEI [85] was developed to\nperform Efficient Global Optimization (EGO): the goal is to be able\nto run batch optimization. At each iteration of the algorithm, multiple\nnew sampling points are extracted from the known ones. These new\nsampling points are then evaluated using a parallel computing environ-\nment. Five criteria are implemented in SMT 2.0: Kriging Believer (KB),\nKriging Believer Upper Bound (KBUB), Kriging Believer Lower Bound\n(KBLB), Kriging Believer Random Bound (KBRand) and Constant Liar\n(CLmin) [86].\n7.\nConclusion\nSMT 2.0 introduces significant upgrades to the Surrogate Modeling\nToolbox. This new release adds support for hierarchical and mixed\nvariables and improves the surrogate models with a particular focus\non Kriging (Gaussian process) models. SMT 2.0 is distributed through\nan open-source license and is freely available online.14 We provide\ndocumentation that caters to both users and potential developers.15\nSMT 2.0 enables users and developers collaborating on the same\nproject to have a common surrogate modeling tool that facilitates the\nexchange of methods and reproducibility of results.\nSMT has been widely used in aerospace and mechanical modeling\napplications. Moreover, the toolbox is general and can be useful for\nanyone who needs to use or develop surrogate modeling techniques,\nregardless of the targeted applications. SMT is currently the only open-\nsource toolbox that can build hierarchical and mixed surrogate models.\nDeclaration of competing interest\nThe authors declare that they have no known competing finan-\ncial interests or personal relationships that could have appeared to\ninfluence the work reported in this paper.\nData availability\nData will be made available on request. Results can be reproduced\nfreely online at https://colab.research.google.com/github/SMTorg/smt/\nblob/master/tutorial/NotebookRunTestCases_Paper_SMT_v2.ipynb.\nAcknowledgments\nWe want to thank all those who contribute to this release. Namely,\nM. A. Bouhlel, I. Cardoso, R. Carreira Rufato, R. Charayron, R. Conde\nArenzana, S. Dubreuil, A. F. L\u00f3pez-Lopera, M. Meliani, M. Menz, N.\nMo\u00ebllo, A. Thouvenot, R. Priem, E. Roux and F. Vergnes. This work is\npart of the activities of ONERA - ISAE - ENAC joint research group. We\nalso acknowledge the partners institutions: ONERA, NASA Glenn, ISAE-\nSUPAERO, Institut Cl\u00e9ment Ader (ICA), the University of Michigan,\nPolytechnique Montr\u00e9al and the University of California San Diego.\nThe research presented in this paper has been performed in the\nframework of the AGILE 4.0 project (Towards cyber-physical collabo-\nrative aircraft development), funded by the European Union Horizon\n2020 research and innovation framework programme under grant\nagreement n\u25e6 815122 and in the COLOSSUS project (Collaborative\nSystem of Systems Exploration of Aviation Products, Services and\n14 https://github.com/SMTorg/SMT\n15 https://smt.readthedocs.io/en/latest/\n",
    "Advances in Engineering Software 188 (2024) 103571\n14\nP. Saves et al.\nBusiness Models) funded by the European Union Horizon Europe re-\nsearch and innovation framework programme under grant agreement\nn\u25e6 101097120.\nWe also are grateful to E. Hall\u00e9-Hannan from Polytechnique Mon-\ntr\u00e9al for the hierarchical variables framework.\nAppendix A. Toy test function\nThis Appendix gives the detail of the toy function of Section 5.1.16\nFirst, we recall the optimization problem:\nmin \ud835\udc53(\ud835\udc65cat, \ud835\udc65qnt)\nw.r.t. \ud835\udc65cat = \ud835\udc501 \u2208 {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ud835\udc65qnt = \ud835\udc651 \u2208 [0, 1]\n(A.1)\nThe toy function \ud835\udc53 is defined as\n\ud835\udc53(\ud835\udc65, \ud835\udc501) =1\ud835\udc501=0 cos(3.6\ud835\udf0b(\ud835\udc65 \u2212 2)) + \ud835\udc65 \u2212 1\n+1\ud835\udc501=1 2 cos(1.1\ud835\udf0b exp(\ud835\udc65)) \u2212 \ud835\udc65\n2 + 2\n+1\ud835\udc501=2 cos(2\ud835\udf0b\ud835\udc65) + 1\n2\ud835\udc65\n+1\ud835\udc501=3 \ud835\udc65(cos(3.4\ud835\udf0b(\ud835\udc65 \u2212 1)) \u2212 \ud835\udc65 \u2212 1\n2\n)\n+1\ud835\udc501=4 \u2212 \ud835\udc652\n2\n+1\ud835\udc501=5 2 cos(0.25\ud835\udf0b exp(\u2212\ud835\udc654))2 \u2212 \ud835\udc65\n2 + 1\n+1\ud835\udc501=6 \ud835\udc65 cos(3.4\ud835\udf0b\ud835\udc65) \u2212 \ud835\udc65\n2 + 1\n+1\ud835\udc501=7 \u2212 \ud835\udc65(cos(3.5\ud835\udf0b\ud835\udc65) + \ud835\udc65\n2 ) + 2\n+1\ud835\udc501=8 \u2212 \ud835\udc655\n2 + 1\n+1\ud835\udc501=9 \u2212 cos(2.5\ud835\udf0b\ud835\udc65)2\u221a\n\ud835\udc65 \u2212 0.5 ln(\ud835\udc65 + 0.5) \u2212 1.3\n(A.2)\nAppendix B. Hierarchical Goldstein test function\nThis Appendix gives the detail of the hierarchical Goldstein problem\nof Section 5.2.17 First, we recall the optimization problem:\nmin \ud835\udc53(\ud835\udc65cat\nneu, \ud835\udc65qnt\nneu, \ud835\udc65cat\n\ud835\udc5a , \ud835\udc65qnt\ndec)\nw.r.t. \ud835\udc65cat\nneu = \ud835\udc642 \u2208 {0, 1}\n\ud835\udc65qnt\nneu = (\ud835\udc651, \ud835\udc652, \ud835\udc655, \ud835\udc673, \ud835\udc674) \u2208 [0, 100]3 \u00d7 {0, 1, 2}2\n\ud835\udc65cat\n\ud835\udc5a = \ud835\udc641 \u2208 {0, 1, 2, 3}\n\ud835\udc65qnt\ndec = (\ud835\udc653, \ud835\udc654, \ud835\udc671, \ud835\udc672) \u2208 [0, 100]2 \u00d7 {0, 1, 2}2\n(B.1)\nThe hierarchical and mixed function \ud835\udc53 is defined as a hierarchical\nfunction that depends on \ud835\udc530, \ud835\udc531, \ud835\udc532 and \ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont as describes in the\nfollowing.\n\ud835\udc53(\ud835\udc651, \ud835\udc652, \ud835\udc653, \ud835\udc654, \ud835\udc671, \ud835\udc672, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc641, \ud835\udc642) =\n1\ud835\udc641=0\ud835\udc530(\ud835\udc651, \ud835\udc652, \ud835\udc671, \ud835\udc672, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc641=1\ud835\udc531(\ud835\udc651, \ud835\udc652, \ud835\udc653, \ud835\udc672, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc641=2\ud835\udc532(\ud835\udc651, \ud835\udc652, \ud835\udc654, \ud835\udc671, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc641=3\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, \ud835\udc653, \ud835\udc654, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642).\n(B.2)\n16 https://github.com/jbussemaker/SBArchOpt\n17 https://github.com/jbussemaker/SBArchOpt\nThen, the functions \ud835\udc530, \ud835\udc531 and \ud835\udc532 are defined as mixed variants of\n\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont as such\n\ud835\udc530(\ud835\udc651, \ud835\udc652, \ud835\udc671, \ud835\udc672, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) =\n1\ud835\udc672=0\n( 1\ud835\udc671=0\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 20, 20, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=1\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 50, 20, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=2\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 80, 20, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) )\n1\ud835\udc672=1\n( 1\ud835\udc671=0\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 20, 50, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=1\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 50, 50, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=2\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 80, 50, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) )\n1\ud835\udc672=2\n( 1\ud835\udc671=0\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 20, 80, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=1\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 50, 80, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=2\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 80, 80, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) )\n(B.3)\n\ud835\udc531(\ud835\udc651, \ud835\udc652, \ud835\udc653, \ud835\udc672, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) =\n1\ud835\udc672=0\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, \ud835\udc653, 20, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc672=1\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, \ud835\udc653, 50, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc672=2\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, \ud835\udc653, 80, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n\ud835\udc532(\ud835\udc651, \ud835\udc652, \ud835\udc654, \ud835\udc671, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) =\n1\ud835\udc671=0\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 20, \ud835\udc654, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=1\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, 50, \ud835\udc652, \ud835\udc654, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\n+ 1\ud835\udc671=2\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, 80, \ud835\udc654, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642)\nTo finish with, the function \ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont is given by\n\ud835\udc3a\ud835\udc5c\ud835\udc59\ud835\udc51cont(\ud835\udc651, \ud835\udc652, \ud835\udc653, \ud835\udc654, \ud835\udc673, \ud835\udc674, \ud835\udc655, \ud835\udc642) = 53.3108 + 0.184901\ud835\udc651\n\u2212 5.02914\ud835\udc651\n3.10\u22126 + 7.72522\ud835\udc651\n\ud835\udc673.10\u22128 \u2212 0.0870775\ud835\udc652 \u2212 0.106959\ud835\udc653\n+ 7.98772\ud835\udc653\n\ud835\udc674.10\u22126 + 0.00242482\ud835\udc654 + 1.32851\ud835\udc654\n3.10\u22126 \u2212 0.00146393\ud835\udc651\ud835\udc652\n\u2212 0.00301588\ud835\udc651\ud835\udc653 \u2212 0.00272291\ud835\udc651\ud835\udc654 + 0.0017004\ud835\udc652\ud835\udc653 + 0.0038428\ud835\udc652\ud835\udc654\n\u2212 0.000198969\ud835\udc653\ud835\udc654 + 1.86025\ud835\udc651\ud835\udc652\ud835\udc653.10\u22125 \u2212 1.88719\ud835\udc651\ud835\udc652\ud835\udc654.10\u22126\n+ 2.50923\ud835\udc651\ud835\udc653\ud835\udc654.10\u22125 \u2212 5.62199\ud835\udc652\ud835\udc653\ud835\udc654.10\u22125 + \ud835\udc642\n(\n5 cos\n( 2\ud835\udf0b\n100 \ud835\udc655\n)\n\u2212 2\n)\n.\n(B.4)\nAppendix C. Supplementary data\nMore at https://colab.research.google.com/github/SMTorg/smt/blob/\nmaster/tutorial/NotebookRunTestCases_Paper_SMT_v2.ipynb.\nSupplementary material related to this article can be found online\nat https://doi.org/10.1016/j.advengsoft.2023.103571.\nReferences\n[1] Mader CA, Martins JRRA, Alonso JJ, van der Weide E. ADjoint: An approach\nfor the rapid development of discrete adjoint solvers. AIAA J 2008;46:863\u201373.\n[2] Kennedy M, O\u2019Hagan A. Bayesian calibration of computer models. J R Stat Soc\nSer B Stat Methodol 2001;63:425\u201364.\n[3] Hwang JT, Martins JRRA. A fast-prediction surrogate model for large datasets.\nAerosp Sci Technol 2018;75:74\u201387.\n[4] Martins JRRA, Ning A. Engineering design optimization. Cambridge University\nPress; 2021.\n[5] Bouhlel\nMA,\nHwang\nJT,\nBartoli\nN,\nLafage\nR,\nMorlier\nJ,\nMartins\nJRA.\nA Python surrogate modeling framework with derivatives. Adv Eng Softw\n2019;135:102662.\n[6] Bouhlel\nMA,\nMartins\nJ.\nGradient-enhanced\nkriging\nfor\nhigh-dimensional\nproblems. Eng Comput 2019;35:157\u201373.\n[7] Pedregosa F, Varoquaux G, Gramfort A, Thirion VMB, Grisel O, et al. Scikit-learn:\nMachine learning in Python. J Mach Learn Res 2011;12:2825\u201330.\n",
    "Advances in Engineering Software 188 (2024) 103571\n15\nP. Saves et al.\n[8] Lataniotis C, Marelli S, Sudret B. Uqlab 2.0 and uqcloud: open-source vs.\ncloud-based uncertainty quantification. In: SIAM conference on uncertainty\nquantification. 2022.\n[9] Faraci A, Beaurepaire P, Gayton N. Review on Python toolboxes for Kriging\nsurrogate modelling. In: ESREL. 2022.\n[10] Kr\u00fcgener M, Zapata Usandivaras J, Bauerheim M, Urbano A. Coaxial-injector\nsurrogate modeling based on Reynolds-averaged Navier\u2013Stokes simulations using\ndeep learning. J Propuls Power 2022;38:783\u201398.\n[11] Ming D, Williamson D, Guillas S. Deep Gaussian process emulation using\nstochastic imputation. Technometrics 2022;1\u201312.\n[12] Eli\u00e1\u0161 J, Vo\u0159echovsk`y M, Sad\u00edlekv V. Periodic version of the minimax distance\ncriterion for Monte Carlo integration. Adv Eng Softw 2020;149:102900.\n[13] Drouet V, Balesdent M, Brevault L, Dubreuil S, Morio J. Multi-fidelity algo-\nrithm for the sensitivity analysis of multidisciplinary problems. J Mech Des\n2023;145:1\u201322.\n[14] Karban P, P\u00e1nek D, Orosz T, Petr\u00e1\u0161ov\u00e1 I, Dole\u017eel I. FEM based robust design\noptimization with Agros and \u00afArtap. Comput Math Appl 2021;81:618\u201333.\n[15] Kudela J, Matousek R. Recent advances and applications of surrogate models for\nfinite element method computations: a review. Soft Comput 2022;26:13709\u201333.\n[16] Chen Y, Dababneh F, Zhang B, Kassaee S, Smith BT, Liu K, et al. Surrogate mod-\neling for capacity planning of charging station equipped with photovoltaic panel\nand hydropneumatic energy storage. J Energy Res Technol 2020;142:050907.\n[17] Jasa\nJ,\nBortolotti\nP,\nZalkind\nD,\nBarter\nG.\nEffectively\nusing\nmultifidelity\noptimization for wind turbine design. Wind Energy Sci 2022;7:991\u20131006.\n[18] Wang W, Tao G, Ke D, Luo J, Cui J. Transpiration cooling of high pres-\nsure turbine vane with optimized porosity distribution. Appl Therm Eng\n2023;223:119831.\n[19] Savage T, Almeida-Trasvina HF, del R\u00edo-Chanona EA, Smith R, Zhang D.\nAn adaptive data-driven modelling and optimization framework for complex\nchemical process design. Comput Aided Chem Eng 2020;48:73\u20138.\n[20] Chan A, Pires AF, Polacsek T. Trying to elicit and assign goals to the right actors.\nIn: Conceptual modeling: 41st international conference. 2022.\n[21] Hutter F, Osborne MA. A kernel for hierarchical parameter spaces. 2013, arXiv.\n[22] Bussemaker JH, Ciampa PD, Nagel B. System architecture design space explo-\nration: An approach to modeling and optimization. In: AIAA aviation 2020 forum.\n2020.\n[23] Fouda MEA, Adler EJ, Bussemaker J, Martins JRRA, Kurtulus DF, Boggero L,\net al. Automated hybrid propulsion model construction for conceptual aircraft\ndesign and optimization. In: 33rd congress of the international council of the\naeronautical sciences. 2022.\n[24] Bussemaker JH, Bartoli N, Lefebvre T, Ciampa PD, Nagel B. Effectiveness of\nsurrogate-based optimization algorithms for system architecture optimization. In:\nAIAA aviation 2021 forum. 2021.\n[25] Balandat M, Karrer B, Jiang D, Daulton S, Letham B, Wilson A, et al. BoTorch:\nA framework for efficient Monte-Carlo Bayesian optimization. Adv Neural Inf\nProcess Syst 2020;33:21524\u201338.\n[26] Adams B, Bohnhoff W, Dalbey K, Ebeida M, Eddy J, Eldred M, et al. Dakota,\na multilevel parallel object-oriented framework for design optimization, pa-\nrameter estimation, uncertainty quantification, and sensitivity analysis: Version\n6.13 user\u2019s manual. Technical report, Albuquerque, NM (United States: Sandia\nNational Lab.(SNL-NM); 2020.\n[27] Roustant O, Ginsbourger D, Deville Y. DiceKriging, DiceOptim: Two R packages\nfor the analysis of computer experiments by Kriging-based metamodeling and\noptimization. J Stat Softw 2012;51:1\u201355.\n[28] Zhang Y, Tao S, Chen W, Apley D. A latent variable approach to Gaus-\nsian process modeling with qualitative and quantitative factors. Technometrics\n2020;62:291\u2013302.\n[29] Chang TH, Wild SM. ParMOO: A Python library for parallel multiobjective\nsimulation optimization. J Open Source Softw 2023;8:4468.\n[30] Garrido-Merch\u00e1n\nEC,\nHern\u00e1ndez-Lobato\nD.\nDealing\nwith\ncategorical\nand\ninteger-valued variables in Bayesian optimization with Gaussian processes.\nNeurocomputing 2020;380:20\u201335.\n[31] Halstrup M. Black-box optimization of mixed discrete-continuous optimization\nproblems (Ph.D. thesis), TU Dortmund; 2016.\n[32] Roustant O, Padonou E, Deville Y, Cl\u00e9ment A, Perrin G, Giorla J, et al.\nGroup kernels for gaussian process metamodels with categorical inputs. SIAM\nJ Uncertain Quant 2020;8:775\u2013806.\n[33] Zhou Q, Qian PZG, Zhou S. A simple approach to emulation for computer models\nwith qualitative and quantitative factors. Technometrics 2011;53:266\u201373.\n[34] Saves P, Diouane Y, Bartoli N, Lefebvre T, Morlier J. A mixed-categorical\ncorrelation kernel for Gaussian process. Neurocomputing 2023;550:126472.\n[35] Pelamatti\nJ,\nBrevault\nL,\nBalesdent\nM,\nTalbi\nE-G,\nGuerin\nY.\nEfficient\nglobal optimization of constrained mixed variable problems. J Global Optim\n2019;73:583\u2013613.\n[36] Horn D, Stork J, ler N-JS, Zaefferer M. Surrogates for hierarchical search spaces:\nThe Wedge-Kernel and an automated analysis. In: Proceedings of the genetic and\nevolutionary computation conference. 2019.\n[37] Hung Y, Joseph VR, Melkote SN. Design and analysis of computer experiments\nwith branching and nested factors. Technometrics 2009;51:354\u201365.\n[38] Audet C, Hall\u00e9-Hannan E, Le Digabel S. A general mathematical framework\nfor constrained mixed-variable blackbox optimization problems with meta and\ncategorical variables. Oper Res Forum 2023;4:1\u201337.\n[39] Saves P, Nguyen Van E, Bartoli N, Diouane Y, Lefebvre T, David C, Defoort S,\nMorlier J. Bayesian optimization for mixed variables using an adaptive dimension\nreduction process: applications to aircraft design. In: AIAA scitech 2022. 2022.\n[40] Conde Arenzana R, L\u00f3pez-Lopera A, Mouton S, Bartoli N, Lefebvre T. Multi-\nfidelity Gaussian process model for CFD and wind tunnel data fusion. In:\nECCOMAS aerobest. 2021.\n[41] Rufato RC, Diouane Y, Henry J, Ahlfeld R, Morlier J. A mixed-categorical\ndata-driven approach for prediction and optimization of hybrid discontinuous\ncomposites performance. In: AIAA aviation 2022 forum. 2022.\n[42] Gorissen D, Crombecq K, Couckuyt I, Dhaene T, Demeester P. A surrogate\nmodeling and adaptive sampling toolbox for computer based design. J Mach\nLearn Res 2010;11:2051\u20135.\n[43] Williams CK, Rasmussen CE. Gaussian processes for machine learning. MA: MIT\npress Cambridge; 2006.\n[44] Bouhlel MA, Bartoli N, Regis R, Otsmane A, Morlier J. Efficient Global Opti-\nmization for high-dimensional constrained problems by using the Kriging models\ncombined with the Partial Least Squares method. Eng Optim 2018;50:2038\u201353.\n[45] Bouhlel MA, He S, Martins J. Scalable gradient-enhanced artificial neural\nnetworks for airfoil shape design in the subsonic and transonic regimes. Struct\nMultidiscip Optim 2020;61:1363\u201376.\n[46] Kwan LS, Pitrou A, Seibert S. Numba: A LLVM-based python JIT compiler. In:\nProceedings of the second workshop on the LLVM compiler infrastructure in\nHPC. 2015.\n[47] Zaefferer M, Horn D. A first analysis of kernels for Kriging-based optimization\nin hierarchical search spaces. 2018, arXiv.\n[48] Jin R, Chen W, Sudjianto A. An efficient algorithm for constructing optimal\ndesign of computer experiments. J Statist Plann Inference 2005;2:545\u201354.\n[49] Garnett R, Osborne M, Hennig P. Active learning of linear embeddings for\nGaussian processes. In: Uncertainty in artificial intelligence - Proceedings of the\n30th conference. 2013.\n[50] Jones D. A taxonomy of global optimization methods based on response surfaces.\nJ Global Optim 2001;21:345\u201383.\n[51] Lafage R. egobox, a Rust toolbox for efficient global optimization. J Open Source\nSoftw 2022;7:4737.\n[52] Jones DR, Schonlau M, Welch WJ. Efficient global optimization of expensive\nblack-box functions. J Global Optim 1998;13:455\u201392.\n[53] Deng X, Lin CD, Liu K, Rowe RK. Additive Gaussian process for computer models\nwith qualitative and quantitative factors. Technometrics 2017;59:283\u201392.\n[54] Cuesta-Ramirez J, Le Riche R, Roustant O, Perrin G, Durantin C, Gliere A. A\ncomparison of mixed-variables Bayesian optimization approaches. Adv Model\nSimul Eng Sci 2021;9:1\u201329.\n[55] Rebonato R, Jaeckel P. The most general methodology to create a valid\ncorrelation matrix for risk management and option pricing purposes. J Risk\n2001;2:17\u201327.\n[56] Rapisarda F, Brigo D, Mercurio F. Parameterizing correlations: a geometric\ninterpretation. IMA J Manag Math 2007;18:55\u201373.\n[57] Bouhlel\nMA,\nBartoli\nN,\nRegis\nR,\nOtsmane\nA,\nMorlier\nJ.\nAn\nimproved\napproach for estimating the hyperparameters of the Kriging model for high-\ndimensional problems through the Partial Least Squares method. Math Probl\nEng 2016;2016:6723410.\n[58] Cheng GH, Younis A, Hajikolaei KH, Wang GG. Trust region based mode pursuing\nsampling method for global optimization of high dimensional design problems.\nJ Mech Des 2015;137:021407.\n[59] Karlsson R, Bliek L, Verwer S, de Weerdt M. Continuous surrogate-based\noptimization algorithms are well-suited for expensive discrete problems. In:\nArtificial intelligence and machine learning. 2021.\n[60] Pelamatti J, Brevault L, Balesdent M, Talbi E-G, Guerin Y. Bayesian optimization\nof variable-size design space problems. Opt Eng 2021;22:387\u2013447.\n[61] Hebbal A, Brevault L, Balesdent M, Talbi E-G, Melab N. Bayesian optimization\nusing deep Gaussian processes with applications to aerospace system design. Opt\nEng 2021;22:321\u201361.\n[62] Wildberger N. A rational approach to trigonometry. Math Horiz 2007;15:16\u201320.\n[63] Cho H, Kim Y, Lee E, Choi D, Lee Y, Rhee W. Basic enhancement strategies when\nusing bayesian optimization for hyperparameter tuning of deep neural networks.\nIEEE Access 2020;8:52588\u2013608.\n[64] Zuniga MM, Sinoquet D. Global optimization for mixed categorical-continuous\nvariables based on Gaussian process models with a randomized categorical space\nexploration step. INFOR Inf Syst Oper Res 2020;58:310\u201341.\n[65] Lindauer M, Eggensperger K, Feurer M, AB, Deng D, Benjamins C, et al. SMAC3:\nA versatile Bayesian optimization package for hyperparameter optimization. J\nMach Learn Res 2022;23:1\u20139.\n[66] Picheny V, Berkeley J, Moss H, Stojic H, Granta U, Ober S, et al. Trieste:\nEfficiently exploring the depths of black-box functions with TensorFlow. 2023,\narXiv.\n[67] Cowen-Rivers AI, Ly W, Wang Z, Tutunov R, Jianye H, Wang J, et al. HEBO:\nHeteroscedastic evolutionary Bayesian optimisation. 2020, arXiv.\n[68] Jiang H, Shen Y, Li Y, Zhang W, Zhang C, Cui B. OpenBox: A Python toolkit for\ngeneralized black-box optimization. 2023, arXiv.\n",
    "Advances in Engineering Software 188 (2024) 103571\n16\nP. Saves et al.\n[69] Kandasamy K, Vysyaraju KR, Neiswanger W, Paria B, Collins C, Schneider J, et\nal. Tuning hyperparameters without grad students: Scalable and robust bayesian\noptimisation with dragonfly. J Mach Learn Res 2020;21:3098\u2013124.\n[70] Roy S, Crossley WA, Stanford BK, Moore KT, Gray JS. A mixed integer efficient\nglobal optimization algorithm with multiple infill strategy - Applied to a wing\ntopology optimization problem. In: AIAA scitech 2019 forum. 2019.\n[71] M\u00fcller J, Shoemaker CA, Pich\u00e9 R. SO-MI: A surrogate model algorithm for\ncomputationally expensive nonlinear mixed-integer black-box global optimization\nproblems. Comput Oper Res 2013;40:1383\u2013400.\n[72] Tran T, Sinoquet D, Da Veiga S, Mongeau M. Derivative-free mixed binary\nnecklace optimization for cyclic-symmetry optimal design problems. Opt Eng\n2021.\n[73] Meliani M, Bartoli N, Lefebvre T, Bouhlel MA, Martins JRRA, Morlier J. Multi-\nfidelity efficient global optimization: Methodology and application to airfoil\nshape design. In: AIAA aviation 2019 forum. 2019.\n[74] Lee H. Gaussian processes. Springer Berlin Heidelberg; 2011, p. 575\u20137.\n[75] L\u00f3pez-Lopera AF, Idier D, Rohmer J, Bachoc F. Multioutput Gaussian processes\nwith functional data: A study on coastal flood hazard assessment. Reliab Eng\nSyst Saf 2022;218:108139.\n[76] Berthelin G, Dubreuil S, Sala\u00fcn M, Bartoli N, Gogu C. Disciplinary proper\northogonal decomposition and interpolation for the resolution of parameterized\nmultidisciplinary analysis. Internat J Numer Methods Engrg 2022;123:3594\u2013626.\n[77] Cardoso I, Dubreuil S, Bartoli N, Gogu C, Sala\u00fcn M, Lafage R. Disciplinary\nsurrogates for gradient-based optimization of multidisciplinary systems. In:\nECCOMAS Aerobest. 2023.\n[78] Platt J, Penny S, Smith T, Chen T, Abarbanel H. A systematic exploration of\nreservoir computing for forecasting complex spatiotemporal dynamics. Neural\nNetw 2022;153:530\u201352.\n[79] Charayron R, Lefebvre T, Bartoli N, Morlier J. Multi-fidelity Bayesian optimiza-\ntion strategy applied to overall drone design. In: AIAA scitech 2023 forum.\n2023.\n[80] Charayron R, Lefebvre T, Bartoli N, Morlier J. Towards a multi-fidelity and\nmulti-objective Bayesian optimization efficient algorithm. Aerosp Sci Technol\n2023;142:108673.\n[81] Wold H. Soft modelling by latent variables: The non-linear iterative partial least\nsquares (NIPALS) approach. J Appl Probab 1975;12:117\u201342.\n[82] Priem R, Diouane Y, Bartoli N, Dubreuil S, Saves P. High-dimensional efficient\nglobal optimization using both random and supervised embeddings. In: AIAA\naviation 2023 forum. 2023.\n[83] Betz W, Papaioannou I, Straub D. Numerical methods for the discretization of\nrandom fields by means of the Karhunen\u2013Lo\u00e8ve expansion. Comput Methods\nAppl Mech Engrg 2014;271:109\u201329.\n[84] Menz M, Dubreuil S, Morio J, Gogu C, Bartoli N, Chiron M. Variance based sen-\nsitivity analysis for Monte Carlo and importance sampling reliability assessment\nwith Gaussian processes. Struct Saf 2021;93:102116.\n[85] Ginsbourger D, Le Riche R, Carraro L. Kriging is well-suited to parallelize\noptimization. Springer Berlin Heidelberg; 2010, p. 131\u201362.\n[86] Roux E, Tillier Y, Kraria S, Bouchard P-O. An efficient parallel global opti-\nmization strategy based on Kriging properties suitable for material parameters\nidentification. Arch Mech Eng 2020;67.\n"
]