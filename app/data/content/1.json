{
    "info": {
        "title": "AI Model for Computer games based on Case Based Reasoning and AI Planning",
        "authors": [
            "Vlado Menkovski",
            "Dimitrios Metafas"
        ],
        "institutes": [
            "Athens Information Technology"
        ],
        "keywords": [
            "Game AI",
            "Case Based Reasoning",
            "AI Planning",
            "Game Trees"
        ],
        "abstract": "Making efficient AI models for games with imperfect information can be a particular challenge. Considering the large number of possible moves and the incorporated uncertainties building game trees for these games becomes very difficult due to the exponential growth of the number of nodes at each level. This effort is focused on presenting a method of combined Case Based Reasoning (CBR) with AI Planning which drastically reduces the size of game trees. Instead of looking at all possible combinations we can focus only on the moves that lead us to specific strategies in effect discarding meaningless moves. These strategies are selected by finding similarities to cases in the CBR database. The strategies are formed by a set of desired goals. The AI planning is responsible for creating a plan to reach these goals. The plan is basically a set of moves that brings the player to this goal. By following these steps and not regarding the vast number of other possible moves the model develops Game Trees which grows slower so they can be built with more feature moves restricted by the same amount of memory."
    },
    "content": "introduction the goal of this effort is to explore a model for design and implementation of an ai agent for turn based this model provides for building more capable computer opponents that rely on strategies that closely resemble human approach in solving problems opposed to classical computational centric heuristics in game in this manner the computational resources can be focused on more sensible strategies for the game with the advancement in computer hardware increasingly more computing power is left for executing ai algorithms in in the past ai in games was mainly a cheating set of instructions that simulated the increasing difficulty in the game environment so that the player had the illusion of real improvement in available memory and processing power allows implementation of more intelligent algorithms for building the game environment as well as direct interaction with the human in this particular research the emphasis is put on the interaction between the ai agent and a computer player in the realm of the game it is particularly focused on turn based games that have the elements of uncertainty like dice or concealed at the beginning a description of game ai algorithms are such as game trees and the following section describes an approach of using ai planning to improve building game trees in games with imperfect information where game trees tend to be very large with high growth section discusses another approach that provides a significant reduction to the number of considered moves in order to find the favorable strategy of the ai this approach uses ai planning techniques and case base reasoning to plan for different scenarios in predetermined strategies which would be analogous to human player experience in the particular the cbr database illustrates a set of past experiences for the ai problem and the ai planning illustrates the procedure to deal with the given situation in the in the next two sections implementations and evaluations of both approaches are the ai planning approach is implemented with the tictactoe game and the combined ai planning and cbr approach is implemented with a model for the monopoly the last part contains conclusions and future work game trees and minimax game trees are common model for evaluating how different combinations of moves from the player and his opponents will affect the future position of the player and eventually the end result of the an algorithm that decides on the next move by evaluating the results from the built game tree is minimax minimax assumes that the player at hand will always choose the best possible move for in other words the player will try to select the move that maximizes the result of the evaluation function over the game so basically the player at hand needs to choose the best move overall while taking into account that the next will try to do the same minimax tries to maximize the minimum minimax can be applied to multiple levels of nodes on the game where the leaves bring the final known game the minimax theorem for every game there is a mixed strategy for each such that the expected payoff for both is the same value v when the players use these v is the best payoff each can expect to receive from a play of the that these mixed strategies are the optimal strategies for the two this theorem was established by john von who is quoted as saying far as i can there could be no theory of games without that theorem i thought there was nothing worth publishing until the minimax theorem was a simple example of minimax can be observed by building a game tree of the the game is a simple game which can end by the first player the second player wining or a there are nine positions for each of the players in which at each turn the player puts x or o if the player has three adjacent signs in a column or the two diagonals he or she this game has limited number of position and it is well suited for building the whole game the leaves of this tree will be final positions in the a heuristics evaluation function will also need to be written to evaluate the value of each node along the ai planning for building game trees ai planning ai planning also referred as automated planning and scheduling is a branch of artificial intelligence that focuses on finding strategies or sequences of actions that reach a predefined goal typical execution of ai planning algorithms is by intelligent autonomous robots and unmanned opposed to classical control or classification ai planning results with complex solutions that are derived from multidimensional ai planning algorithms are also common in the video game they solve broad range of problems from path finding to action a typical planner takes three a description of the initial state of the a description of the desired and a set of possible some efforts for incorporating planning techniques for building game trees have also shown similar to the approach explored in this in addition cased based reasoning techniques are also gathering popularity in developing strategies based in prior knowledge about the problems in the one of the benefits from hierarchical task network planning is the possibility to build game trees based on htn this method is described in the following game trees with ai planning an adaptation of the htn planning can be used to build much smaller and more efficient game this idea has already been implemented in the bridge baron a computer program for the game of contact bridge computer programs based on game tree search techniques are now as good as or better than humans in many games like chess and checkers but there are some difficulties in building a game tree for games that have imperfect information and added uncertainty like card or games with the main problem is the enormous number of possibilities that the player can choose from in making his in addition some of the moves are accompanied with probabilities based on the random elements in the the number of possible moves exponentially grows with each move so the depth of the search has to be very limited to accommodate for the memory the basic idea behind using htn for building game trees is that the htn provides the means of expressing high level goals and describing strategies how to reach those these goals may be decomposed in goals at lower level called this approach closely resembles the way a human player usually addresses a complex it is also good for domains where classical search for solution is not feasible due to the vastness of the problem domain or hierarchical task networks the hierarchical task or is an approach to automated planning in which the dependency among actions can be given in the form of networks a simple task network just a task network for is an acyclic digraph in which u is the node e is the edge and each node contains a task the edges of define a partial ordering of if the partial ordering is then we say that is totally in which case can be written as a sequence of tasks figure simple hierarchical task network a simple task network method is a of its precondition and a task the name of the method lets us refer unambiguously to substitution instances of the without having to write the preconditions and effects the task tells what kind of task can be applied if the preconditions are the preconditions specify the conditions that the current state needs to satisfy in order for the method to be and the network defines the specific subtasks to accomplish in order to accomplish the a method is relevant for a task if the current state satisfies the preconditions of a method that implements that this task can be then substituted with the instance of the the substitution is basically giving the method network as a solution for the if there is a task and the distance to home is and there exists a method and this method has a precondition that the distance is less than then a substation to the task can be made with this method figure htn method buy milk go to purchase go to walk if dimea international conference on digital interactive media in entertainment and arts if the distance is larger than another meth to be substituted figure htn method an stn planning domain is a set of operatio methods a stn planning problem is a state the task network w called initial task stn a plan is a soluti problem if there is a way to decompose w into \u03c0 and each decomposition is applicable in the ap the the algorithm that is capable to networks into plans is called or h cases where one does not want to use a forwa htn planning is generalization of s gives the planning procedure more freedom construct the task in order to provide this a bookke is needed to represent constraints that the plann not yet the bookkeeping is done by unenforced constraints explicitly in the task netw the htn generalizes the definition of a a task network is the pair w task nodes and c is a set of eac specifies a requirement that must be satisfied by a solution to a planning the definition of a method in htn also definition used in stn a htn pla and the s constraints form the task the htn plan identical to stn planning domains except they u instead of stn compared to classical planners the prim htn planners is their sophisticated knowledge r reasoning they can represent and planning with a good guide they can solve classical planning p magnitude more quickly than classical or neoc the primary disadvantage of htn is the nee author to write not only a set of planning opera of htn planning in building game for a htn planning algorithm to be adap trees we need to define the domain of h which is the domain of the thi a knowledge representation of the rules of the environments and possible strategies of game pla in this domain the game rules as well as kn tackle specific task are the implem tree building with htn is called tign implementation uses a procedure simila but adapted to build up a game walk hod instance needs ons o and a set of uple of the initial k network and the ion for a planning \u03c0 if \u03c0 is executable ppropriate state of decompose these omposition however there are stn planning that m about how to eeping mechanism ning algorithm has y representing the a task network in where is a set of h constraint in c y every plan that is o generalizes the an is a of subtasks and the nning domains are use htn methods mary advantage of representation and solve a variety of d set of htns to problems orders of classical ed of the domain ators but also a set trees ted to build game htn methods and is is in some sense e the game nown strategies to mentation of game this ar to tree rather than a the branches of the game tree rep the applies all met state of the world to produce new continues recursively until there are n have not already been applied to th in the task network generated by tignu actions will occur is determined by th by listing the actions in the order network can be into a gam case based reasoning in case based reasoning reasoning is a artificial intelligence both as problems and as a basis for standalone reasoning is a paradigm solving and learning that has became applied subfield of ai of recent yea intuition that problems tend to i are often similar to previously en that past solutions may be of cbr is particularly applicable to probl even when the domain is n for a deep domain systems have been the most successfu to determine a fault or diagnostic or to determine whether or repair is necessary given a set of past s figure game tree built fr figure htn to game tr to present moves generated by thods applicable to a given w states of the world and no applicable methods that he appropriate state of the the order in which the e they will the task me tree n game strategies well established subfield of a mean for addressing ai ai m for combining one of the most successful cbr is based on the it means that new problems ncountered problems f use in the current situation lems where earlier cases are not understood well enough diagnosis or classification ul areas of an illness from observed r not a certain treatment or olved cases rom htn ree algorithm interactive and adaptable media international conference on digital interactive media in entertainment and arts central tasks that all cbr methods have to deal with are identify the current problem find a past case similar to the new use that case to suggest a solution to the current evaluate the proposed and update the system by learning from this how this is what part of the process that is what type of problems that drives the varies while the underlying ideas of cbr can be applied consistently across application the specific implementation of the cbr methods particular retrieval and similarity is highly customized to the application at cbr and games many different implementations of cbr exist in cbr technology is nicely suited for recognizing complex situations much easier and more elegant than traditional parameter comparison or function there are especially evident cases in real time strategies where different attack and defense of global strategies are nicely defined by cbr datasets and later used in the running also intelligent bots behavior is also another typical depending on the number of enemy bots the layout of the terrain and position of human players the cbr system finds the closest cbr case and employs that strategy against the human players which in prior evaluation was proved to be highly game trees with ai planning in order to show the expressive power of ai planning in defining strategies for and the use of these plans to build game trees i implemented an algorithm that builds game trees for the the game tree of shows possible games of which are won by x first are won by o and the rest are draw all these games can be derived from building a complete game even though it is possible to build a complete game tree of it is definitely not an optimal many of the moves in this tree would be symmetrical and also there are a many moves that would be illogical or at least a bad strategy to even so what strategy should x first choose in order to win the there are few positions that lead to certain these positions involve simultaneous attack on two positions so the other player could not basically the only trick in figure winning strategy positions position leads to victory if the two of the three top bottom left corner and bottom right corner are free position lead to victory if two of the three top right bottom right corner and bottom middle are free and in the third position if the two of middle top and middle left are available the position is a certain there are many different arrangements of the tokens that give equivalent positions as these three by using planning we do not need to consider all possible layouts but just consider these three similar to what a human would the game starts from an empty the two relevant strategies that would lead to these positions are to take one corner or to take the center figure two starting moves the center position as we can see in the simulation results lead to a bigger number of victorious endings but it is also a straight forward strategy with obvious defense at this point we need to consider the moves of the if we take the left branch the opponent moves can be a a corner or a middle we also need to differentiate with a move to a corner adjacent with our like top left or bottom right or across the center to bottom right figure opponent response to corner move in cases one and we have a clear path to executing strategy so we need to capture the diagonally opposite and as for the third case the best way to go is to capture the center and go for strategy or depending of the next figure move after corner opening the first move leads to certain o will have to go to the center and x will achieve strategy the second move is a possible way to strategy if o makes a mistake in the next so x goes to the opposite for the third case since o is playing a valid strategy the only move that leaves a possible mistake from o would be to take the center and wait for o to go to the middle and then achieve strategy or which will be a symmetric situation to the one that we will find if we branched with the figure opponent response to center move if we go back to the second branch a possible way for the second player to engage is corner or the first dimea international conference on digital interactive media in entertainment and arts move is a valid strategy for o and can be mee corner move from x to try a mistake from o in the same as in the third case above from the pre another move would be go to the middle wh achieves strategy or figure move after cent the fist move will lead to win if o moves draw if it goes for the corners in t has to block the lower left corner which leave middle left or corner left which are strategy and to sum the strategies for the first corner strategy for the then for the ce the corners with the particularly the one oppo if the center is empty for the second strate we go for the opposite after this point w opponent or try to implement strategies or plan take center center empty plan take corner all corners empty plan take corner after center we have center take corner oppos opponent has plan take diagonal corner we have a the opponent ha the corner opposite to the one we have is plan block the opponent has tree tokens in a r agonal plan win we have two tokens in a colu nd the third place is free plan tie if all places are a hierarchical task network top level task is play this is a can be derived tie or sear search for plan is derived to both plan and pla plan which later leads to a call for the oppon recursive call to figure ht et with a opposite the future exactly evious and here x eventually ter opening to the middle or a the second case o es x to go for the d we have center or enter we try to get osite to the one o egy we go for it or we either block the r which lead to site to the one the as the and or di mn or a a complex task and rch for the an or plan and move and a tn this htn when executed will re game by creating nodes from them with branches with the move of t tree for the game over whi this set up with plans with ta for which considers all pos player with only of w and where the second opponent w reduction over the possible g these reductions can be very use computing capabilities but also we pr that planning can be very efficient if d trees by applying reasoning very further improvements to the gam the opponents moves are also planned all the meaningless and symmetrical m game ai in monopoly overview of the ai imp the ai agent is responsible for players in the the core principle a game tree with all the sensible move make from the current point of time minimax algorithm the agent selects t would bring the computer player mo with the highest building that would be big enough to consider is obstructed by the vastness of poss with all the possible random landings nodes of the game tree exponentially tackle this problem the ai agents discussed case based re the technologies are employed first the agent searches the cbr datab largest similarity with the current state associated with a playing th that the planner needs to build plans f consecutive player moves that bring th way only moves that are part of that str being a small fraction of the overall po edges of the game tree at each level dec at each level of the game tree the of a single after the strateg considered the response to those strate by the the move of the probability distribution of the dice as a more general strategy needs moves sin the expertise of the this ge more plausible moves than the focused after covering all opponents t deducting a feature move of the com cbr selected plan after strategies and reaching a reasonable s into account the memory limits an probabilities that the move is possible the dice the building of the game tre algorithm searches the game tree favorable move for the ai player usi the process is repeated each time the a esult with plans for possible m each position and linking the player we create a game ich we can run the minimax arget strategies creates a tree ssible moves for the second which x wins are draw this is a significant ames with a complete game eful for devices with limited rove a very important point designing meaningful game similar to human player me tree are also possible if in other words if we drop moves of the plementation the moves of the artificial e of the ai agent is building es that all the players would e then using the the move that in the future ost favorable game position a game tree in this game sufficient number of moves sible moves in combination of the the number of y grows at each to incorporates two already easoning and ai in the following base to find the case with the e of the this case is he strategy consists of goal and the plans consist of he player to that this rategy are those ossible moves the number of creases e model considers the moves gies of the ai player are egies needs to be considered depends of the well as the strategy of the s to be implemented for the nce we cannot be aware of eneral strategy would bring d strategy of the ai the agent comes back to mputer player by using the creating several loops of size of a game tree taking nd the rapidly decreasing e due to the distribution of ee then the minimax and decides on the most ing the minimax ai player is interactive and adaptable media international conference on digital interactive media in entertainment and arts auctioning and trading game moves are always accompanied by return of investment calculations in making the these calculations represent adaptation of the more general planning associated with the cases in the cbr these adaptations are necessary due to the fact that the cases do not identically correspond to the situation on the in addition calculating the game position value of each node of the game tree is done by heuristic functions that incorporate economic calculations of net present and strategic layout and so for example railroads in monopoly are known to be strategically effective because they bring constant income even though the income can be smaller than building on other details on the cbr implementation the implementation of the cbr is by using the is an framework in java for building cbr systems that is an evolution of previous work on knowledge intensive cbr for this implementation we need to look into three particular classes of the the for a implementation the standardcbrapplication interface needs to be the cbr cycle executed accepts an instance of this class represents a cbr query to the cbr the description component of represents the description of the case that will be looked up in the all cases and case solutions are implementing the casecomponent the platform connects to the cbr database via a connector each connector implements all the necessary methods for accessing the retrieval of storing and deletion of this implementation uses a custom xml structure for holding the cbr since the game will not update the cbr database only read a xml solution satisfies the the xml file to a certain extent is similar to the xml representation of the we are interested in finding one cbrcase that is the most similar case to the situation in the game at the time of the this procedure is done in the cycle method of the the cbr comparison is done by nearest neighbor search offers implementations for nn search algorithms of simple these implementations are called local for complex attributes like in our case global customized similarity mechanisms need to be the monopolydescription class is basically a serialization of the it holds all the information about the state of the the their amount of cash figure class diagram of the monopoly case component models on the other hand the monopolysolution class holds the three particular attributes that are needed for the the planning state and the game is implemented by using the controller software development the controller is responsible for implementing the game rules and handling all of the events in the game like roll of input commands for auctioning and etc from the the view layer is responsible for displaying the board and all of the input widgets on to the game and the models are data structures representing the game state figure class diagram of the monopoly models complex similarity representation in cbr the similarity measurement part of the nearest neighbor algorithm is implemented by implementing the localsimiralrityfunction and the globalsimiralityfunction a local similarity function is applied to simple attributes by the nn and a global similarity function is applied to compound in the case of our implementation the attributes of the monopolydescription are compound attributes describing the state of the number of amount of cash for every player and since monopolydescription is a custom casecomponent a global similarity function needs to be implemented to accurately find the distance between different cbr the similarity mechanism is inseparable core element of the cbr this mechanism represents how the cbr decides which strategy is best suited for the particular situation by dimea international conference on digital interactive media in entertainment and arts calculating the distance or similarity to other cases in the for the monopoly implementation we need to consider several basic monopoly is based on investing in properties and receiving revenues from those one of the basic strategies of the game is to build a set of properties that will bring constant income larger than the one of the so in time the opponents will have to declare but on the other hand over investment can lead to too stretched resources with low income that will eventually drove the player to to decide on these two we need a clear separation into two groups of cases in the cbr the first group of cases will represent a situation on the board where the player has significant income per loop formed of one or more color group maybe some buildings on them and so it is important to note that in this case the player is better situated than his opponents so he only needs to survive long enough to win the in the other group of cases either the opponent is not well positioned on the board or its opponents are better in this case further investments are necessary to improve the situation so the player can have a chance of winning in the long these metrics can be owning color valuing groups of evaluating the other opponents as and considering the amount of as it is obvious in monopoly the number of streets is not as nearly as important as the combination of streets the player it is also important to note that one cbr case does not hold only a single strategy in but its solution can have multiple different strategic for example one cbr case might simultaneously say buy this land to form a color group but also trade some other unimportant property to increase cash the cases do not represent all possible combinations of board they are only representation of typical game the cbr case solutions do not give exact instructions in general but rather strategic for example one cbr solution might say trade the streets that you only have one of each for the ones that you have two of that color then the planner based on the situation on the board needs to decompose this high level task to a low level like offer for and offer the exact amounts and actual streets are left to the planer to the monopoly cbr database is currently in development on a monopoly clone game called the cases are architected based on human player experience and there is a plan of making a number of slightly different strategies that differ on the style of playing and then running simulation tests that would determine the particular validity of each database as well as validity of certain segments of the strategy or even particular cases in the the actual execution of the strategies will not differ from strategy to strategy since the plan execution is more related to the structure and rules of the game than to the actual playing details on the planning implementation for the purpose of planning this implementation uses a modification of the the java simple hierarchical ordered planner is a domain independent htn planning system uses ordered task decomposition in reducing the htn to list of primitive tasks which form the an ordered task decomposition planner is an htn planner that plans for tasks in the same order that they will be this reduces the complexity of reasoning by removing a great deal of uncertainty about the which makes it easy to incorporate substantial expressive power into the planning in addition to the usual htn methods and the planners can make use of can do mixed and can do external function in order for the planer to generate plans it needs tree crucial state and the domain defines all the functionalities that the particular domain these are simple and complex the complex tasks also called methods create the hierarchy with the fact that they can be evaluated by simple tasks of other complex this is how a hierarchical structure of tasks is the problem reduction is done by reducing the high level complex tasks to simpler until all the tasks are the list of primitive tasks forms the the state represents the state of the it is a simple database of facts that represent the state of the the state is necessary to determine the way the problems or tasks are reduced to their primitive the reduction is done by satisfying different prerequisites set in the these prerequisites are defined in the the tasks are high level tasks or methods defined in the the planner based on the state and the goals selects one or more high level tasks that need to be reduced to plans figure diagram of a planner the plans then generate the game the number of moves generated by the plans is just a fraction of the possible moves at that this reduces the game tree providing the opportunity to generate smaller and deeper game trees and making more efficient decisions in conclusion even though the results from the cbr database are not complete at this time partial strategies are implemented as cases and recognized during game play by the cbr these smaller local strategies coupled with more global higher level strategies that are particularly important at the beginning of the game would form a complete cbr database and represent a knowledge engineered style of playing of the ai the ai planning approach is a proven method by the toe experiment and is suitable for implementing the strategies associated with the cbr this approach in general benefits from both cbr as well as ai planning and comprises an elegant even though ai planning can be enough as a single technology for some simpler problems like the complexity of monopoly would mean that the planner would have to incorporate core planner tasks plan state interactive and adaptable media international conference on digital interactive media in entertainment and arts large and complex domain and a very big state the cbr application helps reduce this complexity by focusing the planning on smaller domain of the basically the cbr reduces the overall goal of the play the to smaller more concrete goals suitable to the particular state of the thus reducing the need for global planning strategies and complex planning furthermore this symbiosis of technologies gives way for more precise and finely tuned strategies which can be difficult to include into global plan for the whole one simple example for the monopoly game would be sometimes better to stay in jail because rolling double increases the probability of landing on some field ten or twelve steps from the that can be of great importance to the rest of the these and similar small local strategies can be easily recognized by similar cases in the cbr in other words the system is flexible enough so that new strategies can be incorporated easily missing strategies can be also recognized by the distance metrics as well as wrong assumptions in the strategies can be easily one other important property of the system is that is highly the game its self can be diversely different depending on the configuration of the even though the platform is restricted to monopoly type of changing the layout and values of the fields effectively brings completely different properties of the in addition the cbr database represents the entire experience of the ai it can be filled with rich set of strategies or even configured with different flavors of difficulties of this of course coupled with the domain of the planner which can differ from a case to a case as future work further exploration of this technology would go towards complete implementation of an ai aware agent for initial results from the local cases with more specific strategies show cbr as a capable tool for representing expertise in playing the completing the more general strategies and coupling them with the planning domain will give precise results on the benefits from this there is also need for exploring the planning of strategies of this task is to some extent different because we cannot always expect the opponent to select the best move we in the example all possible moves of the opponent were taken into if we used the same planner for the opponent only tie games would result from the game in other words mistakes of the players also need to be the cbr platform brings other functionalities well worth of exploring as the revision stage of the platform is basically capable of fine tuning strategies or even developing new strategies for the a well written underlying ai planning model with a capable feedback of the game tree evaluation back to the cbr revision capability can be an interesting concept in automatic experience acquisition for the ai there are also many other fields were combined cbr and planning approach can be incorporated into a problem this combination is analogous in a big extent to a human way of people in addition to logic of reasoning in situations with lack of information rely to planning strategies and prior exactly the intuition behind cbr ai planning acknowledgments we would like to thank sofia tsekeridou for her involvement in the valuable discussions we had on the topic of",
    "references": [
        "[1] Minimax. Wikipedia. [Online] [Cited: April 23, 2008.] http://en.wikipedia.org/wiki/Minimax. ",
        "[2] Von Neumann, J: Zur theorie der gesellschaftsspiele Math. Annalen. 100 (1928) 295320 ",
        "[3] Automated Planning. Wikipedia. [Online] [Cited: April 23, 2008.] http://en.wikipedia.org/wiki/Automated_planning. ",
        "[4] SanchezRuiz, Antonio, et al. Game AI for a Turnbased Strategy Game with Plan Adaptation and Ontologybased retrieval. ",
        "[5] K. Erol, J. Hendler, and D. Nau (1994). Semantics for hierarchical tasknetwork planning. Technical Report TR94 31, UMIACS. ",
        "[6] Smith, S. J. J. and Dana S. Nau, T. A. Throp. A Planning approach decrarer play in contract bridge. Computational Intelligence. 1996, Vol. 12, 1. ",
        "[7] One Jump Ahead: Challenging Human Supremacy in Checkers. J.Schaeffer. s.l. : SpringerVerlag, 1997. ",
        "[8] IBM. How Deep Blue works. [Online] 1997. [Cited: April 23, 2008.] http://www.research.ibm.com/deepblue/meet/html/d.3.2.html ",
        "[9] Ghallab, Malik, Nau, Dana and Traverso, Paolo. Automated Planning theory and practice. s.l. : Morgan Kaufmann Publishers, May 2004. ISBN 1558608567. ",
        "[10] Case Based Reasoning. Experiences, Lessons and Future. Leake, David. s.l. : AAAI Press. MIT Press., 1997. ",
        "[11] Applying casebased reasoning: techniques for enterprise systems. Watson, I. San Francisco, CA, USA : Morgan Kaufmann Publishers Inc., 1998. ",
        "[12] Plaza, A. Aamodt and E. Casebased reasoning: Foundational issues, methodological. AI Communications. 1994, 7(i). ",
        "[13] Tictactoe. Wikipedia. [Online] [Cited: April 23, 2008.] http://en.wikipedia.org/wiki/Tictactoe. ",
        "[14] D\u00edazAgudo, B. and Gonz\u00e1lezCalero, P. A. An architecture for knowledge intensive CBR systems. Advances in CaseBased Reasoning (EWCBR00). New York : SpringerVerlag, Berlin Heidelberg, 2000. ",
        "[15] Ilghami, Okhtay and Nau, Dana S. A General Approach to Synthesize ProblemSpecific Planners. 2003. 302 DIMEA 2008 3rd International Conference on Digital Interactive Media in Entertainment and Arts"
    ]
}