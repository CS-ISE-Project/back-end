{
    "url": "dummy",
    "title": "How to Teach Software Modeling",
    "authors": [
        "Tetsuo Tamai"
    ],
    "institutes": [
        "Graduate School of Arts and Sciences, The University of Tokyo, Japan"
    ],
    "keywords": [
        "software modeling",
        "software engineering education",
        "UML"
    ],
    "abstract": "To enhance motivation of students to study software engineering, some way of \ufb01nding balance between the scienti\ufb01c aspect and the practical aspect of software engineering is required. In this paper, we claim that teaching multiple software modeling techniques from a uni\ufb01ed viewpoint is a good way of obtaining the balance and attracting the students interest as well.",
    "content": "introduction software engineering education at universities faces a common that is regular students do not usually have experience of developing software for practical use and thus are not motivated for software engineering aiming at high quality software production by a project team or a persistent software projects conducted by students simulating real scale software development may help enhance students although it requires a lot of efforts to prepare such projects and manage another way of solving this problem is to teach those who al ready have real experience in in our there are cur rently \ufb01ve students under the authors supervision who are working at companies as well as doing research in our as a interactions between the parttime students and the other regular students stimulate each particularly enlighten ing the regular students to practical software too much emphasis on practicality may bring negligence to scienceand technology and may generate a good balance between the scienti\ufb01c aspect and the practical aspect of software engineering should always be in our teaching various software modeling techniques is a good way to achieve balanced software engineering it is needless to say that model is a key concept and modeling is an essential skill in software there are a variety of mod eling some are intuitive and quite accessibleto while some are highly sophisticated and attract theory oriented stu dents and in this we would like to show that it is effective to teach multiple modeling techniques from a uni\ufb01ed it is based on our experience of teaching software engineering courses at sev eral universities in the author published a textbook on software speci\ufb01cally focused on software model ing it is written in the book covers the whole area of software including testing and evolution but the modeling part has a role of attracting inter ests of intelligent who may not have much experience in developing real scale software it also gives a consistent viewpoint penetrating through various techniques employed in dif ferent stages of software modeling techniques in software models are used for various life cycle process project product quality domain requirements design object data in the we basically focus on requirements and design models but most of the discussionswill hold for other kinds of teaching modeling is almost equal to teaching mod els are constructed through capturing the crucial properties and structure of the abstracting away irrelevant learning how to model is a good training for mastering graph representation of models many software models are represented with wide ac ceptance of uml symbolizes the trend that diagrams are often pre ferred to textual among many types of graph structured diagrams are by far the most widely the reasons may be as a most fundamental way for human mind to understand the world is by regarding it as consisting of a set of conceptual units and a set of relations between conceptual units can be naturally illustrated with boxes or circles or whatever closed \ufb01gures and relations can be illustrated with lines or ar rows connecting such corresponding to vertices and edges of it is easy to draw graph structured diagrams by hand or with drawing concepts and algorithms of the graph theory are available and often useful in analyzing models represented by a typical example is reasoning on transitive relations by ing along paths of the concept of subgraph is highly useful in models or ing a number of models share the same structure of table shows graph structures of some typical table graph structures of typical models model vertex edge data \ufb02ow process data \ufb02ow er entity relationship state transition state transition jsd process data stream connection state vector connection activity activity control \ufb02ow petri net transition \ufb01re and token \ufb02ow commonality and difference between models it is pedagogical to let students notice the common structure shared by a number of the apparent resemblance often causes such confusion can be observed not only in software modeling graphs but in many diagrams found in daily proposals and other it is often the case that one vertex denotes a type of things and other denotes quite a different type on the same diagram or one type of edges with edges with different it is important to make students consciously aware the differences between different we often experience that when we let students draw data \ufb02ow diagrams who appear to have understood the data \ufb02ow model the diagrams turn out to be thing like control \ufb02ow to show the it is instructive to categorize models resented by there are two static an edge connecting vertex a and vertex b represents a tion between a and when the edge is it means and b are in some and when it means has a relation with typical examples include entity relationship class diagram and semantic dynamic an edge from vertex a to b denotes a move from a to the edge in this case is always there are two the case where a view of control moves from a to examples are control \ufb02ow model and state transition the case where data or objects \ufb02ow from a to ples are data \ufb02ow work \ufb02ow and portation \ufb02ow static models and dynamic models may not be easily confused but confusion betweendifferent dynamic models are often data \ufb02ow and control \ufb02ow or state transition and activity since graphs are intuitively their semantics are apt to be understood ambiguously or uml uml diagrams can also be viewed in terms of graph table shows graph structures of \ufb01ve uml table graph structures of uml diagrams diagram vertex edge class diagram class association state machine state transition activity diagram activity control \ufb02ow collaboration diagram object message \ufb02ow sequence diagram message message \ufb02ow anchor point it is usually not desirable to teach uml per uml is a lection of miscellaneous diagrams and its speci\ufb01cation is ously for the pedagogical uml had better be regarded as a catalogue of analysis and design collected around diagrammatic diagrams should be selected according to the policy of how to teach modeling each uml diagram contains overly rich which times blur the essential property of the for the activity diagram is essentially a control \ufb02ow diagram but it also cludes a notation for data \ufb02ow from the stance of phasizing differences between various it is not appropriate to include such ad hoc by the same the oration diagram renamed to in uml is explained to have the equivalent semantics as the sequence but if that is the signi\ufb01cance of the collaboration diagram is considerably the author prefers to regard it as showing collaboration relations between integrating a set of different sequence conclusion software modeling is important by itself but teaching modeling in the software engineering course has at least two additional one is to give a view to the whole software neering through the standpoint of modeling the other is to attract interest of good students who may not have much rience in developing a software but possess intelligence and will to attack complexity of modern software",
    "references": [
        "[1] T. Tamai. Foundations of Software Engineering. Iwanami Shoten, Tokyo, Japan, 2004. in Japanese. 610"
    ]
}