{
    "publication_date": "15-05-2005",
    "title": "How to Teach Software Modeling",
    "authors": [
        "Tetsuo Tamai"
    ],
    "institutes": [
        "Graduate School of Arts and Sciences, The University of Tokyo"
    ],
    "keywords": [
        "software modeling",
        "software engineering education",
        "UML"
    ],
    "abstract": "To enhance motivation of students to study software engineering, some way of \ufb01nding balance between the scienti\ufb01c aspect and the practical aspect of software engineering is required. In this paper, we claim that teaching multiple software modeling techniques from a uni\ufb01ed viewpoint is a good way of obtaining the balance and attracting the students interest as well.",
    "content": "1. INTRODUCTION\n\nSoftware engineering education at universities faces a common problem; that is regular students do not usually have experience of developing software for practical use and thus are not motivated for software engineering aiming at high quality software production by a project team or a persistent organization. Software projects conducted by students simulating real scale software development may help enhance students motivation, although it requires a lot of efforts to prepare such projects and manage them. Another way of solving this problem is to teach those who al- ready have real experience in industry. In our case, there are cur- rently \ufb01ve Ph. D. students under the authors supervision who are working at companies as well as doing research in our lab. As a by-product, interactions between the part-time students and the other regular students stimulate each other, particularly enlighten- ing the regular students to practical software issues. However, too much emphasis on practicality may bring negligence to scienceand technology and may generate anti-intellectualism. A good balance between the scienti\ufb01c aspect and the practical aspect of software engineering should always be pursued. In our view, teaching various software modeling techniques is a good way to achieve balanced software engineering education. It is needless to say that model is a key concept and modeling is an essential skill in software engineering. There are a variety of mod- eling techniques; some are intuitive and quite accessibleto novices, while some are highly sophisticated and attract theory oriented stu- dents and researchers. In this paper, we would like to show that it is effective to teach multiple modeling techniques from a uni\ufb01ed viewpoint. It is based on our experience of teaching software engineering courses at sev- eral universities in Japan. Recently, the author published a textbook on software engineering, speci\ufb01cally focused on software model- ing (unfortunately, it is written in Japanese)[1]. The book covers the whole area of software engineering, including design, testing and evolution but the modeling part has a role of attracting inter- ests of intelligent students, who may not have much experience in developing real scale software systems. It also gives a consistent viewpoint penetrating through various techniques employed in dif- ferent stages of software engineering.\n\n2. MODELING TECHNIQUES\n\nIn software engineering, models are used for various purposes, e.g. life cycle model, process model, project model, product model, quality model, domain model, requirements model, design model, object model, data model, etc. In the following, we basically focus on requirements and design models but most of the discussionswill hold for other kinds of models. Teaching modeling is almost equal to teaching abstraction. Mod- els are constructed through capturing the crucial properties and structure of the target, abstracting away irrelevant details. Thus, learning how to model is a good training for mastering abstraction.\n\n2.1 Graph Representation of Models\n\nMany software models are represented with diagrams. Wide ac- ceptance of UML symbolizes the trend that diagrams are often pre- ferred to textual languages. Among many types of diagrams, graph structured diagrams are by far the most widely used. The reasons may be as follows. 1. A most fundamental way for human mind to understand the world is by regarding it as consisting of a set of conceptual units and a set of relations between them. Conceptual units can be naturally illustrated with boxes or circles or whatever closed \ufb01gures and relations can be illustrated with lines or ar- rows connecting such \ufb01gures, corresponding to vertices and edges of graphs, respectively."
}