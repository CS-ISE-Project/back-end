{
    "title": "A Prototype Implementation of an Orthographic Software Modeling Environment",
    "authors": [
        "Colin Atkinson",
        "Dietmar Stoll",
        "Christian Tunjic",
        "Jacques Robin"
    ],
    "institutes": [
        "University of Mannheim, Germany",
        "University of Mannheim, Germany",
        "University of Mannheim, Germany",
        "Universidade Federal de Pernambuco, Recife, Brasil"
    ],
    "keywords": [
        "Orthographic Software Modeling",
        "Viewbased Modeling"
    ],
    "abstract": "Orthographic Software Modeling (OSM) is a viewcentric software engineering approach that aims to leverage the orthographic projection metaphor used in the visualization of physical objects to visualize software systems. Although the general concept of OSM does not prescribe specific sets of views, a concrete OSM environment has to be specific about the particular views to be used in a particular project. At the University of Mannheim we are developing a prototype OSM environment, nAOMi, that supports the views defined by the KobrA 2.0 method, a version of KobrA adapted for OSM. In this paper we provide an overview of the KobrA 2.0 metamodel underpinning nAOMi and give a small example of its use to model a software system.",
    "permissions": "Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.",
    "content": "Orthographic Software Modeling (OSM) is based on three fundamental hypotheses (a) that it is feasible to integrate the many different kinds of artifacts used in contemporary software engineering methods within a single coherent methodology in which they are treated as views, (b) that it is feasible to create an efficient and scalable way of supporting these views by generating them dynamically, on-the-fly, from a Single Underlying Model (SUM) using model-based transformations and (c) that it is feasible to provide an intuitive metaphor for navigating around these many views by adapting the orthographic projection technique underpinning the CAD tools used in other engineering disciplines. Figure 1: Orthographic Projection. As shown in Figure 1, the main advantages of using the idea of orthographic projection to define the views used to visualize and describe a system are that they (a) can be organized according to a simple and easy-to-understand metaphor and (b) collectively represent all the properties of a system with minimal overlap and redundancy. In practice this translates into a set of dimensions, each containing well-defined choices (or so called dimension elements) that can be used to select individuals views. As shown in Figure 2, the main advantage of making the artifacts used to describe a software system views of a SUM is that the number of pairwise coherence relationships that have to be maintained is reduced and new views can be introduced by simply defining their relationship to the SUM. Moreover, the importance of this advantage grows quickly as the size of the system and the complexity of the deployed development methodology increase. Another important advantage is that the dominance of one particular kind of view over the development process (e.g. code) at the expense of other kinds of views (e.g. graphical models) is reduced so that any appropriate type of views can be used to enrich the underlying description of the system, depending on the needs and skills of the stakeholder involved. This makes it possible to subsume all view types under the same, overarching"
}